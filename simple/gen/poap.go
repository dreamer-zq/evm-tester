// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// POAPMetaData contains all meta data concerning the POAP contract.
var POAPMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"POAPCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_Identiry\",\"type\":\"string\"}],\"name\":\"_create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPOAPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604080516020810190915260008152620000356200002f6200005a565b6200006b565b6200004081620000bb565b506200004f6200002f6200005a565b600160055562000271565b600062000066620000cd565b905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6004620000c98282620001a5565b5050565b600073c77fa7345679ccdbdb6204f0ca6a024be4abd002193301620000f9575060131936013560601c90565b3362000066565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012b57607f821691505b6020821081036200014c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001a057600081815260208120601f850160051c810160208610156200017b5750805b601f850160051c820191505b818110156200019c5782815560010162000187565b5050505b505050565b81516001600160401b03811115620001c157620001c162000100565b620001d981620001d2845462000116565b8462000152565b602080601f831160018114620002115760008415620001f85750858301515b600019600386901b1c1916600185901b1785556200019c565b600085815260208120601f198616915b82811015620002425788860151825594840194600190910190840162000221565b5085821015620002615787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612bd680620002816000396000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c806383b74baa116100b8578063ac8a584a1161007c578063ac8a584a146102aa578063d0def521146102bd578063e985e9c5146102d0578063f242432a1461030c578063f2fde38b1461031f578063f5db08d91461033257600080fd5b806383b74baa146102435780638da5cb5b146102565780639870d7fe14610271578063a22cb46514610284578063a4fbc6601461029757600080fd5b80632eb2c2d61161010a5780632eb2c2d6146101d957806340c10f19146101ec5780634e1273f4146101ff5780636d70f7ae1461021f578063715018a6146102325780637f8e89011461023a57600080fd5b8062fdd58e1461014657806301ffc9a71461016c5780630e89341c1461018f57806326a3a36a146101af57806327a099d8146101c4575b600080fd5b610159610154366004611c2a565b610345565b6040519081526020015b60405180910390f35b61017f61017a366004611c6a565b6103e0565b6040519015158152602001610163565b6101a261019d366004611c8e565b610430565b6040516101639190611cf7565b6101c26101bd366004611d52565b6107ab565b005b6101cc610a7b565b6040516101639190611e15565b6101c26101e7366004611fbb565b610add565b6101c26101fa366004611c2a565b610b3b565b61021261020d366004612064565b610ba7565b6040516101639190612169565b61017f61022d36600461217c565b610cd0565b6101c2610cdd565b61015960055481565b6101c26102513660046121db565b610cf1565b6000546040516001600160a01b039091168152602001610163565b6101c261027f36600461217c565b610da2565b6101c2610292366004612226565b610db8565b6101c26102a5366004612262565b610dca565b6101c26102b836600461217c565b610e75565b6101c26102cb3660046122cd565b610e88565b61017f6102de36600461231f565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b6101c261031a366004612352565b610f15565b6101c261032d36600461217c565b610f6c565b6101596103403660046123b6565b610fe2565b60006001600160a01b0383166103b55760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061041157506001600160e01b031982166303a24d0760e21b145b806103da57506301ffc9a760e01b6001600160e01b03198316146103da565b60606000600760008481526020019081526020016000206040518060a0016040529081600082018054610462906123f7565b80601f016020809104026020016040519081016040528092919081815260200182805461048e906123f7565b80156104db5780601f106104b0576101008083540402835291602001916104db565b820191906000526020600020905b8154815290600101906020018083116104be57829003601f168201915b505050505081526020016001820180546104f4906123f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610520906123f7565b801561056d5780601f106105425761010080835404028352916020019161056d565b820191906000526020600020905b81548152906001019060200180831161055057829003601f168201915b50505050508152602001600282018054610586906123f7565b80601f01602080910402602001604051908101604052809291908181526020018280546105b2906123f7565b80156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b50505050508152602001600382018054610618906123f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610644906123f7565b80156106915780601f1061066657610100808354040283529160200191610691565b820191906000526020600020905b81548152906001019060200180831161067457829003601f168201915b50505091835250506004919091015460209182015281518282015160408085015190519495506000946106c49401612431565b60408051601f198184030181529082905260608401516080850151634f689bcb60e11b84526004840152909250829173__$73785166eb94af412e1735ba7ee7be91af$__90639ed1379690602401600060405180830381865af415801561072f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261075791908101906124c4565b60405160200161076993929190612545565b60405160208183030381529060405290506107838161100d565b6040516020016107939190612647565b60405160208183030381529060405292505050919050565b6107bd6107b661115f565b600161116e565b806107e257506000546001600160a01b03166107d761115f565b6001600160a01b0316145b6107fe5760405162461bcd60e51b81526004016103ac9061268c565b866108385760405162461bcd60e51b815260206004820152600a602482015269456d707479206e616d6560b01b60448201526064016103ac565b6006888860405161084a9291906126b3565b9081526020016040518091039020546000146108945760405162461bcd60e51b81526020600482015260096024820152681b985b59481d5cd95960ba1b60448201526064016103ac565b600554600689896040516108a99291906126b3565b9081526020016040518091039020819055506040518060a0016040528089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092019190915250505090825250604080516020601f8601819004810282018101909252848152918101919085908590819084018382808284376000920182905250938552505042602093840152506005548152600790915260409020815181906109d29082612709565b50602082015160018201906109e79082612709565b50604082015160028201906109fc9082612709565b5060608201516003820190610a119082612709565b50608082015181600401559050507fd289120f29a4955153cbfd6b70b90301c2051931e4e9db7110b3ce6cdd7aed6a8888600554604051610a54939291906127c8565b60405180910390a160058054906000610a6c83612817565b91905055505050505050505050565b60606001805480602002602001604051908101604052809291908181526020018280548015610ad357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ab5575b5050505050905090565b610ae561115f565b6001600160a01b0316856001600160a01b03161480610b0b5750610b0b856102de61115f565b610b275760405162461bcd60e51b81526004016103ac90612830565b610b3485858585856111d7565b5050505050565b610b466107b661115f565b80610b6b57506000546001600160a01b0316610b6061115f565b6001600160a01b0316145b610b875760405162461bcd60e51b81526004016103ac9061268c565b610ba382826001604051806020016040528060008152506113ba565b5050565b60608151835114610c0c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016103ac565b600083516001600160401b03811115610c2757610c27611e62565b604051908082528060200260200182016040528015610c50578160200160208202803683370190505b50905060005b8451811015610cc857610c9b858281518110610c7457610c7461287f565b6020026020010151858381518110610c8e57610c8e61287f565b6020026020010151610345565b828281518110610cad57610cad61287f565b6020908102919091010152610cc181612817565b9050610c56565b509392505050565b60006103da82600161116e565b610ce56114db565b610cef6000611554565b565b610cfc6107b661115f565b80610d2157506000546001600160a01b0316610d1661115f565b6001600160a01b0316145b610d3d5760405162461bcd60e51b81526004016103ac9061268c565b60005b82811015610d9c57610d8a848483818110610d5d57610d5d61287f565b9050602002016020810190610d72919061217c565b836001604051806020016040528060008152506113ba565b80610d9481612817565b915050610d40565b50505050565b610daa6114db565b610db58160016115a4565b50565b610ba3610dc361115f565b8383611631565b610dd56107b661115f565b80610dfa57506000546001600160a01b0316610def61115f565b6001600160a01b0316145b610e165760405162461bcd60e51b81526004016103ac9061268c565b600060068383604051610e2a9291906126b3565b908152602001604051809103902054905060005b84811015610e6d57610e5b868683818110610d5d57610d5d61287f565b80610e6581612817565b915050610e3e565b505050505050565b610e7d6114db565b610db5816001611711565b610e936107b661115f565b80610eb857506000546001600160a01b0316610ead61115f565b6001600160a01b0316145b610ed45760405162461bcd60e51b81526004016103ac9061268c565b600060068383604051610ee89291906126b3565b9081526020016040518091039020549050610d9c84826001604051806020016040528060008152506113ba565b610f1d61115f565b6001600160a01b0316856001600160a01b03161480610f435750610f43856102de61115f565b610f5f5760405162461bcd60e51b81526004016103ac90612830565b610b348585858585611841565b610f746114db565b6001600160a01b038116610fd95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ac565b610db581611554565b600060068383604051610ff69291906126b3565b908152602001604051809103902054905092915050565b6060815160000361102c57505060408051602081019091526000815290565b6000604051806060016040528060408152602001612b61604091399050600060038451600261105b9190612895565b61106591906128a8565b6110709060046128ca565b6001600160401b0381111561108757611087611e62565b6040519080825280601f01601f1916602001820160405280156110b1576020820181803683370190505b509050600182016020820185865187015b8082101561111d576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506110c2565b5050600386510660018114611139576002811461114c57611154565b603d6001830353603d6002830353611154565b603d60018303535b509195945050505050565b600061116961197a565b905090565b6000805b82548110156111cd57836001600160a01b03168382815481106111975761119761287f565b6000918252602090912001546001600160a01b0316036111bb5760019150506103da565b806111c581612817565b915050611172565b5060009392505050565b81518351146112395760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016103ac565b6001600160a01b03841661125f5760405162461bcd60e51b81526004016103ac906128e1565b600061126961115f565b905060005b845181101561135457600085828151811061128b5761128b61287f565b6020026020010151905060008583815181106112a9576112a961287f565b60209081029190910181015160008481526002835260408082206001600160a01b038e1683529093529190912054909150818110156112fa5760405162461bcd60e51b81526004016103ac90612926565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611339908490612895565b925050819055505050508061134d90612817565b905061126e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113a4929190612970565b60405180910390a4610e6d8187878787876119ad565b6001600160a01b03841661141a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016103ac565b600061142461115f565b9050600061143185611b08565b9050600061143e85611b08565b905060008681526002602090815260408083206001600160a01b038b16845290915281208054879290611472908490612895565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46114d283600089898989611b53565b50505050505050565b6114e361115f565b6001600160a01b03166114fe6000546001600160a01b031690565b6001600160a01b031614610cef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ac565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b81548110156115fd57826001600160a01b03168282815481106115cc576115cc61287f565b6000918252602090912001546001600160a01b0316036115eb57505050565b806115f581612817565b9150506115a7565b508054600181018255600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055565b816001600160a01b0316836001600160a01b0316036116a45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016103ac565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000805b825481101561180257836001600160a01b031683828154811061173a5761173a61287f565b6000918252602090912001546001600160a01b03160361175957600191505b8180156117705750825461176e826001612895565b105b156117f05782611781826001612895565b815481106117915761179161287f565b9060005260206000200160009054906101000a90046001600160a01b03168382815481106117c1576117c161287f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806117fa81612817565b915050611715565b50801561183c57818054806118195761181961299e565b600082815260209020810160001990810180546001600160a01b03191690550190555b505050565b6001600160a01b0384166118675760405162461bcd60e51b81526004016103ac906128e1565b600061187161115f565b9050600061187e85611b08565b9050600061188b85611b08565b905060008681526002602090815260408083206001600160a01b038c168452909152902054858110156118d05760405162461bcd60e51b81526004016103ac90612926565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061190f908490612895565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461196f848a8a8a8a8a611b53565b505050505050505050565b600073c77fa7345679ccdbdb6204f0ca6a024be4abd0021933016119a5575060131936013560601c90565b503390565b90565b6001600160a01b0384163b15610e6d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906119f190899089908890889088906004016129b4565b6020604051808303816000875af1925050508015611a2c575060408051601f3d908101601f19168201909252611a2991810190612a12565b60015b611ad857611a38612a2f565b806308c379a003611a715750611a4c612a4a565b80611a575750611a73565b8060405162461bcd60e51b81526004016103ac9190611cf7565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016103ac565b6001600160e01b0319811663bc197c8160e01b146114d25760405162461bcd60e51b81526004016103ac90612ad3565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611b4257611b4261287f565b602090810291909101015292915050565b6001600160a01b0384163b15610e6d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611b979089908990889088908890600401612b1b565b6020604051808303816000875af1925050508015611bd2575060408051601f3d908101601f19168201909252611bcf91810190612a12565b60015b611bde57611a38612a2f565b6001600160e01b0319811663f23a6e6160e01b146114d25760405162461bcd60e51b81526004016103ac90612ad3565b80356001600160a01b0381168114611c2557600080fd5b919050565b60008060408385031215611c3d57600080fd5b611c4683611c0e565b946020939093013593505050565b6001600160e01b031981168114610db557600080fd5b600060208284031215611c7c57600080fd5b8135611c8781611c54565b9392505050565b600060208284031215611ca057600080fd5b5035919050565b60005b83811015611cc2578181015183820152602001611caa565b50506000910152565b60008151808452611ce3816020860160208601611ca7565b601f01601f19169290920160200192915050565b602081526000611c876020830184611ccb565b60008083601f840112611d1c57600080fd5b5081356001600160401b03811115611d3357600080fd5b602083019150836020828501011115611d4b57600080fd5b9250929050565b6000806000806000806000806080898b031215611d6e57600080fd5b88356001600160401b0380821115611d8557600080fd5b611d918c838d01611d0a565b909a50985060208b0135915080821115611daa57600080fd5b611db68c838d01611d0a565b909850965060408b0135915080821115611dcf57600080fd5b611ddb8c838d01611d0a565b909650945060608b0135915080821115611df457600080fd5b50611e018b828c01611d0a565b999c989b5096995094979396929594505050565b6020808252825182820181905260009190848201906040850190845b81811015611e565783516001600160a01b031683529284019291840191600101611e31565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611e9d57611e9d611e62565b6040525050565b60006001600160401b03821115611ebd57611ebd611e62565b5060051b60200190565b600082601f830112611ed857600080fd5b81356020611ee582611ea4565b604051611ef28282611e78565b83815260059390931b8501820192828101915086841115611f1257600080fd5b8286015b84811015611f2d5780358352918301918301611f16565b509695505050505050565b60006001600160401b03821115611f5157611f51611e62565b50601f01601f191660200190565b600082601f830112611f7057600080fd5b8135611f7b81611f38565b604051611f888282611e78565b828152856020848701011115611f9d57600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080600060a08688031215611fd357600080fd5b611fdc86611c0e565b9450611fea60208701611c0e565b935060408601356001600160401b038082111561200657600080fd5b61201289838a01611ec7565b9450606088013591508082111561202857600080fd5b61203489838a01611ec7565b9350608088013591508082111561204a57600080fd5b5061205788828901611f5f565b9150509295509295909350565b6000806040838503121561207757600080fd5b82356001600160401b038082111561208e57600080fd5b818501915085601f8301126120a257600080fd5b813560206120af82611ea4565b6040516120bc8282611e78565b83815260059390931b85018201928281019150898411156120dc57600080fd5b948201945b83861015612101576120f286611c0e565b825294820194908201906120e1565b9650508601359250508082111561211757600080fd5b5061212485828601611ec7565b9150509250929050565b600081518084526020808501945080840160005b8381101561215e57815187529582019590820190600101612142565b509495945050505050565b602081526000611c87602083018461212e565b60006020828403121561218e57600080fd5b611c8782611c0e565b60008083601f8401126121a957600080fd5b5081356001600160401b038111156121c057600080fd5b6020830191508360208260051b8501011115611d4b57600080fd5b6000806000604084860312156121f057600080fd5b83356001600160401b0381111561220657600080fd5b61221286828701612197565b909790965060209590950135949350505050565b6000806040838503121561223957600080fd5b61224283611c0e565b91506020830135801515811461225757600080fd5b809150509250929050565b6000806000806040858703121561227857600080fd5b84356001600160401b038082111561228f57600080fd5b61229b88838901612197565b909650945060208701359150808211156122b457600080fd5b506122c187828801611d0a565b95989497509550505050565b6000806000604084860312156122e257600080fd5b6122eb84611c0e565b925060208401356001600160401b0381111561230657600080fd5b61231286828701611d0a565b9497909650939450505050565b6000806040838503121561233257600080fd5b61233b83611c0e565b915061234960208401611c0e565b90509250929050565b600080600080600060a0868803121561236a57600080fd5b61237386611c0e565b945061238160208701611c0e565b9350604086013592506060860135915060808601356001600160401b038111156123aa57600080fd5b61205788828901611f5f565b600080602083850312156123c957600080fd5b82356001600160401b038111156123df57600080fd5b6123eb85828601611d0a565b90969095509350505050565b600181811c9082168061240b57607f821691505b60208210810361242b57634e487b7160e01b600052602260045260246000fd5b50919050565b693d913730b6b2911d101160b11b8152835160009061245781600a850160208901611ca7565b72111610113232b9b1b934b83a34b7b7111d101160691b600a91840191820152845161248a81601d840160208901611ca7565b6b1116101134b6b0b3b2911d1160a11b601d929091019182015283516124b7816029840160208801611ca7565b0160290195945050505050565b6000602082840312156124d657600080fd5b81516001600160401b038111156124ec57600080fd5b8201601f810184136124fd57600080fd5b805161250881611f38565b6040516125158282611e78565b82815286602084860101111561252a57600080fd5b61253b836020830160208701611ca7565b9695505050505050565b60008451612557818460208901611ca7565b71222c202261747472696275746573223a205b60701b9083019081527f7b2274726169745f74797065223a2022e58f91e8a18ce696b9444944222c227660128201526730b63ab2911d101160c11b603282015284516125bd81603a840160208901611ca7565b7f227d2c207b2274726169745f74797065223a2022e58f91e8a18ce697b6e997b4603a92909101918201526b1116113b30b63ab2911d101160a11b605a8201528351612610816066840160208801611ca7565b7f227d5d2c202264657369676e6572223a202269736f746f702e746f70227d00006066929091019182015260840195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161267f81601d850160208701611ca7565b91909101601d0192915050565b6020808252600d908201526c27b7363c9027b832b930ba37b960991b604082015260600190565b8183823760009101908152919050565b601f82111561183c57600081815260208120601f850160051c810160208610156126ea5750805b601f850160051c820191505b81811015610e6d578281556001016126f6565b81516001600160401b0381111561272257612722611e62565b6127368161273084546123f7565b846126c3565b602080601f83116001811461276b57600084156127535750858301515b600019600386901b1c1916600185901b178555610e6d565b600085815260208120601f198616915b8281101561279a5788860151825594840194600190910190840161277b565b50858210156127b85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081528260408201528284606083013760006060848301015260006060601f19601f8601168301019050826020830152949350505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161282957612829612801565b5060010190565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b808201808211156103da576103da612801565b6000826128c557634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176103da576103da612801565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000612983604083018561212e565b8281036020840152612995818561212e565b95945050505050565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b0386811682528516602082015260a0604082018190526000906129e09083018661212e565b82810360608401526129f2818661212e565b90508281036080840152612a068185611ccb565b98975050505050505050565b600060208284031215612a2457600080fd5b8151611c8781611c54565b600060033d11156119aa5760046000803e5060005160e01c90565b600060443d1015612a585790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612a8757505050505090565b8285019150815181811115612a9f5750505050505090565b843d8701016020828501011115612ab95750505050505090565b612ac860208286010187611e78565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612b5590830184611ccb565b97965050505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212209111649af1d3a5f348f46c8ecd32616c3643df106cdc5611d298392b89e63e7c64736f6c63430008130033",
}

// POAPABI is the input ABI used to generate the binding from.
// Deprecated: Use POAPMetaData.ABI instead.
var POAPABI = POAPMetaData.ABI

// POAPBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use POAPMetaData.Bin instead.
var POAPBin = POAPMetaData.Bin

// DeployPOAP deploys a new Ethereum contract, binding an instance of POAP to it.
func DeployPOAP(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *POAP, error) {
	parsed, err := POAPMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(POAPBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &POAP{POAPCaller: POAPCaller{contract: contract}, POAPTransactor: POAPTransactor{contract: contract}, POAPFilterer: POAPFilterer{contract: contract}}, nil
}

// POAP is an auto generated Go binding around an Ethereum contract.
type POAP struct {
	POAPCaller     // Read-only binding to the contract
	POAPTransactor // Write-only binding to the contract
	POAPFilterer   // Log filterer for contract events
}

// POAPCaller is an auto generated read-only Go binding around an Ethereum contract.
type POAPCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// POAPTransactor is an auto generated write-only Go binding around an Ethereum contract.
type POAPTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// POAPFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type POAPFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// POAPSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type POAPSession struct {
	Contract     *POAP             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// POAPCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type POAPCallerSession struct {
	Contract *POAPCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// POAPTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type POAPTransactorSession struct {
	Contract     *POAPTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// POAPRaw is an auto generated low-level Go binding around an Ethereum contract.
type POAPRaw struct {
	Contract *POAP // Generic contract binding to access the raw methods on
}

// POAPCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type POAPCallerRaw struct {
	Contract *POAPCaller // Generic read-only contract binding to access the raw methods on
}

// POAPTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type POAPTransactorRaw struct {
	Contract *POAPTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPOAP creates a new instance of POAP, bound to a specific deployed contract.
func NewPOAP(address common.Address, backend bind.ContractBackend) (*POAP, error) {
	contract, err := bindPOAP(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &POAP{POAPCaller: POAPCaller{contract: contract}, POAPTransactor: POAPTransactor{contract: contract}, POAPFilterer: POAPFilterer{contract: contract}}, nil
}

// NewPOAPCaller creates a new read-only instance of POAP, bound to a specific deployed contract.
func NewPOAPCaller(address common.Address, caller bind.ContractCaller) (*POAPCaller, error) {
	contract, err := bindPOAP(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &POAPCaller{contract: contract}, nil
}

// NewPOAPTransactor creates a new write-only instance of POAP, bound to a specific deployed contract.
func NewPOAPTransactor(address common.Address, transactor bind.ContractTransactor) (*POAPTransactor, error) {
	contract, err := bindPOAP(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &POAPTransactor{contract: contract}, nil
}

// NewPOAPFilterer creates a new log filterer instance of POAP, bound to a specific deployed contract.
func NewPOAPFilterer(address common.Address, filterer bind.ContractFilterer) (*POAPFilterer, error) {
	contract, err := bindPOAP(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &POAPFilterer{contract: contract}, nil
}

// bindPOAP binds a generic wrapper to an already deployed contract.
func bindPOAP(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := POAPMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_POAP *POAPRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _POAP.Contract.POAPCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_POAP *POAPRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _POAP.Contract.POAPTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_POAP *POAPRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _POAP.Contract.POAPTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_POAP *POAPCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _POAP.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_POAP *POAPTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _POAP.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_POAP *POAPTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _POAP.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_POAP *POAPCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _POAP.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_POAP *POAPSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _POAP.Contract.BalanceOf(&_POAP.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_POAP *POAPCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _POAP.Contract.BalanceOf(&_POAP.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_POAP *POAPCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _POAP.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_POAP *POAPSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _POAP.Contract.BalanceOfBatch(&_POAP.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_POAP *POAPCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _POAP.Contract.BalanceOfBatch(&_POAP.CallOpts, accounts, ids)
}

// GetOperators is a free data retrieval call binding the contract method 0x27a099d8.
//
// Solidity: function getOperators() view returns(address[])
func (_POAP *POAPCaller) GetOperators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _POAP.contract.Call(opts, &out, "getOperators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOperators is a free data retrieval call binding the contract method 0x27a099d8.
//
// Solidity: function getOperators() view returns(address[])
func (_POAP *POAPSession) GetOperators() ([]common.Address, error) {
	return _POAP.Contract.GetOperators(&_POAP.CallOpts)
}

// GetOperators is a free data retrieval call binding the contract method 0x27a099d8.
//
// Solidity: function getOperators() view returns(address[])
func (_POAP *POAPCallerSession) GetOperators() ([]common.Address, error) {
	return _POAP.Contract.GetOperators(&_POAP.CallOpts)
}

// Index is a free data retrieval call binding the contract method 0xf5db08d9.
//
// Solidity: function index(string name) view returns(uint256)
func (_POAP *POAPCaller) Index(opts *bind.CallOpts, name string) (*big.Int, error) {
	var out []interface{}
	err := _POAP.contract.Call(opts, &out, "index", name)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Index is a free data retrieval call binding the contract method 0xf5db08d9.
//
// Solidity: function index(string name) view returns(uint256)
func (_POAP *POAPSession) Index(name string) (*big.Int, error) {
	return _POAP.Contract.Index(&_POAP.CallOpts, name)
}

// Index is a free data retrieval call binding the contract method 0xf5db08d9.
//
// Solidity: function index(string name) view returns(uint256)
func (_POAP *POAPCallerSession) Index(name string) (*big.Int, error) {
	return _POAP.Contract.Index(&_POAP.CallOpts, name)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_POAP *POAPCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _POAP.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_POAP *POAPSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _POAP.Contract.IsApprovedForAll(&_POAP.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_POAP *POAPCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _POAP.Contract.IsApprovedForAll(&_POAP.CallOpts, account, operator)
}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address _operator) view returns(bool)
func (_POAP *POAPCaller) IsOperator(opts *bind.CallOpts, _operator common.Address) (bool, error) {
	var out []interface{}
	err := _POAP.contract.Call(opts, &out, "isOperator", _operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address _operator) view returns(bool)
func (_POAP *POAPSession) IsOperator(_operator common.Address) (bool, error) {
	return _POAP.Contract.IsOperator(&_POAP.CallOpts, _operator)
}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address _operator) view returns(bool)
func (_POAP *POAPCallerSession) IsOperator(_operator common.Address) (bool, error) {
	return _POAP.Contract.IsOperator(&_POAP.CallOpts, _operator)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_POAP *POAPCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _POAP.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_POAP *POAPSession) Owner() (common.Address, error) {
	return _POAP.Contract.Owner(&_POAP.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_POAP *POAPCallerSession) Owner() (common.Address, error) {
	return _POAP.Contract.Owner(&_POAP.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_POAP *POAPCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _POAP.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_POAP *POAPSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _POAP.Contract.SupportsInterface(&_POAP.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_POAP *POAPCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _POAP.Contract.SupportsInterface(&_POAP.CallOpts, interfaceId)
}

// TotalPOAPs is a free data retrieval call binding the contract method 0x7f8e8901.
//
// Solidity: function totalPOAPs() view returns(uint256)
func (_POAP *POAPCaller) TotalPOAPs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _POAP.contract.Call(opts, &out, "totalPOAPs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalPOAPs is a free data retrieval call binding the contract method 0x7f8e8901.
//
// Solidity: function totalPOAPs() view returns(uint256)
func (_POAP *POAPSession) TotalPOAPs() (*big.Int, error) {
	return _POAP.Contract.TotalPOAPs(&_POAP.CallOpts)
}

// TotalPOAPs is a free data retrieval call binding the contract method 0x7f8e8901.
//
// Solidity: function totalPOAPs() view returns(uint256)
func (_POAP *POAPCallerSession) TotalPOAPs() (*big.Int, error) {
	return _POAP.Contract.TotalPOAPs(&_POAP.CallOpts)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_POAP *POAPCaller) Uri(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _POAP.contract.Call(opts, &out, "uri", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_POAP *POAPSession) Uri(tokenId *big.Int) (string, error) {
	return _POAP.Contract.Uri(&_POAP.CallOpts, tokenId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_POAP *POAPCallerSession) Uri(tokenId *big.Int) (string, error) {
	return _POAP.Contract.Uri(&_POAP.CallOpts, tokenId)
}

// Create is a paid mutator transaction binding the contract method 0x26a3a36a.
//
// Solidity: function _create(string name, string description, string image, string _Identiry) returns()
func (_POAP *POAPTransactor) Create(opts *bind.TransactOpts, name string, description string, image string, _Identiry string) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "_create", name, description, image, _Identiry)
}

// Create is a paid mutator transaction binding the contract method 0x26a3a36a.
//
// Solidity: function _create(string name, string description, string image, string _Identiry) returns()
func (_POAP *POAPSession) Create(name string, description string, image string, _Identiry string) (*types.Transaction, error) {
	return _POAP.Contract.Create(&_POAP.TransactOpts, name, description, image, _Identiry)
}

// Create is a paid mutator transaction binding the contract method 0x26a3a36a.
//
// Solidity: function _create(string name, string description, string image, string _Identiry) returns()
func (_POAP *POAPTransactorSession) Create(name string, description string, image string, _Identiry string) (*types.Transaction, error) {
	return _POAP.Contract.Create(&_POAP.TransactOpts, name, description, image, _Identiry)
}

// AddOperator is a paid mutator transaction binding the contract method 0x9870d7fe.
//
// Solidity: function addOperator(address _operator) returns()
func (_POAP *POAPTransactor) AddOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "addOperator", _operator)
}

// AddOperator is a paid mutator transaction binding the contract method 0x9870d7fe.
//
// Solidity: function addOperator(address _operator) returns()
func (_POAP *POAPSession) AddOperator(_operator common.Address) (*types.Transaction, error) {
	return _POAP.Contract.AddOperator(&_POAP.TransactOpts, _operator)
}

// AddOperator is a paid mutator transaction binding the contract method 0x9870d7fe.
//
// Solidity: function addOperator(address _operator) returns()
func (_POAP *POAPTransactorSession) AddOperator(_operator common.Address) (*types.Transaction, error) {
	return _POAP.Contract.AddOperator(&_POAP.TransactOpts, _operator)
}

// BatchMint is a paid mutator transaction binding the contract method 0x83b74baa.
//
// Solidity: function batchMint(address[] tos, uint256 tokenId) returns()
func (_POAP *POAPTransactor) BatchMint(opts *bind.TransactOpts, tos []common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "batchMint", tos, tokenId)
}

// BatchMint is a paid mutator transaction binding the contract method 0x83b74baa.
//
// Solidity: function batchMint(address[] tos, uint256 tokenId) returns()
func (_POAP *POAPSession) BatchMint(tos []common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _POAP.Contract.BatchMint(&_POAP.TransactOpts, tos, tokenId)
}

// BatchMint is a paid mutator transaction binding the contract method 0x83b74baa.
//
// Solidity: function batchMint(address[] tos, uint256 tokenId) returns()
func (_POAP *POAPTransactorSession) BatchMint(tos []common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _POAP.Contract.BatchMint(&_POAP.TransactOpts, tos, tokenId)
}

// BatchMint0 is a paid mutator transaction binding the contract method 0xa4fbc660.
//
// Solidity: function batchMint(address[] tos, string name) returns()
func (_POAP *POAPTransactor) BatchMint0(opts *bind.TransactOpts, tos []common.Address, name string) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "batchMint0", tos, name)
}

// BatchMint0 is a paid mutator transaction binding the contract method 0xa4fbc660.
//
// Solidity: function batchMint(address[] tos, string name) returns()
func (_POAP *POAPSession) BatchMint0(tos []common.Address, name string) (*types.Transaction, error) {
	return _POAP.Contract.BatchMint0(&_POAP.TransactOpts, tos, name)
}

// BatchMint0 is a paid mutator transaction binding the contract method 0xa4fbc660.
//
// Solidity: function batchMint(address[] tos, string name) returns()
func (_POAP *POAPTransactorSession) BatchMint0(tos []common.Address, name string) (*types.Transaction, error) {
	return _POAP.Contract.BatchMint0(&_POAP.TransactOpts, tos, name)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 tokenId) returns()
func (_POAP *POAPTransactor) Mint(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "mint", to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 tokenId) returns()
func (_POAP *POAPSession) Mint(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _POAP.Contract.Mint(&_POAP.TransactOpts, to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 tokenId) returns()
func (_POAP *POAPTransactorSession) Mint(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _POAP.Contract.Mint(&_POAP.TransactOpts, to, tokenId)
}

// Mint0 is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string name) returns()
func (_POAP *POAPTransactor) Mint0(opts *bind.TransactOpts, to common.Address, name string) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "mint0", to, name)
}

// Mint0 is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string name) returns()
func (_POAP *POAPSession) Mint0(to common.Address, name string) (*types.Transaction, error) {
	return _POAP.Contract.Mint0(&_POAP.TransactOpts, to, name)
}

// Mint0 is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string name) returns()
func (_POAP *POAPTransactorSession) Mint0(to common.Address, name string) (*types.Transaction, error) {
	return _POAP.Contract.Mint0(&_POAP.TransactOpts, to, name)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address _operator) returns()
func (_POAP *POAPTransactor) RemoveOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "removeOperator", _operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address _operator) returns()
func (_POAP *POAPSession) RemoveOperator(_operator common.Address) (*types.Transaction, error) {
	return _POAP.Contract.RemoveOperator(&_POAP.TransactOpts, _operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address _operator) returns()
func (_POAP *POAPTransactorSession) RemoveOperator(_operator common.Address) (*types.Transaction, error) {
	return _POAP.Contract.RemoveOperator(&_POAP.TransactOpts, _operator)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_POAP *POAPTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_POAP *POAPSession) RenounceOwnership() (*types.Transaction, error) {
	return _POAP.Contract.RenounceOwnership(&_POAP.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_POAP *POAPTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _POAP.Contract.RenounceOwnership(&_POAP.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_POAP *POAPTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_POAP *POAPSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _POAP.Contract.SafeBatchTransferFrom(&_POAP.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_POAP *POAPTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _POAP.Contract.SafeBatchTransferFrom(&_POAP.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_POAP *POAPTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_POAP *POAPSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _POAP.Contract.SafeTransferFrom(&_POAP.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_POAP *POAPTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _POAP.Contract.SafeTransferFrom(&_POAP.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_POAP *POAPTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_POAP *POAPSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _POAP.Contract.SetApprovalForAll(&_POAP.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_POAP *POAPTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _POAP.Contract.SetApprovalForAll(&_POAP.TransactOpts, operator, approved)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_POAP *POAPTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _POAP.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_POAP *POAPSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _POAP.Contract.TransferOwnership(&_POAP.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_POAP *POAPTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _POAP.Contract.TransferOwnership(&_POAP.TransactOpts, newOwner)
}

// POAPApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the POAP contract.
type POAPApprovalForAllIterator struct {
	Event *POAPApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *POAPApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(POAPApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(POAPApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *POAPApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *POAPApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// POAPApprovalForAll represents a ApprovalForAll event raised by the POAP contract.
type POAPApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_POAP *POAPFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*POAPApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _POAP.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &POAPApprovalForAllIterator{contract: _POAP.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_POAP *POAPFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *POAPApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _POAP.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(POAPApprovalForAll)
				if err := _POAP.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_POAP *POAPFilterer) ParseApprovalForAll(log types.Log) (*POAPApprovalForAll, error) {
	event := new(POAPApprovalForAll)
	if err := _POAP.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// POAPOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the POAP contract.
type POAPOwnershipTransferredIterator struct {
	Event *POAPOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *POAPOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(POAPOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(POAPOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *POAPOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *POAPOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// POAPOwnershipTransferred represents a OwnershipTransferred event raised by the POAP contract.
type POAPOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_POAP *POAPFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*POAPOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _POAP.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &POAPOwnershipTransferredIterator{contract: _POAP.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_POAP *POAPFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *POAPOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _POAP.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(POAPOwnershipTransferred)
				if err := _POAP.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_POAP *POAPFilterer) ParseOwnershipTransferred(log types.Log) (*POAPOwnershipTransferred, error) {
	event := new(POAPOwnershipTransferred)
	if err := _POAP.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// POAPPOAPCreatedIterator is returned from FilterPOAPCreated and is used to iterate over the raw logs and unpacked data for POAPCreated events raised by the POAP contract.
type POAPPOAPCreatedIterator struct {
	Event *POAPPOAPCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *POAPPOAPCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(POAPPOAPCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(POAPPOAPCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *POAPPOAPCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *POAPPOAPCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// POAPPOAPCreated represents a POAPCreated event raised by the POAP contract.
type POAPPOAPCreated struct {
	Name string
	Id   *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterPOAPCreated is a free log retrieval operation binding the contract event 0xd289120f29a4955153cbfd6b70b90301c2051931e4e9db7110b3ce6cdd7aed6a.
//
// Solidity: event POAPCreated(string name, uint256 id)
func (_POAP *POAPFilterer) FilterPOAPCreated(opts *bind.FilterOpts) (*POAPPOAPCreatedIterator, error) {

	logs, sub, err := _POAP.contract.FilterLogs(opts, "POAPCreated")
	if err != nil {
		return nil, err
	}
	return &POAPPOAPCreatedIterator{contract: _POAP.contract, event: "POAPCreated", logs: logs, sub: sub}, nil
}

// WatchPOAPCreated is a free log subscription operation binding the contract event 0xd289120f29a4955153cbfd6b70b90301c2051931e4e9db7110b3ce6cdd7aed6a.
//
// Solidity: event POAPCreated(string name, uint256 id)
func (_POAP *POAPFilterer) WatchPOAPCreated(opts *bind.WatchOpts, sink chan<- *POAPPOAPCreated) (event.Subscription, error) {

	logs, sub, err := _POAP.contract.WatchLogs(opts, "POAPCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(POAPPOAPCreated)
				if err := _POAP.contract.UnpackLog(event, "POAPCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePOAPCreated is a log parse operation binding the contract event 0xd289120f29a4955153cbfd6b70b90301c2051931e4e9db7110b3ce6cdd7aed6a.
//
// Solidity: event POAPCreated(string name, uint256 id)
func (_POAP *POAPFilterer) ParsePOAPCreated(log types.Log) (*POAPPOAPCreated, error) {
	event := new(POAPPOAPCreated)
	if err := _POAP.contract.UnpackLog(event, "POAPCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// POAPTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the POAP contract.
type POAPTransferBatchIterator struct {
	Event *POAPTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *POAPTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(POAPTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(POAPTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *POAPTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *POAPTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// POAPTransferBatch represents a TransferBatch event raised by the POAP contract.
type POAPTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_POAP *POAPFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*POAPTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _POAP.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &POAPTransferBatchIterator{contract: _POAP.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_POAP *POAPFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *POAPTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _POAP.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(POAPTransferBatch)
				if err := _POAP.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_POAP *POAPFilterer) ParseTransferBatch(log types.Log) (*POAPTransferBatch, error) {
	event := new(POAPTransferBatch)
	if err := _POAP.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// POAPTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the POAP contract.
type POAPTransferSingleIterator struct {
	Event *POAPTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *POAPTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(POAPTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(POAPTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *POAPTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *POAPTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// POAPTransferSingle represents a TransferSingle event raised by the POAP contract.
type POAPTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_POAP *POAPFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*POAPTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _POAP.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &POAPTransferSingleIterator{contract: _POAP.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_POAP *POAPFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *POAPTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _POAP.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(POAPTransferSingle)
				if err := _POAP.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_POAP *POAPFilterer) ParseTransferSingle(log types.Log) (*POAPTransferSingle, error) {
	event := new(POAPTransferSingle)
	if err := _POAP.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// POAPURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the POAP contract.
type POAPURIIterator struct {
	Event *POAPURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *POAPURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(POAPURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(POAPURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *POAPURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *POAPURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// POAPURI represents a URI event raised by the POAP contract.
type POAPURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_POAP *POAPFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*POAPURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _POAP.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &POAPURIIterator{contract: _POAP.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_POAP *POAPFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *POAPURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _POAP.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(POAPURI)
				if err := _POAP.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_POAP *POAPFilterer) ParseURI(log types.Log) (*POAPURI, error) {
	event := new(POAPURI)
	if err := _POAP.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
