// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ETicketMetaData contains all meta data concerning the ETicket contract.
var ETicketMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_info\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_rights\",\"type\":\"string[]\"},{\"internalType\":\"bool[]\",\"name\":\"_types\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"_validTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_rights\",\"type\":\"string[]\"}],\"name\":\"addRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_right\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_right\",\"type\":\"uint16\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162002d7438038062002d748339810160408190526200003491620005d7565b836000815181106200004a576200004a620006d9565b60200260200101516040518060400160405280600781526020016619551a58dad95d60ca1b81525081600090816200008391906200077e565b5060016200009282826200077e565b505050620000af620000a96200024260201b60201c565b62000253565b83600181518110620000c557620000c5620006d9565b6020026020010151600c9081620000dd91906200077e565b5083600281518110620000f457620000f4620006d9565b6020026020010151600d90816200010c91906200077e565b5083600381518110620001235762000123620006d9565b6020026020010151600e90816200013b91906200077e565b50600854601011620001945760405162461bcd60e51b815260206004820152601a60248201527f4d617820726967687473206f766572204d41585f72696768747300000000000060448201526064015b60405180910390fd5b8151835114620001da5760405162461bcd60e51b815260206004820152601060248201526f098cadccee8d040dcdee840dac2e8c6d60831b60448201526064016200018b565b8251620001ef906008906020860190620002d8565b5081516200020590600990602085019062000335565b50836004815181106200021c576200021c620006d9565b6020026020010151600f90816200023491906200077e565b50601055506200084a915050565b60006200024e620002a5565b905090565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600073c77fa7345679ccdbdb6204f0ca6a024be4abd002193301620002d1575060131936013560601c90565b336200024e565b82805482825590600052602060002090810192821562000323579160200282015b828111156200032357825182906200031290826200077e565b5091602001919060010190620002f9565b5062000331929150620003dd565b5090565b82805482825590600052602060002090601f01602090048101928215620003cf5791602002820160005b838211156200039e57835183826101000a81548160ff02191690831515021790555092602001926001016020816000010492830192600103026200035f565b8015620003cd5782816101000a81549060ff02191690556001016020816000010492830192600103026200039e565b505b5062000331929150620003fe565b8082111562000331576000620003f4828262000415565b50600101620003dd565b5b80821115620003315760008155600101620003ff565b5080546200042390620006ef565b6000825580601f1062000434575050565b601f016020900490600052602060002090810190620004549190620003fe565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000498576200049862000457565b604052919050565b60006001600160401b03821115620004bc57620004bc62000457565b5060051b60200190565b6000601f8381840112620004d957600080fd5b82516020620004f2620004ec83620004a0565b6200046d565b82815260059290921b850181019181810190878411156200051257600080fd5b8287015b84811015620005cb5780516001600160401b0380821115620005385760008081fd5b818a0191508a603f8301126200054e5760008081fd5b858201518181111562000565576200056562000457565b62000578818a01601f191688016200046d565b915080825260408c81838601011115620005925760008081fd5b60005b82811015620005b2578481018201518482018a0152880162000595565b5050600090820187015284525091830191830162000516565b50979650505050505050565b60008060008060808587031215620005ee57600080fd5b84516001600160401b03808211156200060657600080fd5b6200061488838901620004c6565b95506020915081870151818111156200062c57600080fd5b6200063a89828a01620004c6565b9550506040870151818111156200065057600080fd5b87019050601f810188136200066457600080fd5b805162000675620004ec82620004a0565b81815260059190911b8201830190838101908a8311156200069557600080fd5b928401925b82841015620006c55783518015158114620006b55760008081fd5b825292840192908401906200069a565b60609990990151979a969950505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200070457607f821691505b6020821081036200072557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200077957600081815260208120601f850160051c81016020861015620007545750805b601f850160051c820191505b81811015620007755782815560010162000760565b5050505b505050565b81516001600160401b038111156200079a576200079a62000457565b620007b281620007ab8454620006ef565b846200072b565b602080601f831160018114620007ea5760008415620007d15750858301515b600019600386901b1c1916600185901b17855562000775565b600085815260208120601f198616915b828110156200081b57888601518255948401946001909101908401620007fa565b50858210156200083a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61251a806200085a6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063aec0cf301161007c578063aec0cf30146102da578063b88d4fde146102ed578063beabacc814610300578063c87b56dd14610313578063e985e9c514610326578063f2fde38b1461036257600080fd5b8063715018a6146102805780638da5cb5b1461028857806395d89b41146102995780639870d7fe146102a1578063a22cb465146102b4578063ac8a584a146102c757600080fd5b8063415dd87711610115578063415dd8771461020057806342842e0e146102135780636352211e14610226578063687ffe07146102395780636d70f7ae1461024c57806370a082311461025f57600080fd5b806301ffc9a71461015d57806306fdde0314610185578063081812fc1461019a578063095ea7b3146101c557806323b872dd146101da57806340c10f19146101ed575b600080fd5b61017061016b3660046119bd565b610375565b60405190151581526020015b60405180910390f35b61018d6103c7565b60405161017c9190611a31565b6101ad6101a8366004611a44565b610459565b6040516001600160a01b03909116815260200161017c565b6101d86101d3366004611a79565b610480565b005b6101d86101e8366004611aa3565b6105ac565b6101d86101fb366004611a79565b6105e4565b6101d861020e366004611b8c565b610645565b6101d8610221366004611aa3565b61073d565b6101ad610234366004611a44565b610758565b6101d8610247366004611c76565b6107b8565b61017061025a366004611cb2565b61080f565b61027261026d366004611cb2565b61081c565b60405190815260200161017c565b6101d86108a2565b6006546001600160a01b03166101ad565b61018d6108b6565b6101d86102af366004611cb2565b6108c5565b6101d86102c2366004611ccd565b6108db565b6101d86102d5366004611cb2565b6108ed565b6101d86102e8366004611d09565b610900565b6101d86102fb366004611d35565b610912565b6101d861030e366004611aa3565b610951565b61018d610321366004611a44565b61099d565b610170610334366004611db1565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101d8610370366004611cb2565b610d1c565b60006001600160e01b031982166380ac58cd60e01b14806103a657506001600160e01b03198216635b5e139f60e01b145b806103c157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103d690611ddb565b80601f016020809104026020016040519081016040528092919081815260200182805461040290611ddb565b801561044f5780601f106104245761010080835404028352916020019161044f565b820191906000526020600020905b81548152906001019060200180831161043257829003601f168201915b5050505050905090565b600061046482610d92565b506000908152600460205260409020546001600160a01b031690565b600061048b82610758565b9050806001600160a01b0316836001600160a01b0316036104fd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b806001600160a01b031661050f610df1565b6001600160a01b0316148061052b575061052b81610334610df1565b61059d5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016104f4565b6105a78383610e00565b505050565b6105bd6105b7610df1565b82610e6e565b6105d95760405162461bcd60e51b81526004016104f490611e15565b6105a7838383610eed565b6105f66105ef610df1565b6007611089565b8061061b57506006546001600160a01b0316610610610df1565b6001600160a01b0316145b6106375760405162461bcd60e51b81526004016104f490611e63565b61064182826110f2565b5050565b6106506105ef610df1565b8061067557506006546001600160a01b031661066a610df1565b6001600160a01b0316145b6106915760405162461bcd60e51b81526004016104f490611e63565b80516008546010916106a291611ea0565b106106e15760405162461bcd60e51b815260206004820152600f60248201526e6f766572204d61782072696768747360881b60448201526064016104f4565b60005b815181101561064157600882828151811061070157610701611eb3565b6020908102919091018101518254600181018455600093845291909220019061072a9082611f17565b508061073581611fd7565b9150506106e4565b6105a783838360405180602001604052806000815250610912565b6000818152600260205260408120546001600160a01b0316806103c15760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104f4565b6107c36105ef610df1565b806107e857506006546001600160a01b03166107dd610df1565b6001600160a01b0316145b6108045760405162461bcd60e51b81526004016104f490611e63565b6105a7838383611234565b60006103c1826007611089565b60006001600160a01b0382166108865760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104f4565b506001600160a01b031660009081526003602052604090205490565b6108aa611394565b6108b4600061140d565b565b6060600180546103d690611ddb565b6108cd611394565b6108d881600761145f565b50565b6106416108e6610df1565b83836114ec565b6108f5611394565b6108d88160076115ba565b610641828261090d610df1565b611234565b61092361091d610df1565b83610e6e565b61093f5760405162461bcd60e51b81526004016104f490611e15565b61094b848484846116e9565b50505050565b61095c6105ef610df1565b8061098157506006546001600160a01b0316610976610df1565b6001600160a01b0316145b6105d95760405162461bcd60e51b81526004016104f490611e63565b6000818152600260205260409020546060906001600160a01b03166109f85760405162461bcd60e51b81526020600482015260116024820152703737b732bc34b9ba32b73a103a37b5b2b760791b60448201526064016104f4565b6000610a026103c7565b600c600e600d604051602001610a1b9493929190612063565b60408051601f1981840301815290829052601054634f689bcb60e11b8352600483015291508190600f9073__$73785166eb94af412e1735ba7ee7be91af$__90639ed1379690602401600060405180830381865af4158015610a81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aa99190810190612142565b604051602001610abb939291906121b9565b604051602081830303815290604052905060005b60085461ffff82161015610c8e578160098261ffff1681548110610af557610af5611eb3565b90600052602060002090602091828204019190069054906101000a900460ff16610b3a57604051806040016040528060038152602001625b525d60e81b815250610b57565b604051806040016040528060038152602001625b535d60e81b8152505b60088361ffff1681548110610b6e57610b6e611eb3565b60009182526020808320898452600a8252604080852061ffff89168652909252922054910190610bbf576040518060400160405280600981526020016801cd3955cd4171d32960bf1b815250610c57565b6000878152600a6020908152604080832061ffff8816845290915290819020549051634f689bcb60e11b8152600481019190915273__$73785166eb94af412e1735ba7ee7be91af$__90639ed1379690602401600060405180830381865af4158015610c2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c579190810190612142565b604051602001610c6a9493929190612277565b60405160208183030381529060405291508080610c869061230b565b915050610acf565b50605d60f81b8160018351610ca3919061232c565b81518110610cb357610cb3611eb3565b60200101906001600160f81b031916908160001a90535080604051602001610cdb919061233f565b6040516020818303038152906040529050610cf58161171c565b604051602001610d059190612364565b604051602081830303815290604052915050919050565b610d24611394565b6001600160a01b038116610d895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f4565b6108d88161140d565b6000818152600260205260409020546001600160a01b03166108d85760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104f4565b6000610dfb61186f565b905090565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610e3582610758565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610e7a83610758565b9050806001600160a01b0316846001600160a01b03161480610ec157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610ee55750836001600160a01b0316610eda84610459565b6001600160a01b0316145b949350505050565b826001600160a01b0316610f0082610758565b6001600160a01b031614610f645760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016104f4565b6001600160a01b038216610fc65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104f4565b610fd1600082610e00565b6001600160a01b0383166000908152600360205260408120805460019290610ffa90849061232c565b90915550506001600160a01b0382166000908152600360205260408120805460019290611028908490611ea0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000805b82548110156110e857836001600160a01b03168382815481106110b2576110b2611eb3565b6000918252602090912001546001600160a01b0316036110d65760019150506103c1565b806110e081611fd7565b91505061108d565b5060009392505050565b6001600160a01b0382166111485760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104f4565b6000818152600260205260409020546001600160a01b0316156111ad5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104f4565b6001600160a01b03821660009081526003602052604081208054600192906111d6908490611ea0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b806001600160a01b031661124784610758565b6001600160a01b03161461128a5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b60448201526064016104f4565b60085461ffff8316106112d15760405162461bcd60e51b815260206004820152600f60248201526e726967687473206f766572666c6f7760881b60448201526064016104f4565b60105442106113135760405162461bcd60e51b815260206004820152600e60248201526d1d1a58dad95d08195e1c1a5c995960921b60448201526064016104f4565b6000838152600a6020908152604080832061ffff86168452909152902054156113705760405162461bcd60e51b815260206004820152600f60248201526e436865636b656420416c726561647960881b60448201526064016104f4565b506000918252600a6020908152604080842061ffff90931684529190529020429055565b61139c610df1565b6001600160a01b03166113b76006546001600160a01b031690565b6001600160a01b0316146108b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f4565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b81548110156114b857826001600160a01b031682828154811061148757611487611eb3565b6000918252602090912001546001600160a01b0316036114a657505050565b806114b081611fd7565b915050611462565b508054600181018255600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055565b816001600160a01b0316836001600160a01b03160361154d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104f4565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000805b82548110156116ab57836001600160a01b03168382815481106115e3576115e3611eb3565b6000918252602090912001546001600160a01b03160361160257600191505b81801561161957508254611617826001611ea0565b105b15611699578261162a826001611ea0565b8154811061163a5761163a611eb3565b9060005260206000200160009054906101000a90046001600160a01b031683828154811061166a5761166a611eb3565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806116a381611fd7565b9150506115be565b5080156105a757818054806116c2576116c26123a9565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6116f4848484610eed565b6117008484848461189f565b61094b5760405162461bcd60e51b81526004016104f4906123bf565b6060815160000361173b57505060408051602081019091526000815290565b60006040518060600160405280604081526020016124a5604091399050600060038451600261176a9190611ea0565b6117749190612411565b61177f906004612433565b67ffffffffffffffff81111561179757611797611adf565b6040519080825280601f01601f1916602001820160405280156117c1576020820181803683370190505b509050600182016020820185865187015b8082101561182d576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506117d2565b5050600386510660018114611849576002811461185c57611864565b603d6001830353603d6002830353611864565b603d60018303535b509195945050505050565b600073c77fa7345679ccdbdb6204f0ca6a024be4abd00219330161189a575060131936013560601c90565b503390565b60006001600160a01b0384163b1561199c57836001600160a01b031663150b7a026118c8610df1565b8786866040518563ffffffff1660e01b81526004016118ea949392919061244a565b6020604051808303816000875af1925050508015611925575060408051601f3d908101601f1916820190925261192291810190612487565b60015b611982573d808015611953576040519150601f19603f3d011682016040523d82523d6000602084013e611958565b606091505b50805160000361197a5760405162461bcd60e51b81526004016104f4906123bf565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ee5565b506001949350505050565b6001600160e01b0319811681146108d857600080fd5b6000602082840312156119cf57600080fd5b81356119da816119a7565b9392505050565b60005b838110156119fc5781810151838201526020016119e4565b50506000910152565b60008151808452611a1d8160208601602086016119e1565b601f01601f19169290920160200192915050565b6020815260006119da6020830184611a05565b600060208284031215611a5657600080fd5b5035919050565b80356001600160a01b0381168114611a7457600080fd5b919050565b60008060408385031215611a8c57600080fd5b611a9583611a5d565b946020939093013593505050565b600080600060608486031215611ab857600080fd5b611ac184611a5d565b9250611acf60208501611a5d565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611b1e57611b1e611adf565b604052919050565b600067ffffffffffffffff821115611b4057611b40611adf565b50601f01601f191660200190565b6000611b61611b5c84611b26565b611af5565b9050828152838383011115611b7557600080fd5b828260208301376000602084830101529392505050565b60006020808385031215611b9f57600080fd5b823567ffffffffffffffff80821115611bb757600080fd5b818501915085601f830112611bcb57600080fd5b813581811115611bdd57611bdd611adf565b8060051b611bec858201611af5565b9182528381018501918581019089841115611c0657600080fd5b86860192505b83831015611c5757823585811115611c245760008081fd5b8601603f81018b13611c365760008081fd5b611c478b8983013560408401611b4e565b8352509186019190860190611c0c565b9998505050505050505050565b803561ffff81168114611a7457600080fd5b600080600060608486031215611c8b57600080fd5b83359250611c9b60208501611c64565b9150611ca960408501611a5d565b90509250925092565b600060208284031215611cc457600080fd5b6119da82611a5d565b60008060408385031215611ce057600080fd5b611ce983611a5d565b915060208301358015158114611cfe57600080fd5b809150509250929050565b60008060408385031215611d1c57600080fd5b82359150611d2c60208401611c64565b90509250929050565b60008060008060808587031215611d4b57600080fd5b611d5485611a5d565b9350611d6260208601611a5d565b925060408501359150606085013567ffffffffffffffff811115611d8557600080fd5b8501601f81018713611d9657600080fd5b611da587823560208401611b4e565b91505092959194509250565b60008060408385031215611dc457600080fd5b611dcd83611a5d565b9150611d2c60208401611a5d565b600181811c90821680611def57607f821691505b602082108103611e0f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252600d908201526c27b7363c9027b832b930ba37b960991b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156103c1576103c1611e8a565b634e487b7160e01b600052603260045260246000fd5b601f8211156105a757600081815260208120601f850160051c81016020861015611ef05750805b601f850160051c820191505b81811015611f0f57828155600101611efc565b505050505050565b815167ffffffffffffffff811115611f3157611f31611adf565b611f4581611f3f8454611ddb565b84611ec9565b602080601f831160018114611f7a5760008415611f625750858301515b600019600386901b1c1916600185901b178555611f0f565b600085815260208120601f198616915b82811015611fa957888601518255948401946001909101908401611f8a565b5085821015611fc75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018201611fe957611fe9611e8a565b5060010190565b60008154611ffd81611ddb565b60018281168015612015576001811461202a57612059565b60ff1984168752821515830287019450612059565b8560005260208060002060005b858110156120505781548a820152908401908201612037565b50505082870194505b5050505092915050565b693d913730b6b2911d101160b11b8152845160009061208981600a850160208a016119e1565b72111610113232b9b1b934b83a34b7b7111d101160691b600a918401918201526120b6601d820187611ff0565b6e111610113232ba30b4b639911d101160891b815290506120da600f820186611ff0565b6c1116101134b6b0b3b2911d101160991b815290506120fc600d820185611ff0565b7f222c202264657369676e6572223a202269736f746f702e746f70222c2022617481526b7472696275746573223a205b60a01b6020820152602c01979650505050505050565b60006020828403121561215457600080fd5b815167ffffffffffffffff81111561216b57600080fd5b8201601f8101841361217c57600080fd5b805161218a611b5c82611b26565b81815285602083850101111561219f57600080fd5b6121b08260208301602086016119e1565b95945050505050565b600084516121cb8184602089016119e1565b7f7b2274726169745f74797065223a2022e58f91e8a18ce696b9444944222c22769083019081526730b63ab2911d101160c11b60208201526122106028820186611ff0565b90507f227d2c207b2274726169745f74797065223a2022e69c89e69588e69c9f222c228152683b30b63ab2911d101160b91b6020820152835161225a8160298401602088016119e1565b62089f4b60ea1b60299290910191820152602c0195945050505050565b60008551612289818460208a016119e1565b6f3d913a3930b4ba2fba3cb832911d101160811b90830190815285516122b6816010840160208a016119e1565b6122c560108284010187611ff0565b9150506b1116113b30b63ab2911d101160a11b815283516122ed81600c8401602088016119e1565b62089f4b60ea1b600c9290910191820152600f019695505050505050565b600061ffff80831681810361232257612322611e8a565b6001019392505050565b818103818111156103c1576103c1611e8a565b600082516123518184602087016119e1565b607d60f81b920191825250600101919050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161239c81601d8501602087016119e1565b91909101601d0192915050565b634e487b7160e01b600052603160045260246000fd5b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008261242e57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176103c1576103c1611e8a565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061247d90830184611a05565b9695505050505050565b60006020828403121561249957600080fd5b81516119da816119a756fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212209013abe18317202426759800e921ab2dfbc86252808499b30a5c54a6ab92666864736f6c63430008130033",
}

// ETicketABI is the input ABI used to generate the binding from.
// Deprecated: Use ETicketMetaData.ABI instead.
var ETicketABI = ETicketMetaData.ABI

// ETicketBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETicketMetaData.Bin instead.
var ETicketBin = ETicketMetaData.Bin

// DeployETicket deploys a new Ethereum contract, binding an instance of ETicket to it.
func DeployETicket(auth *bind.TransactOpts, backend bind.ContractBackend, _info []string, _rights []string, _types []bool, _validTime *big.Int) (common.Address, *types.Transaction, *ETicket, error) {
	parsed, err := ETicketMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETicketBin), backend, _info, _rights, _types, _validTime)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETicket{ETicketCaller: ETicketCaller{contract: contract}, ETicketTransactor: ETicketTransactor{contract: contract}, ETicketFilterer: ETicketFilterer{contract: contract}}, nil
}

// ETicket is an auto generated Go binding around an Ethereum contract.
type ETicket struct {
	ETicketCaller     // Read-only binding to the contract
	ETicketTransactor // Write-only binding to the contract
	ETicketFilterer   // Log filterer for contract events
}

// ETicketCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETicketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETicketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETicketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETicketSession struct {
	Contract     *ETicket          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETicketCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETicketCallerSession struct {
	Contract *ETicketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ETicketTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETicketTransactorSession struct {
	Contract     *ETicketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ETicketRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETicketRaw struct {
	Contract *ETicket // Generic contract binding to access the raw methods on
}

// ETicketCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETicketCallerRaw struct {
	Contract *ETicketCaller // Generic read-only contract binding to access the raw methods on
}

// ETicketTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETicketTransactorRaw struct {
	Contract *ETicketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETicket creates a new instance of ETicket, bound to a specific deployed contract.
func NewETicket(address common.Address, backend bind.ContractBackend) (*ETicket, error) {
	contract, err := bindETicket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETicket{ETicketCaller: ETicketCaller{contract: contract}, ETicketTransactor: ETicketTransactor{contract: contract}, ETicketFilterer: ETicketFilterer{contract: contract}}, nil
}

// NewETicketCaller creates a new read-only instance of ETicket, bound to a specific deployed contract.
func NewETicketCaller(address common.Address, caller bind.ContractCaller) (*ETicketCaller, error) {
	contract, err := bindETicket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETicketCaller{contract: contract}, nil
}

// NewETicketTransactor creates a new write-only instance of ETicket, bound to a specific deployed contract.
func NewETicketTransactor(address common.Address, transactor bind.ContractTransactor) (*ETicketTransactor, error) {
	contract, err := bindETicket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETicketTransactor{contract: contract}, nil
}

// NewETicketFilterer creates a new log filterer instance of ETicket, bound to a specific deployed contract.
func NewETicketFilterer(address common.Address, filterer bind.ContractFilterer) (*ETicketFilterer, error) {
	contract, err := bindETicket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETicketFilterer{contract: contract}, nil
}

// bindETicket binds a generic wrapper to an already deployed contract.
func bindETicket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ETicketMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETicket *ETicketRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETicket.Contract.ETicketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETicket *ETicketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.Contract.ETicketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETicket *ETicketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETicket.Contract.ETicketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETicket *ETicketCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETicket.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETicket *ETicketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETicket *ETicketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETicket.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ETicket.Contract.BalanceOf(&_ETicket.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ETicket.Contract.BalanceOf(&_ETicket.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.GetApproved(&_ETicket.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.GetApproved(&_ETicket.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ETicket.Contract.IsApprovedForAll(&_ETicket.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ETicket.Contract.IsApprovedForAll(&_ETicket.CallOpts, owner, operator)
}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address _operator) view returns(bool)
func (_ETicket *ETicketCaller) IsOperator(opts *bind.CallOpts, _operator common.Address) (bool, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "isOperator", _operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address _operator) view returns(bool)
func (_ETicket *ETicketSession) IsOperator(_operator common.Address) (bool, error) {
	return _ETicket.Contract.IsOperator(&_ETicket.CallOpts, _operator)
}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address _operator) view returns(bool)
func (_ETicket *ETicketCallerSession) IsOperator(_operator common.Address) (bool, error) {
	return _ETicket.Contract.IsOperator(&_ETicket.CallOpts, _operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketSession) Name() (string, error) {
	return _ETicket.Contract.Name(&_ETicket.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketCallerSession) Name() (string, error) {
	return _ETicket.Contract.Name(&_ETicket.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketSession) Owner() (common.Address, error) {
	return _ETicket.Contract.Owner(&_ETicket.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketCallerSession) Owner() (common.Address, error) {
	return _ETicket.Contract.Owner(&_ETicket.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.OwnerOf(&_ETicket.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.OwnerOf(&_ETicket.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ETicket.Contract.SupportsInterface(&_ETicket.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ETicket.Contract.SupportsInterface(&_ETicket.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketSession) Symbol() (string, error) {
	return _ETicket.Contract.Symbol(&_ETicket.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketCallerSession) Symbol() (string, error) {
	return _ETicket.Contract.Symbol(&_ETicket.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ETicket.Contract.TokenURI(&_ETicket.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ETicket.Contract.TokenURI(&_ETicket.CallOpts, tokenId)
}

// AddOperator is a paid mutator transaction binding the contract method 0x9870d7fe.
//
// Solidity: function addOperator(address _operator) returns()
func (_ETicket *ETicketTransactor) AddOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "addOperator", _operator)
}

// AddOperator is a paid mutator transaction binding the contract method 0x9870d7fe.
//
// Solidity: function addOperator(address _operator) returns()
func (_ETicket *ETicketSession) AddOperator(_operator common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.AddOperator(&_ETicket.TransactOpts, _operator)
}

// AddOperator is a paid mutator transaction binding the contract method 0x9870d7fe.
//
// Solidity: function addOperator(address _operator) returns()
func (_ETicket *ETicketTransactorSession) AddOperator(_operator common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.AddOperator(&_ETicket.TransactOpts, _operator)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] _rights) returns()
func (_ETicket *ETicketTransactor) AddRights(opts *bind.TransactOpts, _rights []string) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "addRights", _rights)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] _rights) returns()
func (_ETicket *ETicketSession) AddRights(_rights []string) (*types.Transaction, error) {
	return _ETicket.Contract.AddRights(&_ETicket.TransactOpts, _rights)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] _rights) returns()
func (_ETicket *ETicketTransactorSession) AddRights(_rights []string) (*types.Transaction, error) {
	return _ETicket.Contract.AddRights(&_ETicket.TransactOpts, _rights)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ETicket *ETicketSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Approve(&_ETicket.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Approve(&_ETicket.TransactOpts, to, tokenId)
}

// Check is a paid mutator transaction binding the contract method 0x687ffe07.
//
// Solidity: function check(uint256 tokenId, uint16 _right, address _who) returns()
func (_ETicket *ETicketTransactor) Check(opts *bind.TransactOpts, tokenId *big.Int, _right uint16, _who common.Address) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "check", tokenId, _right, _who)
}

// Check is a paid mutator transaction binding the contract method 0x687ffe07.
//
// Solidity: function check(uint256 tokenId, uint16 _right, address _who) returns()
func (_ETicket *ETicketSession) Check(tokenId *big.Int, _right uint16, _who common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.Check(&_ETicket.TransactOpts, tokenId, _right, _who)
}

// Check is a paid mutator transaction binding the contract method 0x687ffe07.
//
// Solidity: function check(uint256 tokenId, uint16 _right, address _who) returns()
func (_ETicket *ETicketTransactorSession) Check(tokenId *big.Int, _right uint16, _who common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.Check(&_ETicket.TransactOpts, tokenId, _right, _who)
}

// Check0 is a paid mutator transaction binding the contract method 0xaec0cf30.
//
// Solidity: function check(uint256 tokenId, uint16 _right) returns()
func (_ETicket *ETicketTransactor) Check0(opts *bind.TransactOpts, tokenId *big.Int, _right uint16) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "check0", tokenId, _right)
}

// Check0 is a paid mutator transaction binding the contract method 0xaec0cf30.
//
// Solidity: function check(uint256 tokenId, uint16 _right) returns()
func (_ETicket *ETicketSession) Check0(tokenId *big.Int, _right uint16) (*types.Transaction, error) {
	return _ETicket.Contract.Check0(&_ETicket.TransactOpts, tokenId, _right)
}

// Check0 is a paid mutator transaction binding the contract method 0xaec0cf30.
//
// Solidity: function check(uint256 tokenId, uint16 _right) returns()
func (_ETicket *ETicketTransactorSession) Check0(tokenId *big.Int, _right uint16) (*types.Transaction, error) {
	return _ETicket.Contract.Check0(&_ETicket.TransactOpts, tokenId, _right)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactor) Mint(opts *bind.TransactOpts, _to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "mint", _to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 tokenId) returns()
func (_ETicket *ETicketSession) Mint(_to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Mint(&_ETicket.TransactOpts, _to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactorSession) Mint(_to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Mint(&_ETicket.TransactOpts, _to, tokenId)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address _operator) returns()
func (_ETicket *ETicketTransactor) RemoveOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "removeOperator", _operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address _operator) returns()
func (_ETicket *ETicketSession) RemoveOperator(_operator common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.RemoveOperator(&_ETicket.TransactOpts, _operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address _operator) returns()
func (_ETicket *ETicketTransactorSession) RemoveOperator(_operator common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.RemoveOperator(&_ETicket.TransactOpts, _operator)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketSession) RenounceOwnership() (*types.Transaction, error) {
	return _ETicket.Contract.RenounceOwnership(&_ETicket.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ETicket.Contract.RenounceOwnership(&_ETicket.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ETicket *ETicketTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ETicket *ETicketSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom0(&_ETicket.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ETicket *ETicketTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom0(&_ETicket.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.Contract.SetApprovalForAll(&_ETicket.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.Contract.SetApprovalForAll(&_ETicket.TransactOpts, operator, approved)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactor) Transfer(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "transfer", from, to, tokenId)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketSession) Transfer(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Transfer(&_ETicket.TransactOpts, from, to, tokenId)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactorSession) Transfer(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Transfer(&_ETicket.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.TransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.TransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.TransferOwnership(&_ETicket.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.TransferOwnership(&_ETicket.TransactOpts, newOwner)
}

// ETicketApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ETicket contract.
type ETicketApprovalIterator struct {
	Event *ETicketApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketApproval represents a Approval event raised by the ETicket contract.
type ETicketApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ETicketApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ETicketApprovalIterator{contract: _ETicket.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ETicketApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketApproval)
				if err := _ETicket.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) ParseApproval(log types.Log) (*ETicketApproval, error) {
	event := new(ETicketApproval)
	if err := _ETicket.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ETicket contract.
type ETicketApprovalForAllIterator struct {
	Event *ETicketApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketApprovalForAll represents a ApprovalForAll event raised by the ETicket contract.
type ETicketApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ETicketApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ETicketApprovalForAllIterator{contract: _ETicket.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ETicketApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketApprovalForAll)
				if err := _ETicket.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) ParseApprovalForAll(log types.Log) (*ETicketApprovalForAll, error) {
	event := new(ETicketApprovalForAll)
	if err := _ETicket.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ETicket contract.
type ETicketOwnershipTransferredIterator struct {
	Event *ETicketOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketOwnershipTransferred represents a OwnershipTransferred event raised by the ETicket contract.
type ETicketOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ETicketOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ETicketOwnershipTransferredIterator{contract: _ETicket.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ETicketOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketOwnershipTransferred)
				if err := _ETicket.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) ParseOwnershipTransferred(log types.Log) (*ETicketOwnershipTransferred, error) {
	event := new(ETicketOwnershipTransferred)
	if err := _ETicket.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ETicket contract.
type ETicketTransferIterator struct {
	Event *ETicketTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketTransfer represents a Transfer event raised by the ETicket contract.
type ETicketTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ETicketTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ETicketTransferIterator{contract: _ETicket.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ETicketTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketTransfer)
				if err := _ETicket.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) ParseTransfer(log types.Log) (*ETicketTransfer, error) {
	event := new(ETicketTransfer)
	if err := _ETicket.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
