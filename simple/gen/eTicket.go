// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IERC721ATokenOwnership is an auto generated low-level Go binding around an user-defined struct.
type IERC721ATokenOwnership struct {
	Addr           common.Address
	StartTimestamp uint64
	Burned         bool
	ExtraData      *big.Int
}

// ETicketMetaData contains all meta data concerning the ETicket contract.
var ETicketMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"rights_\",\"type\":\"string[]\"}],\"name\":\"addRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_site\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_site\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"structIERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"structIERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"base_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details_\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"rights_\",\"type\":\"string[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600681526020017f49534f544f5000000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f49534f544f50000000000000000000000000000000000000000000000000000081525081600290816200008f91906200042d565b508060039081620000a191906200042d565b50620000b2620000e060201b60201c565b6000819055505050620000da620000ce620000e560201b60201c565b620000ed60201b60201c565b62000514565b600090565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200023557607f821691505b6020821081036200024b576200024a620001ed565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000276565b620002c1868362000276565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200030e620003086200030284620002d9565b620002e3565b620002d9565b9050919050565b6000819050919050565b6200032a83620002ed565b62000342620003398262000315565b84845462000283565b825550505050565b600090565b620003596200034a565b620003668184846200031f565b505050565b5b818110156200038e57620003826000826200034f565b6001810190506200036c565b5050565b601f821115620003dd57620003a78162000251565b620003b28462000266565b81016020851015620003c2578190505b620003da620003d18562000266565b8301826200036b565b50505b505050565b600082821c905092915050565b60006200040260001984600802620003e2565b1980831691505092915050565b60006200041d8383620003ef565b9150826002028217905092915050565b6200043882620001b3565b67ffffffffffffffff811115620004545762000453620001be565b5b6200046082546200021c565b6200046d82828562000392565b600060209050601f831160018114620004a5576000841562000490578287015190505b6200049c85826200040f565b8655506200050c565b601f198416620004b58662000251565b60005b82811015620004df57848901518255600182019150602085019450602081019050620004b8565b86831015620004ff5784890151620004fb601f891682620003ef565b8355505b6001600288020188555050505b505050505050565b61440c80620005246000396000f3fe60806040526004361061019c5760003560e01c8063715018a6116100ec578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd146105b2578063de75b5b6146105ef578063e985e9c514610618578063f2fde38b146106555761019c565b8063a22cb46514610530578063b88d4fde14610559578063c23dc68f146105755761019c565b80638da5cb5b116100c65780638da5cb5b146104745780638fefd8ea1461049f57806395d89b41146104c857806399a2557a146104f35761019c565b8063715018a6146103f75780638462151c1461040e57806388d695b21461044b5761019c565b806323b872dd1161015957806342842e0e1161013357806342842e0e146103245780635bbb2177146103405780636352211e1461037d57806370a08231146103ba5761019c565b806323b872dd146102b657806340c10f19146102d2578063415dd877146102fb5761019c565b806301ffc9a7146101a157806306fdde03146101de578063081812fc14610209578063095ea7b3146102465780630ded480e1461026257806318160ddd1461028b575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190612700565b61067e565b6040516101d59190612748565b60405180910390f35b3480156101ea57600080fd5b506101f3610710565b60405161020091906127f3565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b919061284b565b6107a2565b60405161023d91906128b9565b60405180910390f35b610260600480360381019061025b9190612900565b610821565b005b34801561026e57600080fd5b5061028960048036038101906102849190612940565b610965565b005b34801561029757600080fd5b506102a061097d565b6040516102ad91906129a2565b60405180910390f35b6102d060048036038101906102cb91906129bd565b610994565b005b3480156102de57600080fd5b506102f960048036038101906102f49190612900565b610cb6565b005b34801561030757600080fd5b50610322600480360381019061031d9190612c2b565b610d15565b005b61033e600480360381019061033991906129bd565b610de5565b005b34801561034c57600080fd5b5061036760048036038101906103629190612ccf565b610e05565b6040516103749190612e7f565b60405180910390f35b34801561038957600080fd5b506103a4600480360381019061039f919061284b565b610ec8565b6040516103b191906128b9565b60405180910390f35b3480156103c657600080fd5b506103e160048036038101906103dc9190612ea1565b610eda565b6040516103ee91906129a2565b60405180910390f35b34801561040357600080fd5b5061040c610f92565b005b34801561041a57600080fd5b5061043560048036038101906104309190612ea1565b610fa6565b6040516104429190612f8c565b60405180910390f35b34801561045757600080fd5b50610472600480360381019061046d9190613004565b6110e9565b005b34801561048057600080fd5b5061048961115c565b60405161049691906128b9565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c19190613085565b611186565b005b3480156104d457600080fd5b506104dd61119c565b6040516104ea91906127f3565b60405180910390f35b3480156104ff57600080fd5b5061051a600480360381019061051591906130c5565b61122e565b6040516105279190612f8c565b60405180910390f35b34801561053c57600080fd5b5061055760048036038101906105529190613144565b61143a565b005b610573600480360381019061056e9190613225565b611545565b005b34801561058157600080fd5b5061059c6004803603810190610597919061284b565b6115b8565b6040516105a991906132fd565b60405180910390f35b3480156105be57600080fd5b506105d960048036038101906105d4919061284b565b611622565b6040516105e691906127f3565b60405180910390f35b3480156105fb57600080fd5b506106166004803603810190610611919061336e565b611860565b005b34801561062457600080fd5b5061063f600480360381019061063a9190613486565b611961565b60405161064c9190612748565b60405180910390f35b34801561066157600080fd5b5061067c60048036038101906106779190612ea1565b6119f5565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106d957506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107095750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60606002805461071f906134f5565b80601f016020809104026020016040519081016040528092919081815260200182805461074b906134f5565b80156107985780601f1061076d57610100808354040283529160200191610798565b820191906000526020600020905b81548152906001019060200180831161077b57829003601f168201915b5050505050905090565b60006107ad82611b2a565b6107e3576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061082c82610ec8565b90508073ffffffffffffffffffffffffffffffffffffffff1661084d611b89565b73ffffffffffffffffffffffffffffffffffffffff16146108b05761087981610874611b89565b611961565b6108af576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826006600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61096d611b91565b610978838383611c0f565b505050565b6000610987611d71565b6001546000540303905090565b600061099f82611d76565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a06576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610a1284611e42565b91509150610a288187610a23611b89565b611e69565b610a7457610a3d86610a38611b89565b611961565b610a73576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610ada576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ae78686866001611ead565b8015610af257600082555b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550610bc085610b9c888887611eb3565b7c020000000000000000000000000000000000000000000000000000000017611edb565b600460008681526020019081526020016000208190555060007c0200000000000000000000000000000000000000000000000000000000841603610c465760006001850190506000600460008381526020019081526020016000205403610c44576000548114610c43578360046000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610cae8686866001611f06565b505050505050565b610cbe611b91565b60005b81811015610d0657600a600090806001815401808255809150506001900390600052602060002001600090919091909150558080610cfe90613555565b915050610cc1565b50610d118282611f0c565b5050565b610d1d611b91565b60ff80168151600980549050610d33919061359d565b10610d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6a9061361d565b60405180910390fd5b60005b8151811015610de1576009828281518110610d9457610d9361363d565b5b6020026020010151908060018154018082558091505060019003906000526020600020016000909190919091509081610dcd9190613818565b508080610dd990613555565b915050610d76565b5050565b610e0083838360405180602001604052806000815250611545565b505050565b6060600083839050905060008167ffffffffffffffff811115610e2b57610e2a612a15565b5b604051908082528060200260200182016040528015610e6457816020015b610e5161256b565b815260200190600190039081610e495790505b50905060005b828114610ebc57610e93868683818110610e8757610e8661363d565b5b905060200201356115b8565b828281518110610ea657610ea561363d565b5b6020026020010181905250806001019050610e6a565b50809250505092915050565b6000610ed382611d76565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f41576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b610f9a611b91565b610fa460006120c7565b565b60606000806000610fb685610eda565b905060008167ffffffffffffffff811115610fd457610fd3612a15565b5b6040519080825280602002602001820160405280156110025781602001602082028036833780820191505090505b50905061100d61256b565b6000611017611d71565b90505b8386146110db5761102a8161218d565b915081604001516110d057600073ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161461107557816000015194505b8773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036110cf57808387806001019850815181106110c2576110c161363d565b5b6020026020010181815250505b5b80600101905061101a565b508195505050505050919050565b60005b84849050811015611155576111423386868481811061110e5761110d61363d565b5b90506020020160208101906111239190612ea1565b8585858181106111365761113561363d565b5b90506020020135610de5565b808061114d90613555565b9150506110ec565b5050505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61119882826111936121b8565b611c0f565b5050565b6060600380546111ab906134f5565b80601f01602080910402602001604051908101604052809291908181526020018280546111d7906134f5565b80156112245780601f106111f957610100808354040283529160200191611224565b820191906000526020600020905b81548152906001019060200180831161120757829003601f168201915b5050505050905090565b6060818310611269576040517f32c1995a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806112746121c0565b905061127e611d71565b8510156112905761128d611d71565b94505b8084111561129c578093505b60006112a787610eda565b9050848610156112ca5760008686039050818110156112c4578091505b506112cf565b600090505b60008167ffffffffffffffff8111156112eb576112ea612a15565b5b6040519080825280602002602001820160405280156113195781602001602082028036833780820191505090505b509050600082036113305780945050505050611433565b600061133b886115b8565b90506000816040015161135057816000015190505b60008990505b8881141580156113665750848714155b15611425576113748161218d565b9250826040015161141a57600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16146113bf57826000015191505b8a73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611419578084888060010199508151811061140c5761140b61363d565b5b6020026020010181815250505b5b806001019050611356565b508583528296505050505050505b9392505050565b8060076000611447611b89565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166114f4611b89565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115399190612748565b60405180910390a35050565b611550848484610994565b60008373ffffffffffffffffffffffffffffffffffffffff163b146115b25761157b848484846121c9565b6115b1576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b6115c061256b565b6115c861256b565b6115d0611d71565b8310806115e457506115e06121c0565b8310155b156115f2578091505061161d565b6115fb8361218d565b9050806040015115611610578091505061161d565b61161983612319565b9150505b919050565b606061162d82611b2a565b61166c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166390613936565b60405180910390fd5b60006002600c600e600d6040516020016116899493929190613b86565b604051602081830303815290604052905060005b60098054905081101561179d5781600982815481106116bf576116be61363d565b5b906000526020600020016000836001901b600a88815481106116e4576116e361363d565b5b90600052602060002001541611611730576040518060400160405280600981526020017fe69caae6a0b8e994800000000000000000000000000000000000000000000000815250611767565b6040518060400160405280600981526020017fe5b7b2e6a0b8e9948000000000000000000000000000000000000000000000008152505b60405160200161177993929190613d57565b6040516020818303038152906040529150808061179590613555565b91505061169d565b507f5d0000000000000000000000000000000000000000000000000000000000000081600183516117ce9190613da9565b815181106117df576117de61363d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508060405160200161181f9190613e29565b604051602081830303815290604052905061183981612339565b6040516020016118499190613e97565b604051602081830303815290604052915050919050565b611868611b91565b888860029182611879929190613ec4565b506040518060400160405280600781526020017f655469636b657400000000000000000000000000000000000000000000000000815250600390816118be9190613818565b508686600c91826118d0929190613ec4565b508484600d91826118e2929190613ec4565b508282600e91826118f4929190613ec4565b5060ff80166009805490501061193f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119369061361d565b60405180910390fd5b80600990805190602001906119559291906125ba565b50505050505050505050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff16611a1561115c565b73ffffffffffffffffffffffffffffffffffffffff161480611a705750611a3a6121b8565b73ffffffffffffffffffffffffffffffffffffffff16611a5861115c565b73ffffffffffffffffffffffffffffffffffffffff16145b611aaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa690613fe0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b159061404c565b60405180910390fd5b611b27816120c7565b50565b600081611b35611d71565b11158015611b44575060005482105b8015611b82575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b611b996121b8565b73ffffffffffffffffffffffffffffffffffffffff16611bb761115c565b73ffffffffffffffffffffffffffffffffffffffff1614611c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c04906140b8565b60405180910390fd5b565b8073ffffffffffffffffffffffffffffffffffffffff16611c2f84610ec8565b73ffffffffffffffffffffffffffffffffffffffff1614611c85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7c90614124565b60405180910390fd5b6009805490508210611ccc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc390614190565b60405180910390fd5b6000826001901b600a8581548110611ce757611ce661363d565b5b90600052602060002001541614611d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2a906141fc565b60405180910390fd5b816001901b600a8481548110611d4c57611d4b61363d565b5b906000526020600020016000828254611d65919061359d565b92505081905550505050565b600090565b60008082905080611d85611d71565b11611e0b57600054811015611e0a5760006004600083815260200190815260200160002054905060007c0100000000000000000000000000000000000000000000000000000000821603611e08575b60008103611dfe576004600083600190039350838152602001908152602001600020549050611dd4565b8092505050611e3d565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8611eca86868461249c565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b60008054905060008203611f4c576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f596000848385611ead565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611fd083611fc16000866000611eb3565b611fca856124a5565b17611edb565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b81811461207157808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600181019050612036565b50600082036120ac576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060008190555050506120c26000848385611f06565b505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61219561256b565b6121b160046000848152602001908152602001600020546124b5565b9050919050565b600033905090565b60008054905090565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a026121ef611b89565b8786866040518563ffffffff1660e01b81526004016122119493929190614266565b6020604051808303816000875af192505050801561224d57506040513d601f19601f8201168201806040525081019061224a91906142c7565b60015b6122c6573d806000811461227d576040519150601f19603f3d011682016040523d82523d6000602084013e612282565b606091505b5060008151036122be576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b61232161256b565b61233261232d83611d76565b6124b5565b9050919050565b6060600082510361235b57604051806020016040528060008152509050612497565b6000604051806060016040528060408152602001614397604091399050600060036002855161238a919061359d565b6123949190614323565b60046123a09190614354565b67ffffffffffffffff8111156123b9576123b8612a15565b5b6040519080825280601f01601f1916602001820160405280156123eb5781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015612457576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453600184019350506123fc565b505060038651066001811461247357600281146124865761248e565b603d6001830353603d600283035361248e565b603d60018303535b50505080925050505b919050565b60009392505050565b60006001821460e11b9050919050565b6124bd61256b565b81816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060a082901c816020019067ffffffffffffffff16908167ffffffffffffffff168152505060007c01000000000000000000000000000000000000000000000000000000008316141581604001901515908115158152505060e882901c816060019062ffffff16908162ffffff1681525050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600015158152602001600062ffffff1681525090565b828054828255906000526020600020908101928215612602579160200282015b828111156126015782518290816125f19190613818565b50916020019190600101906125da565b5b50905061260f9190612613565b5090565b5b80821115612633576000818161262a9190612637565b50600101612614565b5090565b508054612643906134f5565b6000825580601f106126555750612674565b601f0160209004906000526020600020908101906126739190612677565b5b50565b5b80821115612690576000816000905550600101612678565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6126dd816126a8565b81146126e857600080fd5b50565b6000813590506126fa816126d4565b92915050565b6000602082840312156127165761271561269e565b5b6000612724848285016126eb565b91505092915050565b60008115159050919050565b6127428161272d565b82525050565b600060208201905061275d6000830184612739565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561279d578082015181840152602081019050612782565b60008484015250505050565b6000601f19601f8301169050919050565b60006127c582612763565b6127cf818561276e565b93506127df81856020860161277f565b6127e8816127a9565b840191505092915050565b6000602082019050818103600083015261280d81846127ba565b905092915050565b6000819050919050565b61282881612815565b811461283357600080fd5b50565b6000813590506128458161281f565b92915050565b6000602082840312156128615761286061269e565b5b600061286f84828501612836565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128a382612878565b9050919050565b6128b381612898565b82525050565b60006020820190506128ce60008301846128aa565b92915050565b6128dd81612898565b81146128e857600080fd5b50565b6000813590506128fa816128d4565b92915050565b600080604083850312156129175761291661269e565b5b6000612925858286016128eb565b925050602061293685828601612836565b9150509250929050565b6000806000606084860312156129595761295861269e565b5b600061296786828701612836565b935050602061297886828701612836565b9250506040612989868287016128eb565b9150509250925092565b61299c81612815565b82525050565b60006020820190506129b76000830184612993565b92915050565b6000806000606084860312156129d6576129d561269e565b5b60006129e4868287016128eb565b93505060206129f5868287016128eb565b9250506040612a0686828701612836565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612a4d826127a9565b810181811067ffffffffffffffff82111715612a6c57612a6b612a15565b5b80604052505050565b6000612a7f612694565b9050612a8b8282612a44565b919050565b600067ffffffffffffffff821115612aab57612aaa612a15565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115612ae157612ae0612a15565b5b612aea826127a9565b9050602081019050919050565b82818337600083830152505050565b6000612b19612b1484612ac6565b612a75565b905082815260208101848484011115612b3557612b34612ac1565b5b612b40848285612af7565b509392505050565b600082601f830112612b5d57612b5c612a10565b5b8135612b6d848260208601612b06565b91505092915050565b6000612b89612b8484612a90565b612a75565b90508083825260208201905060208402830185811115612bac57612bab612abc565b5b835b81811015612bf357803567ffffffffffffffff811115612bd157612bd0612a10565b5b808601612bde8982612b48565b85526020850194505050602081019050612bae565b5050509392505050565b600082601f830112612c1257612c11612a10565b5b8135612c22848260208601612b76565b91505092915050565b600060208284031215612c4157612c4061269e565b5b600082013567ffffffffffffffff811115612c5f57612c5e6126a3565b5b612c6b84828501612bfd565b91505092915050565b600080fd5b60008083601f840112612c8f57612c8e612a10565b5b8235905067ffffffffffffffff811115612cac57612cab612c74565b5b602083019150836020820283011115612cc857612cc7612abc565b5b9250929050565b60008060208385031215612ce657612ce561269e565b5b600083013567ffffffffffffffff811115612d0457612d036126a3565b5b612d1085828601612c79565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612d5181612898565b82525050565b600067ffffffffffffffff82169050919050565b612d7481612d57565b82525050565b612d838161272d565b82525050565b600062ffffff82169050919050565b612da181612d89565b82525050565b608082016000820151612dbd6000850182612d48565b506020820151612dd06020850182612d6b565b506040820151612de36040850182612d7a565b506060820151612df66060850182612d98565b50505050565b6000612e088383612da7565b60808301905092915050565b6000602082019050919050565b6000612e2c82612d1c565b612e368185612d27565b9350612e4183612d38565b8060005b83811015612e72578151612e598882612dfc565b9750612e6483612e14565b925050600181019050612e45565b5085935050505092915050565b60006020820190508181036000830152612e998184612e21565b905092915050565b600060208284031215612eb757612eb661269e565b5b6000612ec5848285016128eb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612f0381612815565b82525050565b6000612f158383612efa565b60208301905092915050565b6000602082019050919050565b6000612f3982612ece565b612f438185612ed9565b9350612f4e83612eea565b8060005b83811015612f7f578151612f668882612f09565b9750612f7183612f21565b925050600181019050612f52565b5085935050505092915050565b60006020820190508181036000830152612fa68184612f2e565b905092915050565b60008083601f840112612fc457612fc3612a10565b5b8235905067ffffffffffffffff811115612fe157612fe0612c74565b5b602083019150836020820283011115612ffd57612ffc612abc565b5b9250929050565b6000806000806040858703121561301e5761301d61269e565b5b600085013567ffffffffffffffff81111561303c5761303b6126a3565b5b61304887828801612fae565b9450945050602085013567ffffffffffffffff81111561306b5761306a6126a3565b5b61307787828801612c79565b925092505092959194509250565b6000806040838503121561309c5761309b61269e565b5b60006130aa85828601612836565b92505060206130bb85828601612836565b9150509250929050565b6000806000606084860312156130de576130dd61269e565b5b60006130ec868287016128eb565b93505060206130fd86828701612836565b925050604061310e86828701612836565b9150509250925092565b6131218161272d565b811461312c57600080fd5b50565b60008135905061313e81613118565b92915050565b6000806040838503121561315b5761315a61269e565b5b6000613169858286016128eb565b925050602061317a8582860161312f565b9150509250929050565b600067ffffffffffffffff82111561319f5761319e612a15565b5b6131a8826127a9565b9050602081019050919050565b60006131c86131c384613184565b612a75565b9050828152602081018484840111156131e4576131e3612ac1565b5b6131ef848285612af7565b509392505050565b600082601f83011261320c5761320b612a10565b5b813561321c8482602086016131b5565b91505092915050565b6000806000806080858703121561323f5761323e61269e565b5b600061324d878288016128eb565b945050602061325e878288016128eb565b935050604061326f87828801612836565b925050606085013567ffffffffffffffff8111156132905761328f6126a3565b5b61329c878288016131f7565b91505092959194509250565b6080820160008201516132be6000850182612d48565b5060208201516132d16020850182612d6b565b5060408201516132e46040850182612d7a565b5060608201516132f76060850182612d98565b50505050565b600060808201905061331260008301846132a8565b92915050565b60008083601f84011261332e5761332d612a10565b5b8235905067ffffffffffffffff81111561334b5761334a612c74565b5b60208301915083600182028301111561336757613366612abc565b5b9250929050565b600080600080600080600080600060a08a8c0312156133905761338f61269e565b5b60008a013567ffffffffffffffff8111156133ae576133ad6126a3565b5b6133ba8c828d01613318565b995099505060208a013567ffffffffffffffff8111156133dd576133dc6126a3565b5b6133e98c828d01613318565b975097505060408a013567ffffffffffffffff81111561340c5761340b6126a3565b5b6134188c828d01613318565b955095505060608a013567ffffffffffffffff81111561343b5761343a6126a3565b5b6134478c828d01613318565b935093505060808a013567ffffffffffffffff81111561346a576134696126a3565b5b6134768c828d01612bfd565b9150509295985092959850929598565b6000806040838503121561349d5761349c61269e565b5b60006134ab858286016128eb565b92505060206134bc858286016128eb565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061350d57607f821691505b6020821081036135205761351f6134c6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061356082612815565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361359257613591613526565b5b600182019050919050565b60006135a882612815565b91506135b383612815565b92508282019050808211156135cb576135ca613526565b5b92915050565b7f4d617820726967687473206f766572204d41585f726967687473000000000000600082015250565b6000613607601a8361276e565b9150613612826135d1565b602082019050919050565b60006020820190508181036000830152613636816135fa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026136ce7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613691565b6136d88683613691565b95508019841693508086168417925050509392505050565b6000819050919050565b600061371561371061370b84612815565b6136f0565b612815565b9050919050565b6000819050919050565b61372f836136fa565b61374361373b8261371c565b84845461369e565b825550505050565b600090565b61375861374b565b613763818484613726565b505050565b5b818110156137875761377c600082613750565b600181019050613769565b5050565b601f8211156137cc5761379d8161366c565b6137a684613681565b810160208510156137b5578190505b6137c96137c185613681565b830182613768565b50505b505050565b600082821c905092915050565b60006137ef600019846008026137d1565b1980831691505092915050565b600061380883836137de565b9150826002028217905092915050565b61382182612763565b67ffffffffffffffff81111561383a57613839612a15565b5b61384482546134f5565b61384f82828561378b565b600060209050601f8311600181146138825760008415613870578287015190505b61387a85826137fc565b8655506138e2565b601f1984166138908661366c565b60005b828110156138b857848901518255600182019150602085019450602081019050613893565b868310156138d557848901516138d1601f8916826137de565b8355505b6001600288020188555050505b505050505050565b7f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000600082015250565b600061392060118361276e565b915061392b826138ea565b602082019050919050565b6000602082019050818103600083015261394f81613913565b9050919050565b600081905092915050565b7f7b226e616d65223a202200000000000000000000000000000000000000000000600082015250565b6000613997600a83613956565b91506139a282613961565b600a82019050919050565b600081546139ba816134f5565b6139c48186613956565b945060018216600081146139df57600181146139f457613a27565b60ff1983168652811515820286019350613a27565b6139fd8561366c565b60005b83811015613a1f57815481890152600182019150602081019050613a00565b838801955050505b50505092915050565b7f222c20226465736372697074696f6e223a202200000000000000000000000000600082015250565b6000613a66601383613956565b9150613a7182613a30565b601382019050919050565b7f222c202264657461696c73223a20220000000000000000000000000000000000600082015250565b6000613ab2600f83613956565b9150613abd82613a7c565b600f82019050919050565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b6000613afe600d83613956565b9150613b0982613ac8565b600d82019050919050565b7f222c202264657369676e6572223a202269736f746f702e746f70222c2022617460008201527f7472696275746573223a205b0000000000000000000000000000000000000000602082015250565b6000613b70602c83613956565b9150613b7b82613b14565b602c82019050919050565b6000613b918261398a565b9150613b9d82876139ad565b9150613ba882613a59565b9150613bb482866139ad565b9150613bbf82613aa5565b9150613bcb82856139ad565b9150613bd682613af1565b9150613be282846139ad565b9150613bed82613b63565b915081905095945050505050565b600081519050919050565b600081905092915050565b6000613c1c82613bfb565b613c268185613c06565b9350613c3681856020860161277f565b80840191505092915050565b7f7b2274726169745f74797065223a202200000000000000000000000000000000600082015250565b6000613c78601083613956565b9150613c8382613c42565b601082019050919050565b7f222c2276616c7565223a20220000000000000000000000000000000000000000600082015250565b6000613cc4600c83613956565b9150613ccf82613c8e565b600c82019050919050565b6000613ce582612763565b613cef8185613956565b9350613cff81856020860161277f565b80840191505092915050565b7f227d2c0000000000000000000000000000000000000000000000000000000000600082015250565b6000613d41600383613956565b9150613d4c82613d0b565b600382019050919050565b6000613d638286613c11565b9150613d6e82613c6b565b9150613d7a82856139ad565b9150613d8582613cb7565b9150613d918284613cda565b9150613d9c82613d34565b9150819050949350505050565b6000613db482612815565b9150613dbf83612815565b9250828203905081811115613dd757613dd6613526565b5b92915050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000613e13600183613956565b9150613e1e82613ddd565b600182019050919050565b6000613e358284613c11565b9150613e4082613e06565b915081905092915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000613e81601d83613956565b9150613e8c82613e4b565b601d82019050919050565b6000613ea282613e74565b9150613eae8284613cda565b915081905092915050565b600082905092915050565b613ece8383613eb9565b67ffffffffffffffff811115613ee757613ee6612a15565b5b613ef182546134f5565b613efc82828561378b565b6000601f831160018114613f2b5760008415613f19578287013590505b613f2385826137fc565b865550613f8b565b601f198416613f398661366c565b60005b82811015613f6157848901358255600182019150602085019450602081019050613f3c565b86831015613f7e5784890135613f7a601f8916826137de565b8355505b6001600288020188555050505b50505050505050565b7f4f6e6c79204f6e77657200000000000000000000000000000000000000000000600082015250565b6000613fca600a8361276e565b9150613fd582613f94565b602082019050919050565b60006020820190508181036000830152613ff981613fbd565b9050919050565b7f4e6577206f776e65722030000000000000000000000000000000000000000000600082015250565b6000614036600b8361276e565b915061404182614000565b602082019050919050565b6000602082019050818103600083015261406581614029565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006140a260208361276e565b91506140ad8261406c565b602082019050919050565b600060208201905081810360008301526140d181614095565b9050919050565b7f4f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b600061410e600a8361276e565b9150614119826140d8565b602082019050919050565b6000602082019050818103600083015261413d81614101565b9050919050565b7f726967687473206f766572666c6f770000000000000000000000000000000000600082015250565b600061417a600f8361276e565b915061418582614144565b602082019050919050565b600060208201905081810360008301526141a98161416d565b9050919050565b7f436865636b656420416c72656164790000000000000000000000000000000000600082015250565b60006141e6600f8361276e565b91506141f1826141b0565b602082019050919050565b60006020820190508181036000830152614215816141d9565b9050919050565b600082825260208201905092915050565b600061423882613bfb565b614242818561421c565b935061425281856020860161277f565b61425b816127a9565b840191505092915050565b600060808201905061427b60008301876128aa565b61428860208301866128aa565b6142956040830185612993565b81810360608301526142a7818461422d565b905095945050505050565b6000815190506142c1816126d4565b92915050565b6000602082840312156142dd576142dc61269e565b5b60006142eb848285016142b2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061432e82612815565b915061433983612815565b925082614349576143486142f4565b5b828204905092915050565b600061435f82612815565b915061436a83612815565b925082820261437881612815565b9150828204841483151761438f5761438e613526565b5b509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220f5a2ff06118831dc81154f89a83578a4ea40019b5d1a3898f77544f03c31e4a464736f6c63430008130033",
}

// ETicketABI is the input ABI used to generate the binding from.
// Deprecated: Use ETicketMetaData.ABI instead.
var ETicketABI = ETicketMetaData.ABI

// ETicketBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETicketMetaData.Bin instead.
var ETicketBin = ETicketMetaData.Bin

// DeployETicket deploys a new Ethereum contract, binding an instance of ETicket to it.
func DeployETicket(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ETicket, error) {
	parsed, err := ETicketMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETicketBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETicket{ETicketCaller: ETicketCaller{contract: contract}, ETicketTransactor: ETicketTransactor{contract: contract}, ETicketFilterer: ETicketFilterer{contract: contract}}, nil
}

// ETicket is an auto generated Go binding around an Ethereum contract.
type ETicket struct {
	ETicketCaller     // Read-only binding to the contract
	ETicketTransactor // Write-only binding to the contract
	ETicketFilterer   // Log filterer for contract events
}

// ETicketCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETicketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETicketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETicketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETicketSession struct {
	Contract     *ETicket          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETicketCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETicketCallerSession struct {
	Contract *ETicketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ETicketTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETicketTransactorSession struct {
	Contract     *ETicketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ETicketRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETicketRaw struct {
	Contract *ETicket // Generic contract binding to access the raw methods on
}

// ETicketCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETicketCallerRaw struct {
	Contract *ETicketCaller // Generic read-only contract binding to access the raw methods on
}

// ETicketTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETicketTransactorRaw struct {
	Contract *ETicketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETicket creates a new instance of ETicket, bound to a specific deployed contract.
func NewETicket(address common.Address, backend bind.ContractBackend) (*ETicket, error) {
	contract, err := bindETicket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETicket{ETicketCaller: ETicketCaller{contract: contract}, ETicketTransactor: ETicketTransactor{contract: contract}, ETicketFilterer: ETicketFilterer{contract: contract}}, nil
}

// NewETicketCaller creates a new read-only instance of ETicket, bound to a specific deployed contract.
func NewETicketCaller(address common.Address, caller bind.ContractCaller) (*ETicketCaller, error) {
	contract, err := bindETicket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETicketCaller{contract: contract}, nil
}

// NewETicketTransactor creates a new write-only instance of ETicket, bound to a specific deployed contract.
func NewETicketTransactor(address common.Address, transactor bind.ContractTransactor) (*ETicketTransactor, error) {
	contract, err := bindETicket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETicketTransactor{contract: contract}, nil
}

// NewETicketFilterer creates a new log filterer instance of ETicket, bound to a specific deployed contract.
func NewETicketFilterer(address common.Address, filterer bind.ContractFilterer) (*ETicketFilterer, error) {
	contract, err := bindETicket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETicketFilterer{contract: contract}, nil
}

// bindETicket binds a generic wrapper to an already deployed contract.
func bindETicket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ETicketMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETicket *ETicketRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETicket.Contract.ETicketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETicket *ETicketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.Contract.ETicketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETicket *ETicketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETicket.Contract.ETicketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETicket *ETicketCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETicket.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETicket *ETicketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETicket *ETicketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETicket.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ETicket.Contract.BalanceOf(&_ETicket.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ETicket.Contract.BalanceOf(&_ETicket.CallOpts, owner)
}

// ExplicitOwnershipOf is a free data retrieval call binding the contract method 0xc23dc68f.
//
// Solidity: function explicitOwnershipOf(uint256 tokenId) view returns((address,uint64,bool,uint24))
func (_ETicket *ETicketCaller) ExplicitOwnershipOf(opts *bind.CallOpts, tokenId *big.Int) (IERC721ATokenOwnership, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "explicitOwnershipOf", tokenId)

	if err != nil {
		return *new(IERC721ATokenOwnership), err
	}

	out0 := *abi.ConvertType(out[0], new(IERC721ATokenOwnership)).(*IERC721ATokenOwnership)

	return out0, err

}

// ExplicitOwnershipOf is a free data retrieval call binding the contract method 0xc23dc68f.
//
// Solidity: function explicitOwnershipOf(uint256 tokenId) view returns((address,uint64,bool,uint24))
func (_ETicket *ETicketSession) ExplicitOwnershipOf(tokenId *big.Int) (IERC721ATokenOwnership, error) {
	return _ETicket.Contract.ExplicitOwnershipOf(&_ETicket.CallOpts, tokenId)
}

// ExplicitOwnershipOf is a free data retrieval call binding the contract method 0xc23dc68f.
//
// Solidity: function explicitOwnershipOf(uint256 tokenId) view returns((address,uint64,bool,uint24))
func (_ETicket *ETicketCallerSession) ExplicitOwnershipOf(tokenId *big.Int) (IERC721ATokenOwnership, error) {
	return _ETicket.Contract.ExplicitOwnershipOf(&_ETicket.CallOpts, tokenId)
}

// ExplicitOwnershipsOf is a free data retrieval call binding the contract method 0x5bbb2177.
//
// Solidity: function explicitOwnershipsOf(uint256[] tokenIds) view returns((address,uint64,bool,uint24)[])
func (_ETicket *ETicketCaller) ExplicitOwnershipsOf(opts *bind.CallOpts, tokenIds []*big.Int) ([]IERC721ATokenOwnership, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "explicitOwnershipsOf", tokenIds)

	if err != nil {
		return *new([]IERC721ATokenOwnership), err
	}

	out0 := *abi.ConvertType(out[0], new([]IERC721ATokenOwnership)).(*[]IERC721ATokenOwnership)

	return out0, err

}

// ExplicitOwnershipsOf is a free data retrieval call binding the contract method 0x5bbb2177.
//
// Solidity: function explicitOwnershipsOf(uint256[] tokenIds) view returns((address,uint64,bool,uint24)[])
func (_ETicket *ETicketSession) ExplicitOwnershipsOf(tokenIds []*big.Int) ([]IERC721ATokenOwnership, error) {
	return _ETicket.Contract.ExplicitOwnershipsOf(&_ETicket.CallOpts, tokenIds)
}

// ExplicitOwnershipsOf is a free data retrieval call binding the contract method 0x5bbb2177.
//
// Solidity: function explicitOwnershipsOf(uint256[] tokenIds) view returns((address,uint64,bool,uint24)[])
func (_ETicket *ETicketCallerSession) ExplicitOwnershipsOf(tokenIds []*big.Int) ([]IERC721ATokenOwnership, error) {
	return _ETicket.Contract.ExplicitOwnershipsOf(&_ETicket.CallOpts, tokenIds)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.GetApproved(&_ETicket.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.GetApproved(&_ETicket.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ETicket.Contract.IsApprovedForAll(&_ETicket.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ETicket.Contract.IsApprovedForAll(&_ETicket.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketSession) Name() (string, error) {
	return _ETicket.Contract.Name(&_ETicket.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketCallerSession) Name() (string, error) {
	return _ETicket.Contract.Name(&_ETicket.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketSession) Owner() (common.Address, error) {
	return _ETicket.Contract.Owner(&_ETicket.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketCallerSession) Owner() (common.Address, error) {
	return _ETicket.Contract.Owner(&_ETicket.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.OwnerOf(&_ETicket.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.OwnerOf(&_ETicket.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ETicket.Contract.SupportsInterface(&_ETicket.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ETicket.Contract.SupportsInterface(&_ETicket.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketSession) Symbol() (string, error) {
	return _ETicket.Contract.Symbol(&_ETicket.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketCallerSession) Symbol() (string, error) {
	return _ETicket.Contract.Symbol(&_ETicket.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ETicket.Contract.TokenURI(&_ETicket.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ETicket.Contract.TokenURI(&_ETicket.CallOpts, tokenId)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[])
func (_ETicket *ETicketCaller) TokensOfOwner(opts *bind.CallOpts, owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "tokensOfOwner", owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[])
func (_ETicket *ETicketSession) TokensOfOwner(owner common.Address) ([]*big.Int, error) {
	return _ETicket.Contract.TokensOfOwner(&_ETicket.CallOpts, owner)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[])
func (_ETicket *ETicketCallerSession) TokensOfOwner(owner common.Address) ([]*big.Int, error) {
	return _ETicket.Contract.TokensOfOwner(&_ETicket.CallOpts, owner)
}

// TokensOfOwnerIn is a free data retrieval call binding the contract method 0x99a2557a.
//
// Solidity: function tokensOfOwnerIn(address owner, uint256 start, uint256 stop) view returns(uint256[])
func (_ETicket *ETicketCaller) TokensOfOwnerIn(opts *bind.CallOpts, owner common.Address, start *big.Int, stop *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "tokensOfOwnerIn", owner, start, stop)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokensOfOwnerIn is a free data retrieval call binding the contract method 0x99a2557a.
//
// Solidity: function tokensOfOwnerIn(address owner, uint256 start, uint256 stop) view returns(uint256[])
func (_ETicket *ETicketSession) TokensOfOwnerIn(owner common.Address, start *big.Int, stop *big.Int) ([]*big.Int, error) {
	return _ETicket.Contract.TokensOfOwnerIn(&_ETicket.CallOpts, owner, start, stop)
}

// TokensOfOwnerIn is a free data retrieval call binding the contract method 0x99a2557a.
//
// Solidity: function tokensOfOwnerIn(address owner, uint256 start, uint256 stop) view returns(uint256[])
func (_ETicket *ETicketCallerSession) TokensOfOwnerIn(owner common.Address, start *big.Int, stop *big.Int) ([]*big.Int, error) {
	return _ETicket.Contract.TokensOfOwnerIn(&_ETicket.CallOpts, owner, start, stop)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ETicket *ETicketCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ETicket *ETicketSession) TotalSupply() (*big.Int, error) {
	return _ETicket.Contract.TotalSupply(&_ETicket.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ETicket *ETicketCallerSession) TotalSupply() (*big.Int, error) {
	return _ETicket.Contract.TotalSupply(&_ETicket.CallOpts)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] rights_) returns()
func (_ETicket *ETicketTransactor) AddRights(opts *bind.TransactOpts, rights_ []string) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "addRights", rights_)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] rights_) returns()
func (_ETicket *ETicketSession) AddRights(rights_ []string) (*types.Transaction, error) {
	return _ETicket.Contract.AddRights(&_ETicket.TransactOpts, rights_)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] rights_) returns()
func (_ETicket *ETicketTransactorSession) AddRights(rights_ []string) (*types.Transaction, error) {
	return _ETicket.Contract.AddRights(&_ETicket.TransactOpts, rights_)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Approve(&_ETicket.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Approve(&_ETicket.TransactOpts, to, tokenId)
}

// BatchTransfer is a paid mutator transaction binding the contract method 0x88d695b2.
//
// Solidity: function batchTransfer(address[] _to, uint256[] _ids) returns()
func (_ETicket *ETicketTransactor) BatchTransfer(opts *bind.TransactOpts, _to []common.Address, _ids []*big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "batchTransfer", _to, _ids)
}

// BatchTransfer is a paid mutator transaction binding the contract method 0x88d695b2.
//
// Solidity: function batchTransfer(address[] _to, uint256[] _ids) returns()
func (_ETicket *ETicketSession) BatchTransfer(_to []common.Address, _ids []*big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.BatchTransfer(&_ETicket.TransactOpts, _to, _ids)
}

// BatchTransfer is a paid mutator transaction binding the contract method 0x88d695b2.
//
// Solidity: function batchTransfer(address[] _to, uint256[] _ids) returns()
func (_ETicket *ETicketTransactorSession) BatchTransfer(_to []common.Address, _ids []*big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.BatchTransfer(&_ETicket.TransactOpts, _to, _ids)
}

// Check is a paid mutator transaction binding the contract method 0x0ded480e.
//
// Solidity: function check(uint256 tokenId, uint256 _site, address _who) returns()
func (_ETicket *ETicketTransactor) Check(opts *bind.TransactOpts, tokenId *big.Int, _site *big.Int, _who common.Address) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "check", tokenId, _site, _who)
}

// Check is a paid mutator transaction binding the contract method 0x0ded480e.
//
// Solidity: function check(uint256 tokenId, uint256 _site, address _who) returns()
func (_ETicket *ETicketSession) Check(tokenId *big.Int, _site *big.Int, _who common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.Check(&_ETicket.TransactOpts, tokenId, _site, _who)
}

// Check is a paid mutator transaction binding the contract method 0x0ded480e.
//
// Solidity: function check(uint256 tokenId, uint256 _site, address _who) returns()
func (_ETicket *ETicketTransactorSession) Check(tokenId *big.Int, _site *big.Int, _who common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.Check(&_ETicket.TransactOpts, tokenId, _site, _who)
}

// Check0 is a paid mutator transaction binding the contract method 0x8fefd8ea.
//
// Solidity: function check(uint256 tokenId, uint256 _site) returns()
func (_ETicket *ETicketTransactor) Check0(opts *bind.TransactOpts, tokenId *big.Int, _site *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "check0", tokenId, _site)
}

// Check0 is a paid mutator transaction binding the contract method 0x8fefd8ea.
//
// Solidity: function check(uint256 tokenId, uint256 _site) returns()
func (_ETicket *ETicketSession) Check0(tokenId *big.Int, _site *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Check0(&_ETicket.TransactOpts, tokenId, _site)
}

// Check0 is a paid mutator transaction binding the contract method 0x8fefd8ea.
//
// Solidity: function check(uint256 tokenId, uint256 _site) returns()
func (_ETicket *ETicketTransactorSession) Check0(tokenId *big.Int, _site *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Check0(&_ETicket.TransactOpts, tokenId, _site)
}

// Init is a paid mutator transaction binding the contract method 0xde75b5b6.
//
// Solidity: function init(string name_, string description_, string base_, string details_, string[] rights_) returns()
func (_ETicket *ETicketTransactor) Init(opts *bind.TransactOpts, name_ string, description_ string, base_ string, details_ string, rights_ []string) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "init", name_, description_, base_, details_, rights_)
}

// Init is a paid mutator transaction binding the contract method 0xde75b5b6.
//
// Solidity: function init(string name_, string description_, string base_, string details_, string[] rights_) returns()
func (_ETicket *ETicketSession) Init(name_ string, description_ string, base_ string, details_ string, rights_ []string) (*types.Transaction, error) {
	return _ETicket.Contract.Init(&_ETicket.TransactOpts, name_, description_, base_, details_, rights_)
}

// Init is a paid mutator transaction binding the contract method 0xde75b5b6.
//
// Solidity: function init(string name_, string description_, string base_, string details_, string[] rights_) returns()
func (_ETicket *ETicketTransactorSession) Init(name_ string, description_ string, base_ string, details_ string, rights_ []string) (*types.Transaction, error) {
	return _ETicket.Contract.Init(&_ETicket.TransactOpts, name_, description_, base_, details_, rights_)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 quantity) returns()
func (_ETicket *ETicketTransactor) Mint(opts *bind.TransactOpts, _to common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "mint", _to, quantity)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 quantity) returns()
func (_ETicket *ETicketSession) Mint(_to common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Mint(&_ETicket.TransactOpts, _to, quantity)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 quantity) returns()
func (_ETicket *ETicketTransactorSession) Mint(_to common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Mint(&_ETicket.TransactOpts, _to, quantity)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketSession) RenounceOwnership() (*types.Transaction, error) {
	return _ETicket.Contract.RenounceOwnership(&_ETicket.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ETicket.Contract.RenounceOwnership(&_ETicket.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) payable returns()
func (_ETicket *ETicketTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) payable returns()
func (_ETicket *ETicketSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom0(&_ETicket.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) payable returns()
func (_ETicket *ETicketTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom0(&_ETicket.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.Contract.SetApprovalForAll(&_ETicket.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.Contract.SetApprovalForAll(&_ETicket.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.TransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.TransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.TransferOwnership(&_ETicket.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.TransferOwnership(&_ETicket.TransactOpts, newOwner)
}

// ETicketApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ETicket contract.
type ETicketApprovalIterator struct {
	Event *ETicketApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketApproval represents a Approval event raised by the ETicket contract.
type ETicketApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ETicketApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ETicketApprovalIterator{contract: _ETicket.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ETicketApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketApproval)
				if err := _ETicket.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) ParseApproval(log types.Log) (*ETicketApproval, error) {
	event := new(ETicketApproval)
	if err := _ETicket.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ETicket contract.
type ETicketApprovalForAllIterator struct {
	Event *ETicketApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketApprovalForAll represents a ApprovalForAll event raised by the ETicket contract.
type ETicketApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ETicketApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ETicketApprovalForAllIterator{contract: _ETicket.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ETicketApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketApprovalForAll)
				if err := _ETicket.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) ParseApprovalForAll(log types.Log) (*ETicketApprovalForAll, error) {
	event := new(ETicketApprovalForAll)
	if err := _ETicket.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketConsecutiveTransferIterator is returned from FilterConsecutiveTransfer and is used to iterate over the raw logs and unpacked data for ConsecutiveTransfer events raised by the ETicket contract.
type ETicketConsecutiveTransferIterator struct {
	Event *ETicketConsecutiveTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketConsecutiveTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketConsecutiveTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketConsecutiveTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketConsecutiveTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketConsecutiveTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketConsecutiveTransfer represents a ConsecutiveTransfer event raised by the ETicket contract.
type ETicketConsecutiveTransfer struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	From        common.Address
	To          common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterConsecutiveTransfer is a free log retrieval operation binding the contract event 0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d.
//
// Solidity: event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)
func (_ETicket *ETicketFilterer) FilterConsecutiveTransfer(opts *bind.FilterOpts, fromTokenId []*big.Int, from []common.Address, to []common.Address) (*ETicketConsecutiveTransferIterator, error) {

	var fromTokenIdRule []interface{}
	for _, fromTokenIdItem := range fromTokenId {
		fromTokenIdRule = append(fromTokenIdRule, fromTokenIdItem)
	}

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "ConsecutiveTransfer", fromTokenIdRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ETicketConsecutiveTransferIterator{contract: _ETicket.contract, event: "ConsecutiveTransfer", logs: logs, sub: sub}, nil
}

// WatchConsecutiveTransfer is a free log subscription operation binding the contract event 0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d.
//
// Solidity: event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)
func (_ETicket *ETicketFilterer) WatchConsecutiveTransfer(opts *bind.WatchOpts, sink chan<- *ETicketConsecutiveTransfer, fromTokenId []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromTokenIdRule []interface{}
	for _, fromTokenIdItem := range fromTokenId {
		fromTokenIdRule = append(fromTokenIdRule, fromTokenIdItem)
	}

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "ConsecutiveTransfer", fromTokenIdRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketConsecutiveTransfer)
				if err := _ETicket.contract.UnpackLog(event, "ConsecutiveTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConsecutiveTransfer is a log parse operation binding the contract event 0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d.
//
// Solidity: event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)
func (_ETicket *ETicketFilterer) ParseConsecutiveTransfer(log types.Log) (*ETicketConsecutiveTransfer, error) {
	event := new(ETicketConsecutiveTransfer)
	if err := _ETicket.contract.UnpackLog(event, "ConsecutiveTransfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ETicket contract.
type ETicketOwnershipTransferredIterator struct {
	Event *ETicketOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketOwnershipTransferred represents a OwnershipTransferred event raised by the ETicket contract.
type ETicketOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ETicketOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ETicketOwnershipTransferredIterator{contract: _ETicket.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ETicketOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketOwnershipTransferred)
				if err := _ETicket.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) ParseOwnershipTransferred(log types.Log) (*ETicketOwnershipTransferred, error) {
	event := new(ETicketOwnershipTransferred)
	if err := _ETicket.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ETicket contract.
type ETicketTransferIterator struct {
	Event *ETicketTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketTransfer represents a Transfer event raised by the ETicket contract.
type ETicketTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ETicketTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ETicketTransferIterator{contract: _ETicket.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ETicketTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketTransfer)
				if err := _ETicket.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) ParseTransfer(log types.Log) (*ETicketTransfer, error) {
	event := new(ETicketTransfer)
	if err := _ETicket.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
