// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IERC721ATokenOwnership is an auto generated low-level Go binding around an user-defined struct.
type IERC721ATokenOwnership struct {
	Addr           common.Address
	StartTimestamp uint64
	Burned         bool
	ExtraData      *big.Int
}

// ETicketMetaData contains all meta data concerning the ETicket contract.
var ETicketMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"rights_\",\"type\":\"string[]\"}],\"name\":\"addRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_site\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_site\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"structIERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"structIERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"base_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details_\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"rights_\",\"type\":\"string[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600681526020017f49534f544f5000000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f49534f544f50000000000000000000000000000000000000000000000000000081525081600290816200008f91906200042d565b508060039081620000a191906200042d565b50620000b2620000e060201b60201c565b6000819055505050620000da620000ce620000e560201b60201c565b620000ed60201b60201c565b62000514565b600090565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200023557607f821691505b6020821081036200024b576200024a620001ed565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000276565b620002c1868362000276565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200030e620003086200030284620002d9565b620002e3565b620002d9565b9050919050565b6000819050919050565b6200032a83620002ed565b62000342620003398262000315565b84845462000283565b825550505050565b600090565b620003596200034a565b620003668184846200031f565b505050565b5b818110156200038e57620003826000826200034f565b6001810190506200036c565b5050565b601f821115620003dd57620003a78162000251565b620003b28462000266565b81016020851015620003c2578190505b620003da620003d18562000266565b8301826200036b565b50505b505050565b600082821c905092915050565b60006200040260001984600802620003e2565b1980831691505092915050565b60006200041d8383620003ef565b9150826002028217905092915050565b6200043882620001b3565b67ffffffffffffffff811115620004545762000453620001be565b5b6200046082546200021c565b6200046d82828562000392565b600060209050601f831160018114620004a5576000841562000490578287015190505b6200049c85826200040f565b8655506200050c565b601f198416620004b58662000251565b60005b82811015620004df57848901518255600182019150602085019450602081019050620004b8565b86831015620004ff5784890151620004fb601f891682620003ef565b8355505b6001600288020188555050505b505050505050565b61427e80620005246000396000f3fe6080604052600436106101815760003560e01c8063715018a6116100d1578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd1461056e578063de75b5b6146105ab578063e985e9c5146105d4578063f2fde38b1461061157610181565b8063a22cb465146104ec578063b88d4fde14610515578063c23dc68f1461053157610181565b8063715018a6146103dc5780638462151c146103f35780638da5cb5b146104305780638fefd8ea1461045b57806395d89b411461048457806399a2557a146104af57610181565b806323b872dd1161013e57806342842e0e1161011857806342842e0e146103095780635bbb2177146103255780636352211e1461036257806370a082311461039f57610181565b806323b872dd1461029b57806340c10f19146102b7578063415dd877146102e057610181565b806301ffc9a71461018657806306fdde03146101c3578063081812fc146101ee578063095ea7b31461022b5780630ded480e1461024757806318160ddd14610270575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a89190612649565b61063a565b6040516101ba9190612691565b60405180910390f35b3480156101cf57600080fd5b506101d86106cc565b6040516101e5919061273c565b60405180910390f35b3480156101fa57600080fd5b5061021560048036038101906102109190612794565b61075e565b6040516102229190612802565b60405180910390f35b61024560048036038101906102409190612849565b6107dd565b005b34801561025357600080fd5b5061026e60048036038101906102699190612889565b610921565b005b34801561027c57600080fd5b50610285610939565b60405161029291906128eb565b60405180910390f35b6102b560048036038101906102b09190612906565b610950565b005b3480156102c357600080fd5b506102de60048036038101906102d99190612849565b610c72565b005b3480156102ec57600080fd5b5061030760048036038101906103029190612b74565b610cd1565b005b610323600480360381019061031e9190612906565b610da1565b005b34801561033157600080fd5b5061034c60048036038101906103479190612c18565b610dc1565b6040516103599190612dc8565b60405180910390f35b34801561036e57600080fd5b5061038960048036038101906103849190612794565b610e84565b6040516103969190612802565b60405180910390f35b3480156103ab57600080fd5b506103c660048036038101906103c19190612dea565b610e96565b6040516103d391906128eb565b60405180910390f35b3480156103e857600080fd5b506103f1610f4e565b005b3480156103ff57600080fd5b5061041a60048036038101906104159190612dea565b610f62565b6040516104279190612ed5565b60405180910390f35b34801561043c57600080fd5b506104456110a5565b6040516104529190612802565b60405180910390f35b34801561046757600080fd5b50610482600480360381019061047d9190612ef7565b6110cf565b005b34801561049057600080fd5b506104996110e5565b6040516104a6919061273c565b60405180910390f35b3480156104bb57600080fd5b506104d660048036038101906104d19190612f37565b611177565b6040516104e39190612ed5565b60405180910390f35b3480156104f857600080fd5b50610513600480360381019061050e9190612fb6565b611383565b005b61052f600480360381019061052a9190613097565b61148e565b005b34801561053d57600080fd5b5061055860048036038101906105539190612794565b611501565b604051610565919061316f565b60405180910390f35b34801561057a57600080fd5b5061059560048036038101906105909190612794565b61156b565b6040516105a2919061273c565b60405180910390f35b3480156105b757600080fd5b506105d260048036038101906105cd91906131e0565b6117a9565b005b3480156105e057600080fd5b506105fb60048036038101906105f691906132f8565b6118aa565b6040516106089190612691565b60405180910390f35b34801561061d57600080fd5b5061063860048036038101906106339190612dea565b61193e565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061069557506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106c55750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6060600280546106db90613367565b80601f016020809104026020016040519081016040528092919081815260200182805461070790613367565b80156107545780601f1061072957610100808354040283529160200191610754565b820191906000526020600020905b81548152906001019060200180831161073757829003601f168201915b5050505050905090565b600061076982611a73565b61079f576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107e882610e84565b90508073ffffffffffffffffffffffffffffffffffffffff16610809611ad2565b73ffffffffffffffffffffffffffffffffffffffff161461086c5761083581610830611ad2565b6118aa565b61086b576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826006600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b610929611ada565b610934838383611b58565b505050565b6000610943611cba565b6001546000540303905090565b600061095b82611cbf565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109c2576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806109ce84611d8b565b915091506109e481876109df611ad2565b611db2565b610a30576109f9866109f4611ad2565b6118aa565b610a2f576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610a96576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aa38686866001611df6565b8015610aae57600082555b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550610b7c85610b58888887611dfc565b7c020000000000000000000000000000000000000000000000000000000017611e24565b600460008681526020019081526020016000208190555060007c0200000000000000000000000000000000000000000000000000000000841603610c025760006001850190506000600460008381526020019081526020016000205403610c00576000548114610bff578360046000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610c6a8686866001611e4f565b505050505050565b610c7a611ada565b60005b81811015610cc257600a600090806001815401808255809150506001900390600052602060002001600090919091909150558080610cba906133c7565b915050610c7d565b50610ccd8282611e55565b5050565b610cd9611ada565b60ff80168151600980549050610cef919061340f565b10610d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d269061348f565b60405180910390fd5b60005b8151811015610d9d576009828281518110610d5057610d4f6134af565b5b6020026020010151908060018154018082558091505060019003906000526020600020016000909190919091509081610d89919061368a565b508080610d95906133c7565b915050610d32565b5050565b610dbc8383836040518060200160405280600081525061148e565b505050565b6060600083839050905060008167ffffffffffffffff811115610de757610de661295e565b5b604051908082528060200260200182016040528015610e2057816020015b610e0d6124b4565b815260200190600190039081610e055790505b50905060005b828114610e7857610e4f868683818110610e4357610e426134af565b5b90506020020135611501565b828281518110610e6257610e616134af565b5b6020026020010181905250806001019050610e26565b50809250505092915050565b6000610e8f82611cbf565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610efd576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b610f56611ada565b610f606000612010565b565b60606000806000610f7285610e96565b905060008167ffffffffffffffff811115610f9057610f8f61295e565b5b604051908082528060200260200182016040528015610fbe5781602001602082028036833780820191505090505b509050610fc96124b4565b6000610fd3611cba565b90505b83861461109757610fe6816120d6565b9150816040015161108c57600073ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161461103157816000015194505b8773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361108b578083878060010198508151811061107e5761107d6134af565b5b6020026020010181815250505b5b806001019050610fd6565b508195505050505050919050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6110e182826110dc612101565b611b58565b5050565b6060600380546110f490613367565b80601f016020809104026020016040519081016040528092919081815260200182805461112090613367565b801561116d5780601f106111425761010080835404028352916020019161116d565b820191906000526020600020905b81548152906001019060200180831161115057829003601f168201915b5050505050905090565b60608183106111b2576040517f32c1995a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806111bd612109565b90506111c7611cba565b8510156111d9576111d6611cba565b94505b808411156111e5578093505b60006111f087610e96565b90508486101561121357600086860390508181101561120d578091505b50611218565b600090505b60008167ffffffffffffffff8111156112345761123361295e565b5b6040519080825280602002602001820160405280156112625781602001602082028036833780820191505090505b50905060008203611279578094505050505061137c565b600061128488611501565b90506000816040015161129957816000015190505b60008990505b8881141580156112af5750848714155b1561136e576112bd816120d6565b9250826040015161136357600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff161461130857826000015191505b8a73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113625780848880600101995081518110611355576113546134af565b5b6020026020010181815250505b5b80600101905061129f565b508583528296505050505050505b9392505050565b8060076000611390611ad2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661143d611ad2565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114829190612691565b60405180910390a35050565b611499848484610950565b60008373ffffffffffffffffffffffffffffffffffffffff163b146114fb576114c484848484612112565b6114fa576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b6115096124b4565b6115116124b4565b611519611cba565b83108061152d5750611529612109565b8310155b1561153b5780915050611566565b611544836120d6565b90508060400151156115595780915050611566565b61156283612262565b9150505b919050565b606061157682611a73565b6115b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ac906137a8565b60405180910390fd5b60006002600c600e600d6040516020016115d294939291906139f8565b604051602081830303815290604052905060005b6009805490508110156116e6578160098281548110611608576116076134af565b5b906000526020600020016000836001901b600a888154811061162d5761162c6134af565b5b90600052602060002001541611611679576040518060400160405280600981526020017fe69caae6a0b8e9948000000000000000000000000000000000000000000000008152506116b0565b6040518060400160405280600981526020017fe5b7b2e6a0b8e9948000000000000000000000000000000000000000000000008152505b6040516020016116c293929190613bc9565b604051602081830303815290604052915080806116de906133c7565b9150506115e6565b507f5d0000000000000000000000000000000000000000000000000000000000000081600183516117179190613c1b565b81518110611728576117276134af565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806040516020016117689190613c9b565b604051602081830303815290604052905061178281612282565b6040516020016117929190613d09565b604051602081830303815290604052915050919050565b6117b1611ada565b8888600291826117c2929190613d36565b506040518060400160405280600781526020017f655469636b65740000000000000000000000000000000000000000000000000081525060039081611807919061368a565b508686600c9182611819929190613d36565b508484600d918261182b929190613d36565b508282600e918261183d929190613d36565b5060ff801660098054905010611888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187f9061348f565b60405180910390fd5b806009908051906020019061189e929190612503565b50505050505050505050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff1661195e6110a5565b73ffffffffffffffffffffffffffffffffffffffff1614806119b95750611983612101565b73ffffffffffffffffffffffffffffffffffffffff166119a16110a5565b73ffffffffffffffffffffffffffffffffffffffff16145b6119f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ef90613e52565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5e90613ebe565b60405180910390fd5b611a7081612010565b50565b600081611a7e611cba565b11158015611a8d575060005482105b8015611acb575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b611ae2612101565b73ffffffffffffffffffffffffffffffffffffffff16611b006110a5565b73ffffffffffffffffffffffffffffffffffffffff1614611b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4d90613f2a565b60405180910390fd5b565b8073ffffffffffffffffffffffffffffffffffffffff16611b7884610e84565b73ffffffffffffffffffffffffffffffffffffffff1614611bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc590613f96565b60405180910390fd5b6009805490508210611c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0c90614002565b60405180910390fd5b6000826001901b600a8581548110611c3057611c2f6134af565b5b90600052602060002001541614611c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c739061406e565b60405180910390fd5b816001901b600a8481548110611c9557611c946134af565b5b906000526020600020016000828254611cae919061340f565b92505081905550505050565b600090565b60008082905080611cce611cba565b11611d5457600054811015611d535760006004600083815260200190815260200160002054905060007c0100000000000000000000000000000000000000000000000000000000821603611d51575b60008103611d47576004600083600190039350838152602001908152602001600020549050611d1d565b8092505050611d86565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8611e138686846123e5565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b60008054905060008203611e95576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ea26000848385611df6565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611f1983611f0a6000866000611dfc565b611f13856123ee565b17611e24565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b818114611fba57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600181019050611f7f565b5060008203611ff5576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600081905550505061200b6000848385611e4f565b505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6120de6124b4565b6120fa60046000848152602001908152602001600020546123fe565b9050919050565b600033905090565b60008054905090565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612138611ad2565b8786866040518563ffffffff1660e01b815260040161215a94939291906140d8565b6020604051808303816000875af192505050801561219657506040513d601f19601f820116820180604052508101906121939190614139565b60015b61220f573d80600081146121c6576040519150601f19603f3d011682016040523d82523d6000602084013e6121cb565b606091505b506000815103612207576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b61226a6124b4565b61227b61227683611cbf565b6123fe565b9050919050565b606060008251036122a4576040518060200160405280600081525090506123e0565b600060405180606001604052806040815260200161420960409139905060006003600285516122d3919061340f565b6122dd9190614195565b60046122e991906141c6565b67ffffffffffffffff8111156123025761230161295e565b5b6040519080825280601f01601f1916602001820160405280156123345781602001600182028036833780820191505090505b509050600182016020820185865187015b808210156123a0576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050612345565b50506003865106600181146123bc57600281146123cf576123d7565b603d6001830353603d60028303536123d7565b603d60018303535b50505080925050505b919050565b60009392505050565b60006001821460e11b9050919050565b6124066124b4565b81816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060a082901c816020019067ffffffffffffffff16908167ffffffffffffffff168152505060007c01000000000000000000000000000000000000000000000000000000008316141581604001901515908115158152505060e882901c816060019062ffffff16908162ffffff1681525050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600015158152602001600062ffffff1681525090565b82805482825590600052602060002090810192821561254b579160200282015b8281111561254a57825182908161253a919061368a565b5091602001919060010190612523565b5b509050612558919061255c565b5090565b5b8082111561257c57600081816125739190612580565b5060010161255d565b5090565b50805461258c90613367565b6000825580601f1061259e57506125bd565b601f0160209004906000526020600020908101906125bc91906125c0565b5b50565b5b808211156125d95760008160009055506001016125c1565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612626816125f1565b811461263157600080fd5b50565b6000813590506126438161261d565b92915050565b60006020828403121561265f5761265e6125e7565b5b600061266d84828501612634565b91505092915050565b60008115159050919050565b61268b81612676565b82525050565b60006020820190506126a66000830184612682565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126e65780820151818401526020810190506126cb565b60008484015250505050565b6000601f19601f8301169050919050565b600061270e826126ac565b61271881856126b7565b93506127288185602086016126c8565b612731816126f2565b840191505092915050565b600060208201905081810360008301526127568184612703565b905092915050565b6000819050919050565b6127718161275e565b811461277c57600080fd5b50565b60008135905061278e81612768565b92915050565b6000602082840312156127aa576127a96125e7565b5b60006127b88482850161277f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127ec826127c1565b9050919050565b6127fc816127e1565b82525050565b600060208201905061281760008301846127f3565b92915050565b612826816127e1565b811461283157600080fd5b50565b6000813590506128438161281d565b92915050565b600080604083850312156128605761285f6125e7565b5b600061286e85828601612834565b925050602061287f8582860161277f565b9150509250929050565b6000806000606084860312156128a2576128a16125e7565b5b60006128b08682870161277f565b93505060206128c18682870161277f565b92505060406128d286828701612834565b9150509250925092565b6128e58161275e565b82525050565b600060208201905061290060008301846128dc565b92915050565b60008060006060848603121561291f5761291e6125e7565b5b600061292d86828701612834565b935050602061293e86828701612834565b925050604061294f8682870161277f565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612996826126f2565b810181811067ffffffffffffffff821117156129b5576129b461295e565b5b80604052505050565b60006129c86125dd565b90506129d4828261298d565b919050565b600067ffffffffffffffff8211156129f4576129f361295e565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115612a2a57612a2961295e565b5b612a33826126f2565b9050602081019050919050565b82818337600083830152505050565b6000612a62612a5d84612a0f565b6129be565b905082815260208101848484011115612a7e57612a7d612a0a565b5b612a89848285612a40565b509392505050565b600082601f830112612aa657612aa5612959565b5b8135612ab6848260208601612a4f565b91505092915050565b6000612ad2612acd846129d9565b6129be565b90508083825260208201905060208402830185811115612af557612af4612a05565b5b835b81811015612b3c57803567ffffffffffffffff811115612b1a57612b19612959565b5b808601612b278982612a91565b85526020850194505050602081019050612af7565b5050509392505050565b600082601f830112612b5b57612b5a612959565b5b8135612b6b848260208601612abf565b91505092915050565b600060208284031215612b8a57612b896125e7565b5b600082013567ffffffffffffffff811115612ba857612ba76125ec565b5b612bb484828501612b46565b91505092915050565b600080fd5b60008083601f840112612bd857612bd7612959565b5b8235905067ffffffffffffffff811115612bf557612bf4612bbd565b5b602083019150836020820283011115612c1157612c10612a05565b5b9250929050565b60008060208385031215612c2f57612c2e6125e7565b5b600083013567ffffffffffffffff811115612c4d57612c4c6125ec565b5b612c5985828601612bc2565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612c9a816127e1565b82525050565b600067ffffffffffffffff82169050919050565b612cbd81612ca0565b82525050565b612ccc81612676565b82525050565b600062ffffff82169050919050565b612cea81612cd2565b82525050565b608082016000820151612d066000850182612c91565b506020820151612d196020850182612cb4565b506040820151612d2c6040850182612cc3565b506060820151612d3f6060850182612ce1565b50505050565b6000612d518383612cf0565b60808301905092915050565b6000602082019050919050565b6000612d7582612c65565b612d7f8185612c70565b9350612d8a83612c81565b8060005b83811015612dbb578151612da28882612d45565b9750612dad83612d5d565b925050600181019050612d8e565b5085935050505092915050565b60006020820190508181036000830152612de28184612d6a565b905092915050565b600060208284031215612e0057612dff6125e7565b5b6000612e0e84828501612834565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612e4c8161275e565b82525050565b6000612e5e8383612e43565b60208301905092915050565b6000602082019050919050565b6000612e8282612e17565b612e8c8185612e22565b9350612e9783612e33565b8060005b83811015612ec8578151612eaf8882612e52565b9750612eba83612e6a565b925050600181019050612e9b565b5085935050505092915050565b60006020820190508181036000830152612eef8184612e77565b905092915050565b60008060408385031215612f0e57612f0d6125e7565b5b6000612f1c8582860161277f565b9250506020612f2d8582860161277f565b9150509250929050565b600080600060608486031215612f5057612f4f6125e7565b5b6000612f5e86828701612834565b9350506020612f6f8682870161277f565b9250506040612f808682870161277f565b9150509250925092565b612f9381612676565b8114612f9e57600080fd5b50565b600081359050612fb081612f8a565b92915050565b60008060408385031215612fcd57612fcc6125e7565b5b6000612fdb85828601612834565b9250506020612fec85828601612fa1565b9150509250929050565b600067ffffffffffffffff8211156130115761301061295e565b5b61301a826126f2565b9050602081019050919050565b600061303a61303584612ff6565b6129be565b90508281526020810184848401111561305657613055612a0a565b5b613061848285612a40565b509392505050565b600082601f83011261307e5761307d612959565b5b813561308e848260208601613027565b91505092915050565b600080600080608085870312156130b1576130b06125e7565b5b60006130bf87828801612834565b94505060206130d087828801612834565b93505060406130e18782880161277f565b925050606085013567ffffffffffffffff811115613102576131016125ec565b5b61310e87828801613069565b91505092959194509250565b6080820160008201516131306000850182612c91565b5060208201516131436020850182612cb4565b5060408201516131566040850182612cc3565b5060608201516131696060850182612ce1565b50505050565b6000608082019050613184600083018461311a565b92915050565b60008083601f8401126131a05761319f612959565b5b8235905067ffffffffffffffff8111156131bd576131bc612bbd565b5b6020830191508360018202830111156131d9576131d8612a05565b5b9250929050565b600080600080600080600080600060a08a8c031215613202576132016125e7565b5b60008a013567ffffffffffffffff8111156132205761321f6125ec565b5b61322c8c828d0161318a565b995099505060208a013567ffffffffffffffff81111561324f5761324e6125ec565b5b61325b8c828d0161318a565b975097505060408a013567ffffffffffffffff81111561327e5761327d6125ec565b5b61328a8c828d0161318a565b955095505060608a013567ffffffffffffffff8111156132ad576132ac6125ec565b5b6132b98c828d0161318a565b935093505060808a013567ffffffffffffffff8111156132dc576132db6125ec565b5b6132e88c828d01612b46565b9150509295985092959850929598565b6000806040838503121561330f5761330e6125e7565b5b600061331d85828601612834565b925050602061332e85828601612834565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061337f57607f821691505b60208210810361339257613391613338565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006133d28261275e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361340457613403613398565b5b600182019050919050565b600061341a8261275e565b91506134258361275e565b925082820190508082111561343d5761343c613398565b5b92915050565b7f4d617820726967687473206f766572204d41585f726967687473000000000000600082015250565b6000613479601a836126b7565b915061348482613443565b602082019050919050565b600060208201905081810360008301526134a88161346c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026135407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613503565b61354a8683613503565b95508019841693508086168417925050509392505050565b6000819050919050565b600061358761358261357d8461275e565b613562565b61275e565b9050919050565b6000819050919050565b6135a18361356c565b6135b56135ad8261358e565b848454613510565b825550505050565b600090565b6135ca6135bd565b6135d5818484613598565b505050565b5b818110156135f9576135ee6000826135c2565b6001810190506135db565b5050565b601f82111561363e5761360f816134de565b613618846134f3565b81016020851015613627578190505b61363b613633856134f3565b8301826135da565b50505b505050565b600082821c905092915050565b600061366160001984600802613643565b1980831691505092915050565b600061367a8383613650565b9150826002028217905092915050565b613693826126ac565b67ffffffffffffffff8111156136ac576136ab61295e565b5b6136b68254613367565b6136c18282856135fd565b600060209050601f8311600181146136f457600084156136e2578287015190505b6136ec858261366e565b865550613754565b601f198416613702866134de565b60005b8281101561372a57848901518255600182019150602085019450602081019050613705565b868310156137475784890151613743601f891682613650565b8355505b6001600288020188555050505b505050505050565b7f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000600082015250565b60006137926011836126b7565b915061379d8261375c565b602082019050919050565b600060208201905081810360008301526137c181613785565b9050919050565b600081905092915050565b7f7b226e616d65223a202200000000000000000000000000000000000000000000600082015250565b6000613809600a836137c8565b9150613814826137d3565b600a82019050919050565b6000815461382c81613367565b61383681866137c8565b94506001821660008114613851576001811461386657613899565b60ff1983168652811515820286019350613899565b61386f856134de565b60005b8381101561389157815481890152600182019150602081019050613872565b838801955050505b50505092915050565b7f222c20226465736372697074696f6e223a202200000000000000000000000000600082015250565b60006138d86013836137c8565b91506138e3826138a2565b601382019050919050565b7f222c202264657461696c73223a20220000000000000000000000000000000000600082015250565b6000613924600f836137c8565b915061392f826138ee565b600f82019050919050565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b6000613970600d836137c8565b915061397b8261393a565b600d82019050919050565b7f222c202264657369676e6572223a202269736f746f702e746f70222c2022617460008201527f7472696275746573223a205b0000000000000000000000000000000000000000602082015250565b60006139e2602c836137c8565b91506139ed82613986565b602c82019050919050565b6000613a03826137fc565b9150613a0f828761381f565b9150613a1a826138cb565b9150613a26828661381f565b9150613a3182613917565b9150613a3d828561381f565b9150613a4882613963565b9150613a54828461381f565b9150613a5f826139d5565b915081905095945050505050565b600081519050919050565b600081905092915050565b6000613a8e82613a6d565b613a988185613a78565b9350613aa88185602086016126c8565b80840191505092915050565b7f7b2274726169745f74797065223a202200000000000000000000000000000000600082015250565b6000613aea6010836137c8565b9150613af582613ab4565b601082019050919050565b7f222c2276616c7565223a20220000000000000000000000000000000000000000600082015250565b6000613b36600c836137c8565b9150613b4182613b00565b600c82019050919050565b6000613b57826126ac565b613b6181856137c8565b9350613b718185602086016126c8565b80840191505092915050565b7f227d2c0000000000000000000000000000000000000000000000000000000000600082015250565b6000613bb36003836137c8565b9150613bbe82613b7d565b600382019050919050565b6000613bd58286613a83565b9150613be082613add565b9150613bec828561381f565b9150613bf782613b29565b9150613c038284613b4c565b9150613c0e82613ba6565b9150819050949350505050565b6000613c268261275e565b9150613c318361275e565b9250828203905081811115613c4957613c48613398565b5b92915050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000613c856001836137c8565b9150613c9082613c4f565b600182019050919050565b6000613ca78284613a83565b9150613cb282613c78565b915081905092915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000613cf3601d836137c8565b9150613cfe82613cbd565b601d82019050919050565b6000613d1482613ce6565b9150613d208284613b4c565b915081905092915050565b600082905092915050565b613d408383613d2b565b67ffffffffffffffff811115613d5957613d5861295e565b5b613d638254613367565b613d6e8282856135fd565b6000601f831160018114613d9d5760008415613d8b578287013590505b613d95858261366e565b865550613dfd565b601f198416613dab866134de565b60005b82811015613dd357848901358255600182019150602085019450602081019050613dae565b86831015613df05784890135613dec601f891682613650565b8355505b6001600288020188555050505b50505050505050565b7f4f6e6c79204f6e77657200000000000000000000000000000000000000000000600082015250565b6000613e3c600a836126b7565b9150613e4782613e06565b602082019050919050565b60006020820190508181036000830152613e6b81613e2f565b9050919050565b7f4e6577206f776e65722030000000000000000000000000000000000000000000600082015250565b6000613ea8600b836126b7565b9150613eb382613e72565b602082019050919050565b60006020820190508181036000830152613ed781613e9b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613f146020836126b7565b9150613f1f82613ede565b602082019050919050565b60006020820190508181036000830152613f4381613f07565b9050919050565b7f4f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b6000613f80600a836126b7565b9150613f8b82613f4a565b602082019050919050565b60006020820190508181036000830152613faf81613f73565b9050919050565b7f726967687473206f766572666c6f770000000000000000000000000000000000600082015250565b6000613fec600f836126b7565b9150613ff782613fb6565b602082019050919050565b6000602082019050818103600083015261401b81613fdf565b9050919050565b7f436865636b656420416c72656164790000000000000000000000000000000000600082015250565b6000614058600f836126b7565b915061406382614022565b602082019050919050565b600060208201905081810360008301526140878161404b565b9050919050565b600082825260208201905092915050565b60006140aa82613a6d565b6140b4818561408e565b93506140c48185602086016126c8565b6140cd816126f2565b840191505092915050565b60006080820190506140ed60008301876127f3565b6140fa60208301866127f3565b61410760408301856128dc565b8181036060830152614119818461409f565b905095945050505050565b6000815190506141338161261d565b92915050565b60006020828403121561414f5761414e6125e7565b5b600061415d84828501614124565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006141a08261275e565b91506141ab8361275e565b9250826141bb576141ba614166565b5b828204905092915050565b60006141d18261275e565b91506141dc8361275e565b92508282026141ea8161275e565b9150828204841483151761420157614200613398565b5b509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220114f3efbe690d4e795638a0512915d529a0f1146dae6c440b17f1c55bc82fa0c64736f6c63430008130033",
}

// ETicketABI is the input ABI used to generate the binding from.
// Deprecated: Use ETicketMetaData.ABI instead.
var ETicketABI = ETicketMetaData.ABI

// ETicketBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETicketMetaData.Bin instead.
var ETicketBin = ETicketMetaData.Bin

// DeployETicket deploys a new Ethereum contract, binding an instance of ETicket to it.
func DeployETicket(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ETicket, error) {
	parsed, err := ETicketMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETicketBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETicket{ETicketCaller: ETicketCaller{contract: contract}, ETicketTransactor: ETicketTransactor{contract: contract}, ETicketFilterer: ETicketFilterer{contract: contract}}, nil
}

// ETicket is an auto generated Go binding around an Ethereum contract.
type ETicket struct {
	ETicketCaller     // Read-only binding to the contract
	ETicketTransactor // Write-only binding to the contract
	ETicketFilterer   // Log filterer for contract events
}

// ETicketCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETicketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETicketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETicketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETicketSession struct {
	Contract     *ETicket          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETicketCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETicketCallerSession struct {
	Contract *ETicketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ETicketTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETicketTransactorSession struct {
	Contract     *ETicketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ETicketRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETicketRaw struct {
	Contract *ETicket // Generic contract binding to access the raw methods on
}

// ETicketCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETicketCallerRaw struct {
	Contract *ETicketCaller // Generic read-only contract binding to access the raw methods on
}

// ETicketTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETicketTransactorRaw struct {
	Contract *ETicketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETicket creates a new instance of ETicket, bound to a specific deployed contract.
func NewETicket(address common.Address, backend bind.ContractBackend) (*ETicket, error) {
	contract, err := bindETicket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETicket{ETicketCaller: ETicketCaller{contract: contract}, ETicketTransactor: ETicketTransactor{contract: contract}, ETicketFilterer: ETicketFilterer{contract: contract}}, nil
}

// NewETicketCaller creates a new read-only instance of ETicket, bound to a specific deployed contract.
func NewETicketCaller(address common.Address, caller bind.ContractCaller) (*ETicketCaller, error) {
	contract, err := bindETicket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETicketCaller{contract: contract}, nil
}

// NewETicketTransactor creates a new write-only instance of ETicket, bound to a specific deployed contract.
func NewETicketTransactor(address common.Address, transactor bind.ContractTransactor) (*ETicketTransactor, error) {
	contract, err := bindETicket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETicketTransactor{contract: contract}, nil
}

// NewETicketFilterer creates a new log filterer instance of ETicket, bound to a specific deployed contract.
func NewETicketFilterer(address common.Address, filterer bind.ContractFilterer) (*ETicketFilterer, error) {
	contract, err := bindETicket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETicketFilterer{contract: contract}, nil
}

// bindETicket binds a generic wrapper to an already deployed contract.
func bindETicket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ETicketMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETicket *ETicketRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETicket.Contract.ETicketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETicket *ETicketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.Contract.ETicketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETicket *ETicketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETicket.Contract.ETicketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETicket *ETicketCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETicket.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETicket *ETicketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETicket *ETicketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETicket.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ETicket.Contract.BalanceOf(&_ETicket.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ETicket.Contract.BalanceOf(&_ETicket.CallOpts, owner)
}

// ExplicitOwnershipOf is a free data retrieval call binding the contract method 0xc23dc68f.
//
// Solidity: function explicitOwnershipOf(uint256 tokenId) view returns((address,uint64,bool,uint24))
func (_ETicket *ETicketCaller) ExplicitOwnershipOf(opts *bind.CallOpts, tokenId *big.Int) (IERC721ATokenOwnership, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "explicitOwnershipOf", tokenId)

	if err != nil {
		return *new(IERC721ATokenOwnership), err
	}

	out0 := *abi.ConvertType(out[0], new(IERC721ATokenOwnership)).(*IERC721ATokenOwnership)

	return out0, err

}

// ExplicitOwnershipOf is a free data retrieval call binding the contract method 0xc23dc68f.
//
// Solidity: function explicitOwnershipOf(uint256 tokenId) view returns((address,uint64,bool,uint24))
func (_ETicket *ETicketSession) ExplicitOwnershipOf(tokenId *big.Int) (IERC721ATokenOwnership, error) {
	return _ETicket.Contract.ExplicitOwnershipOf(&_ETicket.CallOpts, tokenId)
}

// ExplicitOwnershipOf is a free data retrieval call binding the contract method 0xc23dc68f.
//
// Solidity: function explicitOwnershipOf(uint256 tokenId) view returns((address,uint64,bool,uint24))
func (_ETicket *ETicketCallerSession) ExplicitOwnershipOf(tokenId *big.Int) (IERC721ATokenOwnership, error) {
	return _ETicket.Contract.ExplicitOwnershipOf(&_ETicket.CallOpts, tokenId)
}

// ExplicitOwnershipsOf is a free data retrieval call binding the contract method 0x5bbb2177.
//
// Solidity: function explicitOwnershipsOf(uint256[] tokenIds) view returns((address,uint64,bool,uint24)[])
func (_ETicket *ETicketCaller) ExplicitOwnershipsOf(opts *bind.CallOpts, tokenIds []*big.Int) ([]IERC721ATokenOwnership, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "explicitOwnershipsOf", tokenIds)

	if err != nil {
		return *new([]IERC721ATokenOwnership), err
	}

	out0 := *abi.ConvertType(out[0], new([]IERC721ATokenOwnership)).(*[]IERC721ATokenOwnership)

	return out0, err

}

// ExplicitOwnershipsOf is a free data retrieval call binding the contract method 0x5bbb2177.
//
// Solidity: function explicitOwnershipsOf(uint256[] tokenIds) view returns((address,uint64,bool,uint24)[])
func (_ETicket *ETicketSession) ExplicitOwnershipsOf(tokenIds []*big.Int) ([]IERC721ATokenOwnership, error) {
	return _ETicket.Contract.ExplicitOwnershipsOf(&_ETicket.CallOpts, tokenIds)
}

// ExplicitOwnershipsOf is a free data retrieval call binding the contract method 0x5bbb2177.
//
// Solidity: function explicitOwnershipsOf(uint256[] tokenIds) view returns((address,uint64,bool,uint24)[])
func (_ETicket *ETicketCallerSession) ExplicitOwnershipsOf(tokenIds []*big.Int) ([]IERC721ATokenOwnership, error) {
	return _ETicket.Contract.ExplicitOwnershipsOf(&_ETicket.CallOpts, tokenIds)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.GetApproved(&_ETicket.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.GetApproved(&_ETicket.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ETicket.Contract.IsApprovedForAll(&_ETicket.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ETicket.Contract.IsApprovedForAll(&_ETicket.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketSession) Name() (string, error) {
	return _ETicket.Contract.Name(&_ETicket.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketCallerSession) Name() (string, error) {
	return _ETicket.Contract.Name(&_ETicket.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketSession) Owner() (common.Address, error) {
	return _ETicket.Contract.Owner(&_ETicket.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketCallerSession) Owner() (common.Address, error) {
	return _ETicket.Contract.Owner(&_ETicket.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.OwnerOf(&_ETicket.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.OwnerOf(&_ETicket.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ETicket.Contract.SupportsInterface(&_ETicket.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ETicket.Contract.SupportsInterface(&_ETicket.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketSession) Symbol() (string, error) {
	return _ETicket.Contract.Symbol(&_ETicket.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketCallerSession) Symbol() (string, error) {
	return _ETicket.Contract.Symbol(&_ETicket.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ETicket.Contract.TokenURI(&_ETicket.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ETicket.Contract.TokenURI(&_ETicket.CallOpts, tokenId)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[])
func (_ETicket *ETicketCaller) TokensOfOwner(opts *bind.CallOpts, owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "tokensOfOwner", owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[])
func (_ETicket *ETicketSession) TokensOfOwner(owner common.Address) ([]*big.Int, error) {
	return _ETicket.Contract.TokensOfOwner(&_ETicket.CallOpts, owner)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[])
func (_ETicket *ETicketCallerSession) TokensOfOwner(owner common.Address) ([]*big.Int, error) {
	return _ETicket.Contract.TokensOfOwner(&_ETicket.CallOpts, owner)
}

// TokensOfOwnerIn is a free data retrieval call binding the contract method 0x99a2557a.
//
// Solidity: function tokensOfOwnerIn(address owner, uint256 start, uint256 stop) view returns(uint256[])
func (_ETicket *ETicketCaller) TokensOfOwnerIn(opts *bind.CallOpts, owner common.Address, start *big.Int, stop *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "tokensOfOwnerIn", owner, start, stop)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokensOfOwnerIn is a free data retrieval call binding the contract method 0x99a2557a.
//
// Solidity: function tokensOfOwnerIn(address owner, uint256 start, uint256 stop) view returns(uint256[])
func (_ETicket *ETicketSession) TokensOfOwnerIn(owner common.Address, start *big.Int, stop *big.Int) ([]*big.Int, error) {
	return _ETicket.Contract.TokensOfOwnerIn(&_ETicket.CallOpts, owner, start, stop)
}

// TokensOfOwnerIn is a free data retrieval call binding the contract method 0x99a2557a.
//
// Solidity: function tokensOfOwnerIn(address owner, uint256 start, uint256 stop) view returns(uint256[])
func (_ETicket *ETicketCallerSession) TokensOfOwnerIn(owner common.Address, start *big.Int, stop *big.Int) ([]*big.Int, error) {
	return _ETicket.Contract.TokensOfOwnerIn(&_ETicket.CallOpts, owner, start, stop)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ETicket *ETicketCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ETicket *ETicketSession) TotalSupply() (*big.Int, error) {
	return _ETicket.Contract.TotalSupply(&_ETicket.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ETicket *ETicketCallerSession) TotalSupply() (*big.Int, error) {
	return _ETicket.Contract.TotalSupply(&_ETicket.CallOpts)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] rights_) returns()
func (_ETicket *ETicketTransactor) AddRights(opts *bind.TransactOpts, rights_ []string) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "addRights", rights_)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] rights_) returns()
func (_ETicket *ETicketSession) AddRights(rights_ []string) (*types.Transaction, error) {
	return _ETicket.Contract.AddRights(&_ETicket.TransactOpts, rights_)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] rights_) returns()
func (_ETicket *ETicketTransactorSession) AddRights(rights_ []string) (*types.Transaction, error) {
	return _ETicket.Contract.AddRights(&_ETicket.TransactOpts, rights_)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Approve(&_ETicket.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Approve(&_ETicket.TransactOpts, to, tokenId)
}

// Check is a paid mutator transaction binding the contract method 0x0ded480e.
//
// Solidity: function check(uint256 tokenId, uint256 _site, address _who) returns()
func (_ETicket *ETicketTransactor) Check(opts *bind.TransactOpts, tokenId *big.Int, _site *big.Int, _who common.Address) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "check", tokenId, _site, _who)
}

// Check is a paid mutator transaction binding the contract method 0x0ded480e.
//
// Solidity: function check(uint256 tokenId, uint256 _site, address _who) returns()
func (_ETicket *ETicketSession) Check(tokenId *big.Int, _site *big.Int, _who common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.Check(&_ETicket.TransactOpts, tokenId, _site, _who)
}

// Check is a paid mutator transaction binding the contract method 0x0ded480e.
//
// Solidity: function check(uint256 tokenId, uint256 _site, address _who) returns()
func (_ETicket *ETicketTransactorSession) Check(tokenId *big.Int, _site *big.Int, _who common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.Check(&_ETicket.TransactOpts, tokenId, _site, _who)
}

// Check0 is a paid mutator transaction binding the contract method 0x8fefd8ea.
//
// Solidity: function check(uint256 tokenId, uint256 _site) returns()
func (_ETicket *ETicketTransactor) Check0(opts *bind.TransactOpts, tokenId *big.Int, _site *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "check0", tokenId, _site)
}

// Check0 is a paid mutator transaction binding the contract method 0x8fefd8ea.
//
// Solidity: function check(uint256 tokenId, uint256 _site) returns()
func (_ETicket *ETicketSession) Check0(tokenId *big.Int, _site *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Check0(&_ETicket.TransactOpts, tokenId, _site)
}

// Check0 is a paid mutator transaction binding the contract method 0x8fefd8ea.
//
// Solidity: function check(uint256 tokenId, uint256 _site) returns()
func (_ETicket *ETicketTransactorSession) Check0(tokenId *big.Int, _site *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Check0(&_ETicket.TransactOpts, tokenId, _site)
}

// Init is a paid mutator transaction binding the contract method 0xde75b5b6.
//
// Solidity: function init(string name_, string description_, string base_, string details_, string[] rights_) returns()
func (_ETicket *ETicketTransactor) Init(opts *bind.TransactOpts, name_ string, description_ string, base_ string, details_ string, rights_ []string) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "init", name_, description_, base_, details_, rights_)
}

// Init is a paid mutator transaction binding the contract method 0xde75b5b6.
//
// Solidity: function init(string name_, string description_, string base_, string details_, string[] rights_) returns()
func (_ETicket *ETicketSession) Init(name_ string, description_ string, base_ string, details_ string, rights_ []string) (*types.Transaction, error) {
	return _ETicket.Contract.Init(&_ETicket.TransactOpts, name_, description_, base_, details_, rights_)
}

// Init is a paid mutator transaction binding the contract method 0xde75b5b6.
//
// Solidity: function init(string name_, string description_, string base_, string details_, string[] rights_) returns()
func (_ETicket *ETicketTransactorSession) Init(name_ string, description_ string, base_ string, details_ string, rights_ []string) (*types.Transaction, error) {
	return _ETicket.Contract.Init(&_ETicket.TransactOpts, name_, description_, base_, details_, rights_)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 quantity) returns()
func (_ETicket *ETicketTransactor) Mint(opts *bind.TransactOpts, _to common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "mint", _to, quantity)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 quantity) returns()
func (_ETicket *ETicketSession) Mint(_to common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Mint(&_ETicket.TransactOpts, _to, quantity)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 quantity) returns()
func (_ETicket *ETicketTransactorSession) Mint(_to common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Mint(&_ETicket.TransactOpts, _to, quantity)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketSession) RenounceOwnership() (*types.Transaction, error) {
	return _ETicket.Contract.RenounceOwnership(&_ETicket.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ETicket.Contract.RenounceOwnership(&_ETicket.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) payable returns()
func (_ETicket *ETicketTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) payable returns()
func (_ETicket *ETicketSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom0(&_ETicket.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) payable returns()
func (_ETicket *ETicketTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom0(&_ETicket.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.Contract.SetApprovalForAll(&_ETicket.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.Contract.SetApprovalForAll(&_ETicket.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.TransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (_ETicket *ETicketTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.TransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.TransferOwnership(&_ETicket.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.TransferOwnership(&_ETicket.TransactOpts, newOwner)
}

// ETicketApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ETicket contract.
type ETicketApprovalIterator struct {
	Event *ETicketApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketApproval represents a Approval event raised by the ETicket contract.
type ETicketApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ETicketApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ETicketApprovalIterator{contract: _ETicket.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ETicketApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketApproval)
				if err := _ETicket.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) ParseApproval(log types.Log) (*ETicketApproval, error) {
	event := new(ETicketApproval)
	if err := _ETicket.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ETicket contract.
type ETicketApprovalForAllIterator struct {
	Event *ETicketApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketApprovalForAll represents a ApprovalForAll event raised by the ETicket contract.
type ETicketApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ETicketApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ETicketApprovalForAllIterator{contract: _ETicket.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ETicketApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketApprovalForAll)
				if err := _ETicket.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) ParseApprovalForAll(log types.Log) (*ETicketApprovalForAll, error) {
	event := new(ETicketApprovalForAll)
	if err := _ETicket.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketConsecutiveTransferIterator is returned from FilterConsecutiveTransfer and is used to iterate over the raw logs and unpacked data for ConsecutiveTransfer events raised by the ETicket contract.
type ETicketConsecutiveTransferIterator struct {
	Event *ETicketConsecutiveTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketConsecutiveTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketConsecutiveTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketConsecutiveTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketConsecutiveTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketConsecutiveTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketConsecutiveTransfer represents a ConsecutiveTransfer event raised by the ETicket contract.
type ETicketConsecutiveTransfer struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	From        common.Address
	To          common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterConsecutiveTransfer is a free log retrieval operation binding the contract event 0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d.
//
// Solidity: event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)
func (_ETicket *ETicketFilterer) FilterConsecutiveTransfer(opts *bind.FilterOpts, fromTokenId []*big.Int, from []common.Address, to []common.Address) (*ETicketConsecutiveTransferIterator, error) {

	var fromTokenIdRule []interface{}
	for _, fromTokenIdItem := range fromTokenId {
		fromTokenIdRule = append(fromTokenIdRule, fromTokenIdItem)
	}

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "ConsecutiveTransfer", fromTokenIdRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ETicketConsecutiveTransferIterator{contract: _ETicket.contract, event: "ConsecutiveTransfer", logs: logs, sub: sub}, nil
}

// WatchConsecutiveTransfer is a free log subscription operation binding the contract event 0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d.
//
// Solidity: event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)
func (_ETicket *ETicketFilterer) WatchConsecutiveTransfer(opts *bind.WatchOpts, sink chan<- *ETicketConsecutiveTransfer, fromTokenId []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromTokenIdRule []interface{}
	for _, fromTokenIdItem := range fromTokenId {
		fromTokenIdRule = append(fromTokenIdRule, fromTokenIdItem)
	}

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "ConsecutiveTransfer", fromTokenIdRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketConsecutiveTransfer)
				if err := _ETicket.contract.UnpackLog(event, "ConsecutiveTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConsecutiveTransfer is a log parse operation binding the contract event 0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d.
//
// Solidity: event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)
func (_ETicket *ETicketFilterer) ParseConsecutiveTransfer(log types.Log) (*ETicketConsecutiveTransfer, error) {
	event := new(ETicketConsecutiveTransfer)
	if err := _ETicket.contract.UnpackLog(event, "ConsecutiveTransfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ETicket contract.
type ETicketOwnershipTransferredIterator struct {
	Event *ETicketOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketOwnershipTransferred represents a OwnershipTransferred event raised by the ETicket contract.
type ETicketOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ETicketOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ETicketOwnershipTransferredIterator{contract: _ETicket.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ETicketOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketOwnershipTransferred)
				if err := _ETicket.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) ParseOwnershipTransferred(log types.Log) (*ETicketOwnershipTransferred, error) {
	event := new(ETicketOwnershipTransferred)
	if err := _ETicket.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ETicket contract.
type ETicketTransferIterator struct {
	Event *ETicketTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketTransfer represents a Transfer event raised by the ETicket contract.
type ETicketTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ETicketTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ETicketTransferIterator{contract: _ETicket.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ETicketTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketTransfer)
				if err := _ETicket.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) ParseTransfer(log types.Log) (*ETicketTransfer, error) {
	event := new(ETicketTransfer)
	if err := _ETicket.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
