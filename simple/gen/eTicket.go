// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ETicketMetaData contains all meta data concerning the ETicket contract.
var ETicketMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_info\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"rights_\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"rights_\",\"type\":\"string[]\"}],\"name\":\"addRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_site\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_site\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004e1b38038062004e1b8339818101604052810190620000379190620007d3565b836000815181106200004e576200004d62000883565b5b60200260200101516040518060400160405280600781526020017f655469636b65740000000000000000000000000000000000000000000000000081525081600090816200009d919062000af3565b508060019081620000af919062000af3565b505050620000d2620000c66200027560201b60201c565b6200028c60201b60201c565b83600181518110620000e957620000e862000883565b5b6020026020010151600a908162000101919062000af3565b508360028151811062000119576200011862000883565b5b6020026020010151600b908162000131919062000af3565b508360038151811062000149576200014862000883565b5b6020026020010151600c908162000161919062000af3565b5060ff801660078054905010620001af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001a69062000c3b565b60405180910390fd5b81600f819055508260079080519060200190620001ce929190620003ca565b5083600481518110620001e657620001e562000883565b5b6020026020010151600d9081620001fe919062000af3565b5080600e819055508167ffffffffffffffff81111562000223576200022262000533565b5b604051908082528060200260200182016040528015620002525781602001602082028036833780820191505090505b50600890805190602001906200026a9291906200042a565b505050505062000c5d565b6000620002876200035260201b60201c565b905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073c77fa7345679ccdbdb6204f0ca6a024be4abd00373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603620003ac57601436033560601c9050620003bf565b620003bc620003c260201b60201c565b90505b90565b600033905090565b82805482825590600052602060002090810192821562000417579160200282015b828111156200041657825182908162000405919062000af3565b5091602001919060010190620003eb565b5b5090506200042691906200047c565b5090565b82805482825590600052602060002090810192821562000469579160200282015b82811115620004685782518255916020019190600101906200044b565b5b509050620004789190620004a4565b5090565b5b80821115620004a05760008181620004969190620004c3565b506001016200047d565b5090565b5b80821115620004bf576000816000905550600101620004a5565b5090565b508054620004d190620008ec565b6000825580601f10620004e5575062000506565b601f016020900490600052602060002090810190620005059190620004a4565b5b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200056d8262000522565b810181811067ffffffffffffffff821117156200058f576200058e62000533565b5b80604052505050565b6000620005a462000509565b9050620005b2828262000562565b919050565b600067ffffffffffffffff821115620005d557620005d462000533565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156200060e576200060d62000533565b5b620006198262000522565b9050602081019050919050565b60005b838110156200064657808201518184015260208101905062000629565b60008484015250505050565b6000620006696200066384620005f0565b62000598565b905082815260208101848484011115620006885762000687620005eb565b5b6200069584828562000626565b509392505050565b600082601f830112620006b557620006b46200051d565b5b8151620006c784826020860162000652565b91505092915050565b6000620006e7620006e184620005b7565b62000598565b905080838252602082019050602084028301858111156200070d576200070c620005e6565b5b835b818110156200075b57805167ffffffffffffffff8111156200073657620007356200051d565b5b8086016200074589826200069d565b855260208501945050506020810190506200070f565b5050509392505050565b600082601f8301126200077d576200077c6200051d565b5b81516200078f848260208601620006d0565b91505092915050565b6000819050919050565b620007ad8162000798565b8114620007b957600080fd5b50565b600081519050620007cd81620007a2565b92915050565b60008060008060808587031215620007f057620007ef62000513565b5b600085015167ffffffffffffffff81111562000811576200081062000518565b5b6200081f8782880162000765565b945050602085015167ffffffffffffffff81111562000843576200084262000518565b5b620008518782880162000765565b93505060406200086487828801620007bc565b92505060606200087787828801620007bc565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200090557607f821691505b6020821081036200091b576200091a620008bd565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620009857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000946565b62000991868362000946565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620009d4620009ce620009c88462000798565b620009a9565b62000798565b9050919050565b6000819050919050565b620009f083620009b3565b62000a08620009ff82620009db565b84845462000953565b825550505050565b600090565b62000a1f62000a10565b62000a2c818484620009e5565b505050565b5b8181101562000a545762000a4860008262000a15565b60018101905062000a32565b5050565b601f82111562000aa35762000a6d8162000921565b62000a788462000936565b8101602085101562000a88578190505b62000aa062000a978562000936565b83018262000a31565b50505b505050565b600082821c905092915050565b600062000ac86000198460080262000aa8565b1980831691505092915050565b600062000ae3838362000ab5565b9150826002028217905092915050565b62000afe82620008b2565b67ffffffffffffffff81111562000b1a5762000b1962000533565b5b62000b268254620008ec565b62000b3382828562000a58565b600060209050601f83116001811462000b6b576000841562000b56578287015190505b62000b62858262000ad5565b86555062000bd2565b601f19841662000b7b8662000921565b60005b8281101562000ba55784890151825560018201915060208501945060208101905062000b7e565b8683101562000bc5578489015162000bc1601f89168262000ab5565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f4d617820726967687473206f766572204d41585f726967687473000000000000600082015250565b600062000c23601a8362000bda565b915062000c308262000beb565b602082019050919050565b6000602082019050818103600083015262000c568162000c14565b9050919050565b6141ae8062000c6d6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063a22cb4651161007c578063a22cb4651461034d578063ac9650d814610369578063b88d4fde14610399578063c87b56dd146103b5578063e985e9c5146103e5578063f2fde38b1461041557610142565b806370a08231146102bb578063715018a6146102eb5780638da5cb5b146102f55780638fefd8ea1461031357806395d89b411461032f57610142565b806318160ddd1161010a57806318160ddd146101fd57806323b872dd1461021b57806340c10f1914610237578063415dd8771461025357806342842e0e1461026f5780636352211e1461028b57610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c55780630ded480e146101e1575b600080fd5b610161600480360381019061015c91906120f9565b610431565b60405161016e9190612141565b60405180910390f35b61017f610513565b60405161018c91906121ec565b60405180910390f35b6101af60048036038101906101aa9190612244565b6105a5565b6040516101bc91906122b2565b60405180910390f35b6101df60048036038101906101da91906122f9565b6105eb565b005b6101fb60048036038101906101f69190612339565b610702565b005b61020561071a565b604051610212919061239b565b60405180910390f35b610235600480360381019061023091906123b6565b610720565b005b610251600480360381019061024c91906122f9565b610780565b005b61026d60048036038101906102689190612624565b6107ba565b005b610289600480360381019061028491906123b6565b61088a565b005b6102a560048036038101906102a09190612244565b6108aa565b6040516102b291906122b2565b60405180910390f35b6102d560048036038101906102d0919061266d565b61095b565b6040516102e2919061239b565b60405180910390f35b6102f3610a12565b005b6102fd610a26565b60405161030a91906122b2565b60405180910390f35b61032d6004803603810190610328919061269a565b610a50565b005b610337610a66565b60405161034491906121ec565b60405180910390f35b61036760048036038101906103629190612706565b610af8565b005b610383600480360381019061037e91906127a1565b610b0e565b6040516103909190612905565b60405180910390f35b6103b360048036038101906103ae91906129c8565b610c1a565b005b6103cf60048036038101906103ca9190612244565b610c7c565b6040516103dc91906121ec565b60405180910390f35b6103ff60048036038101906103fa9190612a4b565b610f65565b60405161040c9190612141565b60405180910390f35b61042f600480360381019061042a919061266d565b610ff9565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104fc57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061050c575061050b8261107c565b5b9050919050565b60606000805461052290612aba565b80601f016020809104026020016040519081016040528092919081815260200182805461054e90612aba565b801561059b5780601f106105705761010080835404028352916020019161059b565b820191906000526020600020905b81548152906001019060200180831161057e57829003601f168201915b5050505050905090565b60006105b0826110e6565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105f6826108aa565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065d90612b5d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610685611131565b73ffffffffffffffffffffffffffffffffffffffff1614806106b457506106b3816106ae611131565b610f65565b5b6106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea90612bef565b60405180910390fd5b6106fd8383611140565b505050565b61070a6111f9565b610715838383611277565b505050565b600f5481565b61073161072b611131565b826113d9565b610770576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076790612c81565b60405180910390fd5b61077b83838361146e565b505050565b6107886111f9565b60006008828154811061079e5761079d612ca1565b5b90600052602060002001819055506107b682826116d4565b5050565b6107c26111f9565b60ff801681516007805490506107d89190612cff565b10610818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080f90612d7f565b60405180910390fd5b60005b815181101561088657600782828151811061083957610838612ca1565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190915090816108729190612f4b565b50808061087e9061301d565b91505061081b565b5050565b6108a583838360405180602001604052806000815250610c1a565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610952576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610949906130b1565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c290613143565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a1a6111f9565b610a2460006118ad565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a628282610a5d611131565b611277565b5050565b606060018054610a7590612aba565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa190612aba565b8015610aee5780601f10610ac357610100808354040283529160200191610aee565b820191906000526020600020905b815481529060010190602001808311610ad157829003601f168201915b5050505050905090565b610b0a610b03611131565b8383611973565b5050565b60608282905067ffffffffffffffff811115610b2d57610b2c61240e565b5b604051908082528060200260200182016040528015610b6057816020015b6060815260200190600190039081610b4b5790505b50905060005b83839050811015610c1357610be230858584818110610b8857610b87612ca1565b5b9050602002810190610b9a9190613172565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611adf565b828281518110610bf557610bf4612ca1565b5b60200260200101819052508080610c0b9061301d565b915050610b66565b5092915050565b610c2b610c25611131565b836113d9565b610c6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6190612c81565b60405180910390fd5b610c7684848484611b0c565b50505050565b6060610c8782611b68565b610cc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbd90613221565b60405180910390fd5b6000610cd0610513565b600a600c600b604051602001610ce994939291906134a2565b604051602081830303815290604052905080600d73__$73785166eb94af412e1735ba7ee7be91af$__639ed13796600e546040518263ffffffff1660e01b8152600401610d369190613526565b600060405180830381865af4158015610d53573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d7c91906135b1565b604051602001610d8e93929190613766565b604051602081830303815290604052905060005b600780549050811015610ea2578160078281548110610dc457610dc3612ca1565b5b906000526020600020016000836001901b60088881548110610de957610de8612ca1565b5b90600052602060002001541611610e35576040518060400160405280600981526020017fe69caae6a0b8e994800000000000000000000000000000000000000000000000815250610e6c565b6040518060400160405280600981526020017fe5b7b2e6a0b8e9948000000000000000000000000000000000000000000000008152505b604051602001610e7e93929190613850565b60405160208183030381529060405291508080610e9a9061301d565b915050610da2565b507f5d000000000000000000000000000000000000000000000000000000000000008160018351610ed391906138a2565b81518110610ee457610ee3612ca1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080604051602001610f249190613922565b6040516020818303038152906040529050610f3e81611bd4565b604051602001610f4e9190613990565b604051602081830303815290604052915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6110016111f9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106790613a24565b60405180910390fd5b611079816118ad565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6110ef81611b68565b61112e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611125906130b1565b60405180910390fd5b50565b600061113b611d37565b905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166111b3836108aa565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611201611131565b73ffffffffffffffffffffffffffffffffffffffff1661121f610a26565b73ffffffffffffffffffffffffffffffffffffffff1614611275576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126c90613a90565b60405180910390fd5b565b8073ffffffffffffffffffffffffffffffffffffffff16611297846108aa565b73ffffffffffffffffffffffffffffffffffffffff16146112ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e490613afc565b60405180910390fd5b6007805490508210611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132b90613b68565b60405180910390fd5b6000826001901b6008858154811061134f5761134e612ca1565b5b9060005260206000200154161461139b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139290613bd4565b60405180910390fd5b816001901b600884815481106113b4576113b3612ca1565b5b9060005260206000200160008282546113cd9190612cff565b92505081905550505050565b6000806113e5836108aa565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061142757506114268185610f65565b5b8061146557508373ffffffffffffffffffffffffffffffffffffffff1661144d846105a5565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661148e826108aa565b73ffffffffffffffffffffffffffffffffffffffff16146114e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114db90613c66565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154a90613cf8565b60405180910390fd5b61155e838383611d9d565b611569600082611140565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115b991906138a2565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116109190612cff565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116cf838383611da2565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173a90613d64565b60405180910390fd5b61174c81611b68565b1561178c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178390613dd0565b60405180910390fd5b61179860008383611d9d565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117e89190612cff565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46118a960008383611da2565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d890613e3c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ad29190612141565b60405180910390a3505050565b6060611b04838360405180606001604052806027815260200161415260279139611da7565b905092915050565b611b1784848461146e565b611b2384848484611e74565b611b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5990613ece565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60606000825103611bf657604051806020016040528060008152509050611d32565b60006040518060600160405280604081526020016141126040913990506000600360028551611c259190612cff565b611c2f9190613f1d565b6004611c3b9190613f4e565b67ffffffffffffffff811115611c5457611c5361240e565b5b6040519080825280601f01601f191660200182016040528015611c865781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611cf2576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050611c97565b5050600386510660018114611d0e5760028114611d2157611d29565b603d6001830353603d6002830353611d29565b603d60018303535b50505080925050505b919050565b600073c77fa7345679ccdbdb6204f0ca6a024be4abd00373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611d8f57601436033560601c9050611d9a565b611d97611ffb565b90505b90565b505050565b505050565b6060611db284612003565b611df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de890614002565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051611e199190614022565b600060405180830381855af49150503d8060008114611e54576040519150601f19603f3d011682016040523d82523d6000602084013e611e59565b606091505b5091509150611e69828286612026565b925050509392505050565b6000611e958473ffffffffffffffffffffffffffffffffffffffff16612003565b15611fee578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611ebe611131565b8786866040518563ffffffff1660e01b8152600401611ee09493929190614083565b6020604051808303816000875af1925050508015611f1c57506040513d601f19601f82011682018060405250810190611f1991906140e4565b60015b611f9e573d8060008114611f4c576040519150601f19603f3d011682016040523d82523d6000602084013e611f51565b606091505b506000815103611f96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8d90613ece565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611ff3565b600190505b949350505050565b600033905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561203657829050612086565b6000835111156120495782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207d91906121ec565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6120d6816120a1565b81146120e157600080fd5b50565b6000813590506120f3816120cd565b92915050565b60006020828403121561210f5761210e612097565b5b600061211d848285016120e4565b91505092915050565b60008115159050919050565b61213b81612126565b82525050565b60006020820190506121566000830184612132565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561219657808201518184015260208101905061217b565b60008484015250505050565b6000601f19601f8301169050919050565b60006121be8261215c565b6121c88185612167565b93506121d8818560208601612178565b6121e1816121a2565b840191505092915050565b6000602082019050818103600083015261220681846121b3565b905092915050565b6000819050919050565b6122218161220e565b811461222c57600080fd5b50565b60008135905061223e81612218565b92915050565b60006020828403121561225a57612259612097565b5b60006122688482850161222f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061229c82612271565b9050919050565b6122ac81612291565b82525050565b60006020820190506122c760008301846122a3565b92915050565b6122d681612291565b81146122e157600080fd5b50565b6000813590506122f3816122cd565b92915050565b600080604083850312156123105761230f612097565b5b600061231e858286016122e4565b925050602061232f8582860161222f565b9150509250929050565b60008060006060848603121561235257612351612097565b5b60006123608682870161222f565b93505060206123718682870161222f565b9250506040612382868287016122e4565b9150509250925092565b6123958161220e565b82525050565b60006020820190506123b0600083018461238c565b92915050565b6000806000606084860312156123cf576123ce612097565b5b60006123dd868287016122e4565b93505060206123ee868287016122e4565b92505060406123ff8682870161222f565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612446826121a2565b810181811067ffffffffffffffff821117156124655761246461240e565b5b80604052505050565b600061247861208d565b9050612484828261243d565b919050565b600067ffffffffffffffff8211156124a4576124a361240e565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156124da576124d961240e565b5b6124e3826121a2565b9050602081019050919050565b82818337600083830152505050565b600061251261250d846124bf565b61246e565b90508281526020810184848401111561252e5761252d6124ba565b5b6125398482856124f0565b509392505050565b600082601f83011261255657612555612409565b5b81356125668482602086016124ff565b91505092915050565b600061258261257d84612489565b61246e565b905080838252602082019050602084028301858111156125a5576125a46124b5565b5b835b818110156125ec57803567ffffffffffffffff8111156125ca576125c9612409565b5b8086016125d78982612541565b855260208501945050506020810190506125a7565b5050509392505050565b600082601f83011261260b5761260a612409565b5b813561261b84826020860161256f565b91505092915050565b60006020828403121561263a57612639612097565b5b600082013567ffffffffffffffff8111156126585761265761209c565b5b612664848285016125f6565b91505092915050565b60006020828403121561268357612682612097565b5b6000612691848285016122e4565b91505092915050565b600080604083850312156126b1576126b0612097565b5b60006126bf8582860161222f565b92505060206126d08582860161222f565b9150509250929050565b6126e381612126565b81146126ee57600080fd5b50565b600081359050612700816126da565b92915050565b6000806040838503121561271d5761271c612097565b5b600061272b858286016122e4565b925050602061273c858286016126f1565b9150509250929050565b600080fd5b60008083601f84011261276157612760612409565b5b8235905067ffffffffffffffff81111561277e5761277d612746565b5b60208301915083602082028301111561279a576127996124b5565b5b9250929050565b600080602083850312156127b8576127b7612097565b5b600083013567ffffffffffffffff8111156127d6576127d561209c565b5b6127e28582860161274b565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60006128418261281a565b61284b8185612825565b935061285b818560208601612178565b612864816121a2565b840191505092915050565b600061287b8383612836565b905092915050565b6000602082019050919050565b600061289b826127ee565b6128a581856127f9565b9350836020820285016128b78561280a565b8060005b858110156128f357848403895281516128d4858261286f565b94506128df83612883565b925060208a019950506001810190506128bb565b50829750879550505050505092915050565b6000602082019050818103600083015261291f8184612890565b905092915050565b600067ffffffffffffffff8211156129425761294161240e565b5b61294b826121a2565b9050602081019050919050565b600061296b61296684612927565b61246e565b905082815260208101848484011115612987576129866124ba565b5b6129928482856124f0565b509392505050565b600082601f8301126129af576129ae612409565b5b81356129bf848260208601612958565b91505092915050565b600080600080608085870312156129e2576129e1612097565b5b60006129f0878288016122e4565b9450506020612a01878288016122e4565b9350506040612a128782880161222f565b925050606085013567ffffffffffffffff811115612a3357612a3261209c565b5b612a3f8782880161299a565b91505092959194509250565b60008060408385031215612a6257612a61612097565b5b6000612a70858286016122e4565b9250506020612a81858286016122e4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ad257607f821691505b602082108103612ae557612ae4612a8b565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b47602183612167565b9150612b5282612aeb565b604082019050919050565b60006020820190508181036000830152612b7681612b3a565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612bd9603e83612167565b9150612be482612b7d565b604082019050919050565b60006020820190508181036000830152612c0881612bcc565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612c6b602e83612167565b9150612c7682612c0f565b604082019050919050565b60006020820190508181036000830152612c9a81612c5e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d0a8261220e565b9150612d158361220e565b9250828201905080821115612d2d57612d2c612cd0565b5b92915050565b7f4d617820726967687473206f766572204d41585f726967687473000000000000600082015250565b6000612d69601a83612167565b9150612d7482612d33565b602082019050919050565b60006020820190508181036000830152612d9881612d5c565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612e017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612dc4565b612e0b8683612dc4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612e48612e43612e3e8461220e565b612e23565b61220e565b9050919050565b6000819050919050565b612e6283612e2d565b612e76612e6e82612e4f565b848454612dd1565b825550505050565b600090565b612e8b612e7e565b612e96818484612e59565b505050565b5b81811015612eba57612eaf600082612e83565b600181019050612e9c565b5050565b601f821115612eff57612ed081612d9f565b612ed984612db4565b81016020851015612ee8578190505b612efc612ef485612db4565b830182612e9b565b50505b505050565b600082821c905092915050565b6000612f2260001984600802612f04565b1980831691505092915050565b6000612f3b8383612f11565b9150826002028217905092915050565b612f548261215c565b67ffffffffffffffff811115612f6d57612f6c61240e565b5b612f778254612aba565b612f82828285612ebe565b600060209050601f831160018114612fb55760008415612fa3578287015190505b612fad8582612f2f565b865550613015565b601f198416612fc386612d9f565b60005b82811015612feb57848901518255600182019150602085019450602081019050612fc6565b868310156130085784890151613004601f891682612f11565b8355505b6001600288020188555050505b505050505050565b60006130288261220e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361305a57613059612cd0565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061309b601883612167565b91506130a682613065565b602082019050919050565b600060208201905081810360008301526130ca8161308e565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061312d602983612167565b9150613138826130d1565b604082019050919050565b6000602082019050818103600083015261315c81613120565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261318f5761318e613163565b5b80840192508235915067ffffffffffffffff8211156131b1576131b0613168565b5b6020830192506001820236038313156131cd576131cc61316d565b5b509250929050565b7f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000600082015250565b600061320b601183612167565b9150613216826131d5565b602082019050919050565b6000602082019050818103600083015261323a816131fe565b9050919050565b600081905092915050565b7f7b226e616d65223a202200000000000000000000000000000000000000000000600082015250565b6000613282600a83613241565b915061328d8261324c565b600a82019050919050565b60006132a38261215c565b6132ad8185613241565b93506132bd818560208601612178565b80840191505092915050565b7f222c20226465736372697074696f6e223a202200000000000000000000000000600082015250565b60006132ff601383613241565b915061330a826132c9565b601382019050919050565b6000815461332281612aba565b61332c8186613241565b94506001821660008114613347576001811461335c5761338f565b60ff198316865281151582028601935061338f565b61336585612d9f565b60005b8381101561338757815481890152600182019150602081019050613368565b838801955050505b50505092915050565b7f222c202264657461696c73223a20220000000000000000000000000000000000600082015250565b60006133ce600f83613241565b91506133d982613398565b600f82019050919050565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b600061341a600d83613241565b9150613425826133e4565b600d82019050919050565b7f222c202264657369676e6572223a202269736f746f702e746f70222c2022617460008201527f7472696275746573223a205b0000000000000000000000000000000000000000602082015250565b600061348c602c83613241565b915061349782613430565b602c82019050919050565b60006134ad82613275565b91506134b98287613298565b91506134c4826132f2565b91506134d08286613315565b91506134db826133c1565b91506134e78285613315565b91506134f28261340d565b91506134fe8284613315565b91506135098261347f565b915081905095945050505050565b6135208161220e565b82525050565b600060208201905061353b6000830184613517565b92915050565b600061355461354f846124bf565b61246e565b9050828152602081018484840111156135705761356f6124ba565b5b61357b848285612178565b509392505050565b600082601f83011261359857613597612409565b5b81516135a8848260208601613541565b91505092915050565b6000602082840312156135c7576135c6612097565b5b600082015167ffffffffffffffff8111156135e5576135e461209c565b5b6135f184828501613583565b91505092915050565b600081905092915050565b60006136108261281a565b61361a81856135fa565b935061362a818560208601612178565b80840191505092915050565b7f7b2274726169745f74797065223a2022e58f91e8a18ce696b9444944222c227660008201527f616c7565223a2022000000000000000000000000000000000000000000000000602082015250565b6000613692602883613241565b915061369d82613636565b602882019050919050565b7f227d2c207b2274726169745f74797065223a2022e69c89e69588e69c9f222c2260008201527f76616c7565223a20220000000000000000000000000000000000000000000000602082015250565b6000613704602983613241565b915061370f826136a8565b602982019050919050565b7f227d2c0000000000000000000000000000000000000000000000000000000000600082015250565b6000613750600383613241565b915061375b8261371a565b600382019050919050565b60006137728286613605565b915061377d82613685565b91506137898285613315565b9150613794826136f7565b91506137a08284613298565b91506137ab82613743565b9150819050949350505050565b7f7b2274726169745f74797065223a202200000000000000000000000000000000600082015250565b60006137ee601083613241565b91506137f9826137b8565b601082019050919050565b7f222c2276616c7565223a20220000000000000000000000000000000000000000600082015250565b600061383a600c83613241565b915061384582613804565b600c82019050919050565b600061385c8286613605565b9150613867826137e1565b91506138738285613315565b915061387e8261382d565b915061388a8284613298565b915061389582613743565b9150819050949350505050565b60006138ad8261220e565b91506138b88361220e565b92508282039050818111156138d0576138cf612cd0565b5b92915050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b600061390c600183613241565b9150613917826138d6565b600182019050919050565b600061392e8284613605565b9150613939826138ff565b915081905092915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b600061397a601d83613241565b915061398582613944565b601d82019050919050565b600061399b8261396d565b91506139a78284613298565b915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613a0e602683612167565b9150613a19826139b2565b604082019050919050565b60006020820190508181036000830152613a3d81613a01565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613a7a602083612167565b9150613a8582613a44565b602082019050919050565b60006020820190508181036000830152613aa981613a6d565b9050919050565b7f4f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b6000613ae6600a83612167565b9150613af182613ab0565b602082019050919050565b60006020820190508181036000830152613b1581613ad9565b9050919050565b7f726967687473206f766572666c6f770000000000000000000000000000000000600082015250565b6000613b52600f83612167565b9150613b5d82613b1c565b602082019050919050565b60006020820190508181036000830152613b8181613b45565b9050919050565b7f436865636b656420416c72656164790000000000000000000000000000000000600082015250565b6000613bbe600f83612167565b9150613bc982613b88565b602082019050919050565b60006020820190508181036000830152613bed81613bb1565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613c50602583612167565b9150613c5b82613bf4565b604082019050919050565b60006020820190508181036000830152613c7f81613c43565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613ce2602483612167565b9150613ced82613c86565b604082019050919050565b60006020820190508181036000830152613d1181613cd5565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613d4e602083612167565b9150613d5982613d18565b602082019050919050565b60006020820190508181036000830152613d7d81613d41565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613dba601c83612167565b9150613dc582613d84565b602082019050919050565b60006020820190508181036000830152613de981613dad565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613e26601983612167565b9150613e3182613df0565b602082019050919050565b60006020820190508181036000830152613e5581613e19565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613eb8603283612167565b9150613ec382613e5c565b604082019050919050565b60006020820190508181036000830152613ee781613eab565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613f288261220e565b9150613f338361220e565b925082613f4357613f42613eee565b5b828204905092915050565b6000613f598261220e565b9150613f648361220e565b9250828202613f728161220e565b91508282048414831517613f8957613f88612cd0565b5b5092915050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000613fec602683612167565b9150613ff782613f90565b604082019050919050565b6000602082019050818103600083015261401b81613fdf565b9050919050565b600061402e8284613605565b915081905092915050565b600082825260208201905092915050565b60006140558261281a565b61405f8185614039565b935061406f818560208601612178565b614078816121a2565b840191505092915050565b600060808201905061409860008301876122a3565b6140a560208301866122a3565b6140b2604083018561238c565b81810360608301526140c4818461404a565b905095945050505050565b6000815190506140de816120cd565b92915050565b6000602082840312156140fa576140f9612097565b5b6000614108848285016140cf565b9150509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b3081b8dfb6cea6486bc86dd3b28027107cb7e0f03a9c2ed130ad9e6634479f464736f6c63430008130033",
}

// ETicketABI is the input ABI used to generate the binding from.
// Deprecated: Use ETicketMetaData.ABI instead.
var ETicketABI = ETicketMetaData.ABI

// ETicketBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETicketMetaData.Bin instead.
var ETicketBin = ETicketMetaData.Bin

// DeployETicket deploys a new Ethereum contract, binding an instance of ETicket to it.
func DeployETicket(auth *bind.TransactOpts, backend bind.ContractBackend, _info []string, rights_ []string, _totalSupply *big.Int, _validTime *big.Int) (common.Address, *types.Transaction, *ETicket, error) {
	parsed, err := ETicketMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETicketBin), backend, _info, rights_, _totalSupply, _validTime)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETicket{ETicketCaller: ETicketCaller{contract: contract}, ETicketTransactor: ETicketTransactor{contract: contract}, ETicketFilterer: ETicketFilterer{contract: contract}}, nil
}

// ETicket is an auto generated Go binding around an Ethereum contract.
type ETicket struct {
	ETicketCaller     // Read-only binding to the contract
	ETicketTransactor // Write-only binding to the contract
	ETicketFilterer   // Log filterer for contract events
}

// ETicketCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETicketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETicketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETicketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETicketSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETicketSession struct {
	Contract     *ETicket          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETicketCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETicketCallerSession struct {
	Contract *ETicketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ETicketTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETicketTransactorSession struct {
	Contract     *ETicketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ETicketRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETicketRaw struct {
	Contract *ETicket // Generic contract binding to access the raw methods on
}

// ETicketCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETicketCallerRaw struct {
	Contract *ETicketCaller // Generic read-only contract binding to access the raw methods on
}

// ETicketTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETicketTransactorRaw struct {
	Contract *ETicketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETicket creates a new instance of ETicket, bound to a specific deployed contract.
func NewETicket(address common.Address, backend bind.ContractBackend) (*ETicket, error) {
	contract, err := bindETicket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETicket{ETicketCaller: ETicketCaller{contract: contract}, ETicketTransactor: ETicketTransactor{contract: contract}, ETicketFilterer: ETicketFilterer{contract: contract}}, nil
}

// NewETicketCaller creates a new read-only instance of ETicket, bound to a specific deployed contract.
func NewETicketCaller(address common.Address, caller bind.ContractCaller) (*ETicketCaller, error) {
	contract, err := bindETicket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETicketCaller{contract: contract}, nil
}

// NewETicketTransactor creates a new write-only instance of ETicket, bound to a specific deployed contract.
func NewETicketTransactor(address common.Address, transactor bind.ContractTransactor) (*ETicketTransactor, error) {
	contract, err := bindETicket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETicketTransactor{contract: contract}, nil
}

// NewETicketFilterer creates a new log filterer instance of ETicket, bound to a specific deployed contract.
func NewETicketFilterer(address common.Address, filterer bind.ContractFilterer) (*ETicketFilterer, error) {
	contract, err := bindETicket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETicketFilterer{contract: contract}, nil
}

// bindETicket binds a generic wrapper to an already deployed contract.
func bindETicket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ETicketMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETicket *ETicketRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETicket.Contract.ETicketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETicket *ETicketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.Contract.ETicketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETicket *ETicketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETicket.Contract.ETicketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETicket *ETicketCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETicket.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETicket *ETicketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETicket *ETicketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETicket.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ETicket.Contract.BalanceOf(&_ETicket.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ETicket *ETicketCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ETicket.Contract.BalanceOf(&_ETicket.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.GetApproved(&_ETicket.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.GetApproved(&_ETicket.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ETicket.Contract.IsApprovedForAll(&_ETicket.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ETicket *ETicketCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ETicket.Contract.IsApprovedForAll(&_ETicket.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketSession) Name() (string, error) {
	return _ETicket.Contract.Name(&_ETicket.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ETicket *ETicketCallerSession) Name() (string, error) {
	return _ETicket.Contract.Name(&_ETicket.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketSession) Owner() (common.Address, error) {
	return _ETicket.Contract.Owner(&_ETicket.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ETicket *ETicketCallerSession) Owner() (common.Address, error) {
	return _ETicket.Contract.Owner(&_ETicket.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.OwnerOf(&_ETicket.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ETicket *ETicketCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ETicket.Contract.OwnerOf(&_ETicket.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ETicket.Contract.SupportsInterface(&_ETicket.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ETicket *ETicketCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ETicket.Contract.SupportsInterface(&_ETicket.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketSession) Symbol() (string, error) {
	return _ETicket.Contract.Symbol(&_ETicket.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ETicket *ETicketCallerSession) Symbol() (string, error) {
	return _ETicket.Contract.Symbol(&_ETicket.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ETicket.Contract.TokenURI(&_ETicket.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ETicket *ETicketCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ETicket.Contract.TokenURI(&_ETicket.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ETicket *ETicketCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETicket.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ETicket *ETicketSession) TotalSupply() (*big.Int, error) {
	return _ETicket.Contract.TotalSupply(&_ETicket.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ETicket *ETicketCallerSession) TotalSupply() (*big.Int, error) {
	return _ETicket.Contract.TotalSupply(&_ETicket.CallOpts)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] rights_) returns()
func (_ETicket *ETicketTransactor) AddRights(opts *bind.TransactOpts, rights_ []string) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "addRights", rights_)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] rights_) returns()
func (_ETicket *ETicketSession) AddRights(rights_ []string) (*types.Transaction, error) {
	return _ETicket.Contract.AddRights(&_ETicket.TransactOpts, rights_)
}

// AddRights is a paid mutator transaction binding the contract method 0x415dd877.
//
// Solidity: function addRights(string[] rights_) returns()
func (_ETicket *ETicketTransactorSession) AddRights(rights_ []string) (*types.Transaction, error) {
	return _ETicket.Contract.AddRights(&_ETicket.TransactOpts, rights_)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ETicket *ETicketSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Approve(&_ETicket.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Approve(&_ETicket.TransactOpts, to, tokenId)
}

// Check is a paid mutator transaction binding the contract method 0x0ded480e.
//
// Solidity: function check(uint256 tokenId, uint256 _site, address _who) returns()
func (_ETicket *ETicketTransactor) Check(opts *bind.TransactOpts, tokenId *big.Int, _site *big.Int, _who common.Address) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "check", tokenId, _site, _who)
}

// Check is a paid mutator transaction binding the contract method 0x0ded480e.
//
// Solidity: function check(uint256 tokenId, uint256 _site, address _who) returns()
func (_ETicket *ETicketSession) Check(tokenId *big.Int, _site *big.Int, _who common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.Check(&_ETicket.TransactOpts, tokenId, _site, _who)
}

// Check is a paid mutator transaction binding the contract method 0x0ded480e.
//
// Solidity: function check(uint256 tokenId, uint256 _site, address _who) returns()
func (_ETicket *ETicketTransactorSession) Check(tokenId *big.Int, _site *big.Int, _who common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.Check(&_ETicket.TransactOpts, tokenId, _site, _who)
}

// Check0 is a paid mutator transaction binding the contract method 0x8fefd8ea.
//
// Solidity: function check(uint256 tokenId, uint256 _site) returns()
func (_ETicket *ETicketTransactor) Check0(opts *bind.TransactOpts, tokenId *big.Int, _site *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "check0", tokenId, _site)
}

// Check0 is a paid mutator transaction binding the contract method 0x8fefd8ea.
//
// Solidity: function check(uint256 tokenId, uint256 _site) returns()
func (_ETicket *ETicketSession) Check0(tokenId *big.Int, _site *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Check0(&_ETicket.TransactOpts, tokenId, _site)
}

// Check0 is a paid mutator transaction binding the contract method 0x8fefd8ea.
//
// Solidity: function check(uint256 tokenId, uint256 _site) returns()
func (_ETicket *ETicketTransactorSession) Check0(tokenId *big.Int, _site *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Check0(&_ETicket.TransactOpts, tokenId, _site)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactor) Mint(opts *bind.TransactOpts, _to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "mint", _to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 tokenId) returns()
func (_ETicket *ETicketSession) Mint(_to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Mint(&_ETicket.TransactOpts, _to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactorSession) Mint(_to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.Mint(&_ETicket.TransactOpts, _to, tokenId)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ETicket *ETicketTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ETicket *ETicketSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _ETicket.Contract.Multicall(&_ETicket.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ETicket *ETicketTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _ETicket.Contract.Multicall(&_ETicket.TransactOpts, data)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketSession) RenounceOwnership() (*types.Transaction, error) {
	return _ETicket.Contract.RenounceOwnership(&_ETicket.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ETicket *ETicketTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ETicket.Contract.RenounceOwnership(&_ETicket.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ETicket *ETicketTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ETicket *ETicketSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom0(&_ETicket.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ETicket *ETicketTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ETicket.Contract.SafeTransferFrom0(&_ETicket.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.Contract.SetApprovalForAll(&_ETicket.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ETicket *ETicketTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ETicket.Contract.SetApprovalForAll(&_ETicket.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.TransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ETicket *ETicketTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ETicket.Contract.TransferFrom(&_ETicket.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.TransferOwnership(&_ETicket.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ETicket *ETicketTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ETicket.Contract.TransferOwnership(&_ETicket.TransactOpts, newOwner)
}

// ETicketApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ETicket contract.
type ETicketApprovalIterator struct {
	Event *ETicketApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketApproval represents a Approval event raised by the ETicket contract.
type ETicketApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ETicketApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ETicketApprovalIterator{contract: _ETicket.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ETicketApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketApproval)
				if err := _ETicket.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) ParseApproval(log types.Log) (*ETicketApproval, error) {
	event := new(ETicketApproval)
	if err := _ETicket.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ETicket contract.
type ETicketApprovalForAllIterator struct {
	Event *ETicketApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketApprovalForAll represents a ApprovalForAll event raised by the ETicket contract.
type ETicketApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ETicketApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ETicketApprovalForAllIterator{contract: _ETicket.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ETicketApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketApprovalForAll)
				if err := _ETicket.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ETicket *ETicketFilterer) ParseApprovalForAll(log types.Log) (*ETicketApprovalForAll, error) {
	event := new(ETicketApprovalForAll)
	if err := _ETicket.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ETicket contract.
type ETicketOwnershipTransferredIterator struct {
	Event *ETicketOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketOwnershipTransferred represents a OwnershipTransferred event raised by the ETicket contract.
type ETicketOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ETicketOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ETicketOwnershipTransferredIterator{contract: _ETicket.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ETicketOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketOwnershipTransferred)
				if err := _ETicket.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ETicket *ETicketFilterer) ParseOwnershipTransferred(log types.Log) (*ETicketOwnershipTransferred, error) {
	event := new(ETicketOwnershipTransferred)
	if err := _ETicket.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETicketTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ETicket contract.
type ETicketTransferIterator struct {
	Event *ETicketTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETicketTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETicketTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETicketTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETicketTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETicketTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETicketTransfer represents a Transfer event raised by the ETicket contract.
type ETicketTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ETicketTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ETicketTransferIterator{contract: _ETicket.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ETicketTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ETicket.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETicketTransfer)
				if err := _ETicket.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ETicket *ETicketFilterer) ParseTransfer(log types.Log) (*ETicketTransfer, error) {
	event := new(ETicketTransfer)
	if err := _ETicket.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
