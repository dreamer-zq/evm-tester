// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TicketGameMetaData contains all meta data concerning the TicketGame contract.
var TicketGameMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"name\":\"batchRedeem\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f5469636b657447616d65000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f7469636b6574000000000000000000000000000000000000000000000000000081525081600090816200008f919062000324565b508060019081620000a1919062000324565b5050506200040b565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200012c57607f821691505b602082108103620001425762000141620000e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200016d565b620001b886836200016d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000205620001ff620001f984620001d0565b620001da565b620001d0565b9050919050565b6000819050919050565b6200022183620001e4565b6200023962000230826200020c565b8484546200017a565b825550505050565b600090565b6200025062000241565b6200025d81848462000216565b505050565b5b8181101562000285576200027960008262000246565b60018101905062000263565b5050565b601f821115620002d4576200029e8162000148565b620002a9846200015d565b81016020851015620002b9578190505b620002d1620002c8856200015d565b83018262000262565b50505b505050565b600082821c905092915050565b6000620002f960001984600802620002d9565b1980831691505092915050565b6000620003148383620002e6565b9150826002028217905092915050565b6200032f82620000aa565b67ffffffffffffffff8111156200034b576200034a620000b5565b5b62000357825462000113565b6200036482828562000289565b600060209050601f8311600181146200039c576000841562000387578287015190505b62000393858262000306565b86555062000403565b601f198416620003ac8662000148565b60005b82811015620003d657848901518255600182019150602085019450602081019050620003af565b86831015620003f65784890151620003f2601f891682620002e6565b8355505b6001600288020188555050505b505050505050565b61322e806200041b6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063c87b56dd11610066578063c87b56dd14610282578063cef9341a146102b2578063e985e9c5146102e2578063f62e785114610312576100f5565b806370a08231146101fc57806395d89b411461022c578063a22cb4651461024a578063b88d4fde14610266576100f5565b8063095ea7b3116100d3578063095ea7b31461017857806323b872dd1461019457806342842e0e146101b05780636352211e146101cc576100f5565b806301ffc9a7146100fa57806306fdde031461012a578063081812fc14610148575b600080fd5b610114600480360381019061010f9190611b8c565b610342565b6040516101219190611bd4565b60405180910390f35b6101326103a3565b60405161013f9190611c7f565b60405180910390f35b610162600480360381019061015d9190611cd7565b610435565b60405161016f9190611d45565b60405180910390f35b610192600480360381019061018d9190611d8c565b61047b565b005b6101ae60048036038101906101a99190611dcc565b610592565b005b6101ca60048036038101906101c59190611dcc565b6105f2565b005b6101e660048036038101906101e19190611cd7565b610612565b6040516101f39190611d45565b60405180910390f35b61021660048036038101906102119190611e1f565b610698565b6040516102239190611e5b565b60405180910390f35b61023461074f565b6040516102419190611c7f565b60405180910390f35b610264600480360381019061025f9190611ea2565b6107e1565b005b610280600480360381019061027b9190612017565b6107f7565b005b61029c60048036038101906102979190611cd7565b610859565b6040516102a99190611c7f565b60405180910390f35b6102cc60048036038101906102c791906122e4565b61096b565b6040516102d9919061241a565b60405180910390f35b6102fc60048036038101906102f7919061243c565b610b09565b6040516103099190611bd4565b60405180910390f35b61032c6004803603810190610327919061247c565b610b9d565b6040516103399190611e5b565b60405180910390f35b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061039c575061039b82610bdd565b5b9050919050565b6060600080546103b290612507565b80601f01602080910402602001604051908101604052809291908181526020018280546103de90612507565b801561042b5780601f106104005761010080835404028352916020019161042b565b820191906000526020600020905b81548152906001019060200180831161040e57829003601f168201915b5050505050905090565b600061044082610cbf565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061048682610612565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ed906125aa565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610515610d0a565b73ffffffffffffffffffffffffffffffffffffffff16148061054457506105438161053e610d0a565b610b09565b5b610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a9061263c565b60405180910390fd5b61058d8383610d12565b505050565b6105a361059d610d0a565b82610dcb565b6105e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d9906126ce565b60405180910390fd5b6105ed838383610e60565b505050565b61060d838383604051806020016040528060008152506107f7565b505050565b60008061061e83611159565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106869061273a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ff906127cc565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075e90612507565b80601f016020809104026020016040519081016040528092919081815260200182805461078a90612507565b80156107d75780601f106107ac576101008083540402835291602001916107d7565b820191906000526020600020905b8154815290600101906020018083116107ba57829003601f168201915b5050505050905090565b6107f36107ec610d0a565b8383611196565b5050565b610808610802610d0a565b83610dcb565b610847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083e906126ce565b60405180910390fd5b61085384848484611302565b50505050565b606061086482610cbf565b600060066000848152602001908152602001600020805461088490612507565b80601f01602080910402602001604051908101604052809291908181526020018280546108b090612507565b80156108fd5780601f106108d2576101008083540402835291602001916108fd565b820191906000526020600020905b8154815290600101906020018083116108e057829003601f168201915b50505050509050600061090e61135e565b90506000815103610923578192505050610966565b600082511115610958578082604051602001610940929190612828565b60405160208183030381529060405292505050610966565b61096184611375565b925050505b919050565b606060008351116109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906128be565b60405180910390fd5b6103e88351106109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90612950565b60405180910390fd5b8151835114610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a31906129e2565b60405180910390fd5b825167ffffffffffffffff811115610a5557610a54611eec565b5b604051908082528060200260200182016040528015610a835781602001602082028036833780820191505090505b50905060005b8351811015610b0257610ad0848281518110610aa857610aa7612a02565b5b6020026020010151848381518110610ac357610ac2612a02565b5b6020026020010151610b9d565b828281518110610ae357610ae2612a02565b5b6020026020010181815250508080610afa90612a60565b915050610a89565b5092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806007549050610baf84826113dd565b610bb981846115fa565b600160076000828254610bcc9190612aa8565b925050819055508091505092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610ca857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610cb85750610cb78261169e565b5b9050919050565b610cc881611708565b610d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfe9061273a565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610d8583610612565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610dd783610612565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610e195750610e188185610b09565b5b80610e5757508373ffffffffffffffffffffffffffffffffffffffff16610e3f84610435565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e8082610612565b73ffffffffffffffffffffffffffffffffffffffff1614610ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecd90612b4e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3c90612be0565b60405180910390fd5b610f528383836001611749565b8273ffffffffffffffffffffffffffffffffffffffff16610f7282610612565b73ffffffffffffffffffffffffffffffffffffffff1614610fc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbf90612b4e565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611154838383600161174f565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fb90612c4c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516112f59190611bd4565b60405180910390a3505050565b61130d848484610e60565b61131984848484611755565b611358576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134f90612cde565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061138082610cbf565b600061138a61135e565b905060008151116113aa57604051806020016040528060008152506113d5565b806113b4846118dc565b6040516020016113c5929190612828565b6040516020818303038152906040525b915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361144c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144390612d4a565b60405180910390fd5b61145581611708565b15611495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148c90612db6565b60405180910390fd5b6114a3600083836001611749565b6114ac81611708565b156114ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e390612db6565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115f660008383600161174f565b5050565b61160382611708565b611642576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163990612e48565b60405180910390fd5b806006600084815260200190815260200160002090816116629190613014565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516116929190611e5b565b60405180910390a15050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661172a83611159565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006117768473ffffffffffffffffffffffffffffffffffffffff166119aa565b156118cf578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261179f610d0a565b8786866040518563ffffffff1660e01b81526004016117c1949392919061313b565b6020604051808303816000875af19250505080156117fd57506040513d601f19601f820116820180604052508101906117fa919061319c565b60015b61187f573d806000811461182d576040519150601f19603f3d011682016040523d82523d6000602084013e611832565b606091505b506000815103611877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186e90612cde565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506118d4565b600190505b949350505050565b6060600060016118eb846119cd565b01905060008167ffffffffffffffff81111561190a57611909611eec565b5b6040519080825280601f01601f19166020018201604052801561193c5781602001600182028036833780820191505090505b509050600082602001820190505b60011561199f578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611993576119926131c9565b5b0494506000850361194a575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611a2b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611a2157611a206131c9565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611a68576d04ee2d6d415b85acef81000000008381611a5e57611a5d6131c9565b5b0492506020810190505b662386f26fc100008310611a9757662386f26fc100008381611a8d57611a8c6131c9565b5b0492506010810190505b6305f5e1008310611ac0576305f5e1008381611ab657611ab56131c9565b5b0492506008810190505b6127108310611ae5576127108381611adb57611ada6131c9565b5b0492506004810190505b60648310611b085760648381611afe57611afd6131c9565b5b0492506002810190505b600a8310611b17576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b6981611b34565b8114611b7457600080fd5b50565b600081359050611b8681611b60565b92915050565b600060208284031215611ba257611ba1611b2a565b5b6000611bb084828501611b77565b91505092915050565b60008115159050919050565b611bce81611bb9565b82525050565b6000602082019050611be96000830184611bc5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c29578082015181840152602081019050611c0e565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c5182611bef565b611c5b8185611bfa565b9350611c6b818560208601611c0b565b611c7481611c35565b840191505092915050565b60006020820190508181036000830152611c998184611c46565b905092915050565b6000819050919050565b611cb481611ca1565b8114611cbf57600080fd5b50565b600081359050611cd181611cab565b92915050565b600060208284031215611ced57611cec611b2a565b5b6000611cfb84828501611cc2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d2f82611d04565b9050919050565b611d3f81611d24565b82525050565b6000602082019050611d5a6000830184611d36565b92915050565b611d6981611d24565b8114611d7457600080fd5b50565b600081359050611d8681611d60565b92915050565b60008060408385031215611da357611da2611b2a565b5b6000611db185828601611d77565b9250506020611dc285828601611cc2565b9150509250929050565b600080600060608486031215611de557611de4611b2a565b5b6000611df386828701611d77565b9350506020611e0486828701611d77565b9250506040611e1586828701611cc2565b9150509250925092565b600060208284031215611e3557611e34611b2a565b5b6000611e4384828501611d77565b91505092915050565b611e5581611ca1565b82525050565b6000602082019050611e706000830184611e4c565b92915050565b611e7f81611bb9565b8114611e8a57600080fd5b50565b600081359050611e9c81611e76565b92915050565b60008060408385031215611eb957611eb8611b2a565b5b6000611ec785828601611d77565b9250506020611ed885828601611e8d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f2482611c35565b810181811067ffffffffffffffff82111715611f4357611f42611eec565b5b80604052505050565b6000611f56611b20565b9050611f628282611f1b565b919050565b600067ffffffffffffffff821115611f8257611f81611eec565b5b611f8b82611c35565b9050602081019050919050565b82818337600083830152505050565b6000611fba611fb584611f67565b611f4c565b905082815260208101848484011115611fd657611fd5611ee7565b5b611fe1848285611f98565b509392505050565b600082601f830112611ffe57611ffd611ee2565b5b813561200e848260208601611fa7565b91505092915050565b6000806000806080858703121561203157612030611b2a565b5b600061203f87828801611d77565b945050602061205087828801611d77565b935050604061206187828801611cc2565b925050606085013567ffffffffffffffff81111561208257612081611b2f565b5b61208e87828801611fe9565b91505092959194509250565b600067ffffffffffffffff8211156120b5576120b4611eec565b5b602082029050602081019050919050565b600080fd5b60006120de6120d98461209a565b611f4c565b90508083825260208201905060208402830185811115612101576121006120c6565b5b835b8181101561212a57806121168882611d77565b845260208401935050602081019050612103565b5050509392505050565b600082601f83011261214957612148611ee2565b5b81356121598482602086016120cb565b91505092915050565b600067ffffffffffffffff82111561217d5761217c611eec565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156121a9576121a8611eec565b5b6121b282611c35565b9050602081019050919050565b60006121d26121cd8461218e565b611f4c565b9050828152602081018484840111156121ee576121ed611ee7565b5b6121f9848285611f98565b509392505050565b600082601f83011261221657612215611ee2565b5b81356122268482602086016121bf565b91505092915050565b600061224261223d84612162565b611f4c565b90508083825260208201905060208402830185811115612265576122646120c6565b5b835b818110156122ac57803567ffffffffffffffff81111561228a57612289611ee2565b5b8086016122978982612201565b85526020850194505050602081019050612267565b5050509392505050565b600082601f8301126122cb576122ca611ee2565b5b81356122db84826020860161222f565b91505092915050565b600080604083850312156122fb576122fa611b2a565b5b600083013567ffffffffffffffff81111561231957612318611b2f565b5b61232585828601612134565b925050602083013567ffffffffffffffff81111561234657612345611b2f565b5b612352858286016122b6565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61239181611ca1565b82525050565b60006123a38383612388565b60208301905092915050565b6000602082019050919050565b60006123c78261235c565b6123d18185612367565b93506123dc83612378565b8060005b8381101561240d5781516123f48882612397565b97506123ff836123af565b9250506001810190506123e0565b5085935050505092915050565b6000602082019050818103600083015261243481846123bc565b905092915050565b6000806040838503121561245357612452611b2a565b5b600061246185828601611d77565b925050602061247285828601611d77565b9150509250929050565b6000806040838503121561249357612492611b2a565b5b60006124a185828601611d77565b925050602083013567ffffffffffffffff8111156124c2576124c1611b2f565b5b6124ce85828601612201565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061251f57607f821691505b602082108103612532576125316124d8565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612594602183611bfa565b915061259f82612538565b604082019050919050565b600060208201905081810360008301526125c381612587565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612626603d83611bfa565b9150612631826125ca565b604082019050919050565b6000602082019050818103600083015261265581612619565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006126b8602d83611bfa565b91506126c38261265c565b604082019050919050565b600060208201905081810360008301526126e7816126ab565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612724601883611bfa565b915061272f826126ee565b602082019050919050565b6000602082019050818103600083015261275381612717565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006127b6602983611bfa565b91506127c18261275a565b604082019050919050565b600060208201905081810360008301526127e5816127a9565b9050919050565b600081905092915050565b600061280282611bef565b61280c81856127ec565b935061281c818560208601611c0b565b80840191505092915050565b600061283482856127f7565b915061284082846127f7565b91508190509392505050565b7f706c61796572732e6c656e677468206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b60006128a8602583611bfa565b91506128b38261284c565b604082019050919050565b600060208201905081810360008301526128d78161289b565b9050919050565b7f706c61796572732e6c656e677468206d757374206265206c657373207468616e60008201527f2031303030000000000000000000000000000000000000000000000000000000602082015250565b600061293a602583611bfa565b9150612945826128de565b604082019050919050565b600060208201905081810360008301526129698161292d565b9050919050565b7f706c61796572732e6c656e677468206e6f7420657175616c20746f6b656e555260008201527f49732e6c656e6774680000000000000000000000000000000000000000000000602082015250565b60006129cc602983611bfa565b91506129d782612970565b604082019050919050565b600060208201905081810360008301526129fb816129bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a6b82611ca1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a9d57612a9c612a31565b5b600182019050919050565b6000612ab382611ca1565b9150612abe83611ca1565b9250828201905080821115612ad657612ad5612a31565b5b92915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612b38602583611bfa565b9150612b4382612adc565b604082019050919050565b60006020820190508181036000830152612b6781612b2b565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612bca602483611bfa565b9150612bd582612b6e565b604082019050919050565b60006020820190508181036000830152612bf981612bbd565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612c36601983611bfa565b9150612c4182612c00565b602082019050919050565b60006020820190508181036000830152612c6581612c29565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612cc8603283611bfa565b9150612cd382612c6c565b604082019050919050565b60006020820190508181036000830152612cf781612cbb565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612d34602083611bfa565b9150612d3f82612cfe565b602082019050919050565b60006020820190508181036000830152612d6381612d27565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612da0601c83611bfa565b9150612dab82612d6a565b602082019050919050565b60006020820190508181036000830152612dcf81612d93565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612e32602e83611bfa565b9150612e3d82612dd6565b604082019050919050565b60006020820190508181036000830152612e6181612e25565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612eca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e8d565b612ed48683612e8d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612f11612f0c612f0784611ca1565b612eec565b611ca1565b9050919050565b6000819050919050565b612f2b83612ef6565b612f3f612f3782612f18565b848454612e9a565b825550505050565b600090565b612f54612f47565b612f5f818484612f22565b505050565b5b81811015612f8357612f78600082612f4c565b600181019050612f65565b5050565b601f821115612fc857612f9981612e68565b612fa284612e7d565b81016020851015612fb1578190505b612fc5612fbd85612e7d565b830182612f64565b50505b505050565b600082821c905092915050565b6000612feb60001984600802612fcd565b1980831691505092915050565b60006130048383612fda565b9150826002028217905092915050565b61301d82611bef565b67ffffffffffffffff81111561303657613035611eec565b5b6130408254612507565b61304b828285612f87565b600060209050601f83116001811461307e576000841561306c578287015190505b6130768582612ff8565b8655506130de565b601f19841661308c86612e68565b60005b828110156130b45784890151825560018201915060208501945060208101905061308f565b868310156130d157848901516130cd601f891682612fda565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b600061310d826130e6565b61311781856130f1565b9350613127818560208601611c0b565b61313081611c35565b840191505092915050565b60006080820190506131506000830187611d36565b61315d6020830186611d36565b61316a6040830185611e4c565b818103606083015261317c8184613102565b905095945050505050565b60008151905061319681611b60565b92915050565b6000602082840312156131b2576131b1611b2a565b5b60006131c084828501613187565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212209b00da9e6df57d774d79ceb036935067cf52f7e8f7dae58534054d1eb447157064736f6c63430008130033",
}

// TicketGameABI is the input ABI used to generate the binding from.
// Deprecated: Use TicketGameMetaData.ABI instead.
var TicketGameABI = TicketGameMetaData.ABI

// TicketGameBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TicketGameMetaData.Bin instead.
var TicketGameBin = TicketGameMetaData.Bin

// DeployTicketGame deploys a new Ethereum contract, binding an instance of TicketGame to it.
func DeployTicketGame(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TicketGame, error) {
	parsed, err := TicketGameMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TicketGameBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TicketGame{TicketGameCaller: TicketGameCaller{contract: contract}, TicketGameTransactor: TicketGameTransactor{contract: contract}, TicketGameFilterer: TicketGameFilterer{contract: contract}}, nil
}

// TicketGame is an auto generated Go binding around an Ethereum contract.
type TicketGame struct {
	TicketGameCaller     // Read-only binding to the contract
	TicketGameTransactor // Write-only binding to the contract
	TicketGameFilterer   // Log filterer for contract events
}

// TicketGameCaller is an auto generated read-only Go binding around an Ethereum contract.
type TicketGameCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicketGameTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TicketGameTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicketGameFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TicketGameFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicketGameSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TicketGameSession struct {
	Contract     *TicketGame       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TicketGameCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TicketGameCallerSession struct {
	Contract *TicketGameCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// TicketGameTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TicketGameTransactorSession struct {
	Contract     *TicketGameTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// TicketGameRaw is an auto generated low-level Go binding around an Ethereum contract.
type TicketGameRaw struct {
	Contract *TicketGame // Generic contract binding to access the raw methods on
}

// TicketGameCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TicketGameCallerRaw struct {
	Contract *TicketGameCaller // Generic read-only contract binding to access the raw methods on
}

// TicketGameTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TicketGameTransactorRaw struct {
	Contract *TicketGameTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTicketGame creates a new instance of TicketGame, bound to a specific deployed contract.
func NewTicketGame(address common.Address, backend bind.ContractBackend) (*TicketGame, error) {
	contract, err := bindTicketGame(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TicketGame{TicketGameCaller: TicketGameCaller{contract: contract}, TicketGameTransactor: TicketGameTransactor{contract: contract}, TicketGameFilterer: TicketGameFilterer{contract: contract}}, nil
}

// NewTicketGameCaller creates a new read-only instance of TicketGame, bound to a specific deployed contract.
func NewTicketGameCaller(address common.Address, caller bind.ContractCaller) (*TicketGameCaller, error) {
	contract, err := bindTicketGame(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TicketGameCaller{contract: contract}, nil
}

// NewTicketGameTransactor creates a new write-only instance of TicketGame, bound to a specific deployed contract.
func NewTicketGameTransactor(address common.Address, transactor bind.ContractTransactor) (*TicketGameTransactor, error) {
	contract, err := bindTicketGame(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TicketGameTransactor{contract: contract}, nil
}

// NewTicketGameFilterer creates a new log filterer instance of TicketGame, bound to a specific deployed contract.
func NewTicketGameFilterer(address common.Address, filterer bind.ContractFilterer) (*TicketGameFilterer, error) {
	contract, err := bindTicketGame(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TicketGameFilterer{contract: contract}, nil
}

// bindTicketGame binds a generic wrapper to an already deployed contract.
func bindTicketGame(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TicketGameMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TicketGame *TicketGameRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TicketGame.Contract.TicketGameCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TicketGame *TicketGameRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TicketGame.Contract.TicketGameTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TicketGame *TicketGameRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TicketGame.Contract.TicketGameTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TicketGame *TicketGameCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TicketGame.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TicketGame *TicketGameTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TicketGame.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TicketGame *TicketGameTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TicketGame.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TicketGame *TicketGameCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TicketGame *TicketGameSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TicketGame.Contract.BalanceOf(&_TicketGame.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TicketGame *TicketGameCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TicketGame.Contract.BalanceOf(&_TicketGame.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TicketGame.Contract.GetApproved(&_TicketGame.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TicketGame.Contract.GetApproved(&_TicketGame.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TicketGame *TicketGameCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TicketGame *TicketGameSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TicketGame.Contract.IsApprovedForAll(&_TicketGame.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TicketGame *TicketGameCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TicketGame.Contract.IsApprovedForAll(&_TicketGame.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TicketGame *TicketGameCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TicketGame *TicketGameSession) Name() (string, error) {
	return _TicketGame.Contract.Name(&_TicketGame.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TicketGame *TicketGameCallerSession) Name() (string, error) {
	return _TicketGame.Contract.Name(&_TicketGame.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TicketGame.Contract.OwnerOf(&_TicketGame.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TicketGame.Contract.OwnerOf(&_TicketGame.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TicketGame *TicketGameCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TicketGame *TicketGameSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TicketGame.Contract.SupportsInterface(&_TicketGame.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TicketGame *TicketGameCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TicketGame.Contract.SupportsInterface(&_TicketGame.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TicketGame *TicketGameCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TicketGame *TicketGameSession) Symbol() (string, error) {
	return _TicketGame.Contract.Symbol(&_TicketGame.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TicketGame *TicketGameCallerSession) Symbol() (string, error) {
	return _TicketGame.Contract.Symbol(&_TicketGame.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TicketGame *TicketGameCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TicketGame *TicketGameSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TicketGame.Contract.TokenURI(&_TicketGame.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TicketGame *TicketGameCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TicketGame.Contract.TokenURI(&_TicketGame.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.Approve(&_TicketGame.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.Approve(&_TicketGame.TransactOpts, to, tokenId)
}

// BatchRedeem is a paid mutator transaction binding the contract method 0xcef9341a.
//
// Solidity: function batchRedeem(address[] players, string[] tokenURIs) returns(uint256[] tokenIds)
func (_TicketGame *TicketGameTransactor) BatchRedeem(opts *bind.TransactOpts, players []common.Address, tokenURIs []string) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "batchRedeem", players, tokenURIs)
}

// BatchRedeem is a paid mutator transaction binding the contract method 0xcef9341a.
//
// Solidity: function batchRedeem(address[] players, string[] tokenURIs) returns(uint256[] tokenIds)
func (_TicketGame *TicketGameSession) BatchRedeem(players []common.Address, tokenURIs []string) (*types.Transaction, error) {
	return _TicketGame.Contract.BatchRedeem(&_TicketGame.TransactOpts, players, tokenURIs)
}

// BatchRedeem is a paid mutator transaction binding the contract method 0xcef9341a.
//
// Solidity: function batchRedeem(address[] players, string[] tokenURIs) returns(uint256[] tokenIds)
func (_TicketGame *TicketGameTransactorSession) BatchRedeem(players []common.Address, tokenURIs []string) (*types.Transaction, error) {
	return _TicketGame.Contract.BatchRedeem(&_TicketGame.TransactOpts, players, tokenURIs)
}

// Redeem is a paid mutator transaction binding the contract method 0xf62e7851.
//
// Solidity: function redeem(address player, string tokenURI) returns(uint256)
func (_TicketGame *TicketGameTransactor) Redeem(opts *bind.TransactOpts, player common.Address, tokenURI string) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "redeem", player, tokenURI)
}

// Redeem is a paid mutator transaction binding the contract method 0xf62e7851.
//
// Solidity: function redeem(address player, string tokenURI) returns(uint256)
func (_TicketGame *TicketGameSession) Redeem(player common.Address, tokenURI string) (*types.Transaction, error) {
	return _TicketGame.Contract.Redeem(&_TicketGame.TransactOpts, player, tokenURI)
}

// Redeem is a paid mutator transaction binding the contract method 0xf62e7851.
//
// Solidity: function redeem(address player, string tokenURI) returns(uint256)
func (_TicketGame *TicketGameTransactorSession) Redeem(player common.Address, tokenURI string) (*types.Transaction, error) {
	return _TicketGame.Contract.Redeem(&_TicketGame.TransactOpts, player, tokenURI)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.SafeTransferFrom(&_TicketGame.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.SafeTransferFrom(&_TicketGame.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TicketGame *TicketGameTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TicketGame *TicketGameSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TicketGame.Contract.SafeTransferFrom0(&_TicketGame.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TicketGame *TicketGameTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TicketGame.Contract.SafeTransferFrom0(&_TicketGame.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TicketGame *TicketGameTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TicketGame *TicketGameSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TicketGame.Contract.SetApprovalForAll(&_TicketGame.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TicketGame *TicketGameTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TicketGame.Contract.SetApprovalForAll(&_TicketGame.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.TransferFrom(&_TicketGame.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.TransferFrom(&_TicketGame.TransactOpts, from, to, tokenId)
}

// TicketGameApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the TicketGame contract.
type TicketGameApprovalIterator struct {
	Event *TicketGameApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketGameApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketGameApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketGameApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketGameApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketGameApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketGameApproval represents a Approval event raised by the TicketGame contract.
type TicketGameApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TicketGameApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TicketGame.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TicketGameApprovalIterator{contract: _TicketGame.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TicketGameApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TicketGame.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketGameApproval)
				if err := _TicketGame.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) ParseApproval(log types.Log) (*TicketGameApproval, error) {
	event := new(TicketGameApproval)
	if err := _TicketGame.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TicketGameApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the TicketGame contract.
type TicketGameApprovalForAllIterator struct {
	Event *TicketGameApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketGameApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketGameApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketGameApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketGameApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketGameApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketGameApprovalForAll represents a ApprovalForAll event raised by the TicketGame contract.
type TicketGameApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TicketGame *TicketGameFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TicketGameApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TicketGame.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TicketGameApprovalForAllIterator{contract: _TicketGame.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TicketGame *TicketGameFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TicketGameApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TicketGame.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketGameApprovalForAll)
				if err := _TicketGame.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TicketGame *TicketGameFilterer) ParseApprovalForAll(log types.Log) (*TicketGameApprovalForAll, error) {
	event := new(TicketGameApprovalForAll)
	if err := _TicketGame.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TicketGameBatchMetadataUpdateIterator is returned from FilterBatchMetadataUpdate and is used to iterate over the raw logs and unpacked data for BatchMetadataUpdate events raised by the TicketGame contract.
type TicketGameBatchMetadataUpdateIterator struct {
	Event *TicketGameBatchMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketGameBatchMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketGameBatchMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketGameBatchMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketGameBatchMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketGameBatchMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketGameBatchMetadataUpdate represents a BatchMetadataUpdate event raised by the TicketGame contract.
type TicketGameBatchMetadataUpdate struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBatchMetadataUpdate is a free log retrieval operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_TicketGame *TicketGameFilterer) FilterBatchMetadataUpdate(opts *bind.FilterOpts) (*TicketGameBatchMetadataUpdateIterator, error) {

	logs, sub, err := _TicketGame.contract.FilterLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &TicketGameBatchMetadataUpdateIterator{contract: _TicketGame.contract, event: "BatchMetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchBatchMetadataUpdate is a free log subscription operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_TicketGame *TicketGameFilterer) WatchBatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *TicketGameBatchMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _TicketGame.contract.WatchLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketGameBatchMetadataUpdate)
				if err := _TicketGame.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchMetadataUpdate is a log parse operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_TicketGame *TicketGameFilterer) ParseBatchMetadataUpdate(log types.Log) (*TicketGameBatchMetadataUpdate, error) {
	event := new(TicketGameBatchMetadataUpdate)
	if err := _TicketGame.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TicketGameMetadataUpdateIterator is returned from FilterMetadataUpdate and is used to iterate over the raw logs and unpacked data for MetadataUpdate events raised by the TicketGame contract.
type TicketGameMetadataUpdateIterator struct {
	Event *TicketGameMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketGameMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketGameMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketGameMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketGameMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketGameMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketGameMetadataUpdate represents a MetadataUpdate event raised by the TicketGame contract.
type TicketGameMetadataUpdate struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMetadataUpdate is a free log retrieval operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_TicketGame *TicketGameFilterer) FilterMetadataUpdate(opts *bind.FilterOpts) (*TicketGameMetadataUpdateIterator, error) {

	logs, sub, err := _TicketGame.contract.FilterLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &TicketGameMetadataUpdateIterator{contract: _TicketGame.contract, event: "MetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchMetadataUpdate is a free log subscription operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_TicketGame *TicketGameFilterer) WatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *TicketGameMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _TicketGame.contract.WatchLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketGameMetadataUpdate)
				if err := _TicketGame.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetadataUpdate is a log parse operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_TicketGame *TicketGameFilterer) ParseMetadataUpdate(log types.Log) (*TicketGameMetadataUpdate, error) {
	event := new(TicketGameMetadataUpdate)
	if err := _TicketGame.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TicketGameTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the TicketGame contract.
type TicketGameTransferIterator struct {
	Event *TicketGameTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketGameTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketGameTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketGameTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketGameTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketGameTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketGameTransfer represents a Transfer event raised by the TicketGame contract.
type TicketGameTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TicketGameTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TicketGame.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TicketGameTransferIterator{contract: _TicketGame.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TicketGameTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TicketGame.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketGameTransfer)
				if err := _TicketGame.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) ParseTransfer(log types.Log) (*TicketGameTransfer, error) {
	event := new(TicketGameTransfer)
	if err := _TicketGame.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
