// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TicketGameMetaData contains all meta data concerning the TicketGame contract.
var TicketGameMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"player\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURI\",\"type\":\"string[]\"}],\"name\":\"batchRedeem\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f5469636b657447616d65000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f7469636b6574000000000000000000000000000000000000000000000000000081525081600090816200008f919062000324565b508060019081620000a1919062000324565b5050506200040b565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200012c57607f821691505b602082108103620001425762000141620000e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200016d565b620001b886836200016d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000205620001ff620001f984620001d0565b620001da565b620001d0565b9050919050565b6000819050919050565b6200022183620001e4565b6200023962000230826200020c565b8484546200017a565b825550505050565b600090565b6200025062000241565b6200025d81848462000216565b505050565b5b8181101562000285576200027960008262000246565b60018101905062000263565b5050565b601f821115620002d4576200029e8162000148565b620002a9846200015d565b81016020851015620002b9578190505b620002d1620002c8856200015d565b83018262000262565b50505b505050565b600082821c905092915050565b6000620002f960001984600802620002d9565b1980831691505092915050565b6000620003148383620002e6565b9150826002028217905092915050565b6200032f82620000aa565b67ffffffffffffffff8111156200034b576200034a620000b5565b5b62000357825462000113565b6200036482828562000289565b600060209050601f8311600181146200039c576000841562000387578287015190505b62000393858262000306565b86555062000403565b601f198416620003ac8662000148565b60005b82811015620003d657848901518255600182019150602085019450602081019050620003af565b86831015620003f65784890151620003f2601f891682620002e6565b8355505b6001600288020188555050505b505050505050565b6131e2806200041b6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063c87b56dd11610066578063c87b56dd14610282578063cef9341a146102b2578063e985e9c5146102e2578063f62e785114610312576100f5565b806370a08231146101fc57806395d89b411461022c578063a22cb4651461024a578063b88d4fde14610266576100f5565b8063095ea7b3116100d3578063095ea7b31461017857806323b872dd1461019457806342842e0e146101b05780636352211e146101cc576100f5565b806301ffc9a7146100fa57806306fdde031461012a578063081812fc14610148575b600080fd5b610114600480360381019061010f9190611b40565b610342565b6040516101219190611b88565b60405180910390f35b6101326103a3565b60405161013f9190611c33565b60405180910390f35b610162600480360381019061015d9190611c8b565b610435565b60405161016f9190611cf9565b60405180910390f35b610192600480360381019061018d9190611d40565b61047b565b005b6101ae60048036038101906101a99190611d80565b610592565b005b6101ca60048036038101906101c59190611d80565b6105f2565b005b6101e660048036038101906101e19190611c8b565b610612565b6040516101f39190611cf9565b60405180910390f35b61021660048036038101906102119190611dd3565b610698565b6040516102239190611e0f565b60405180910390f35b61023461074f565b6040516102419190611c33565b60405180910390f35b610264600480360381019061025f9190611e56565b6107e1565b005b610280600480360381019061027b9190611fcb565b6107f7565b005b61029c60048036038101906102979190611c8b565b610859565b6040516102a99190611c33565b60405180910390f35b6102cc60048036038101906102c79190612298565b61096b565b6040516102d991906123ce565b60405180910390f35b6102fc60048036038101906102f791906123f0565b610abd565b6040516103099190611b88565b60405180910390f35b61032c60048036038101906103279190612430565b610b51565b6040516103399190611e0f565b60405180910390f35b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061039c575061039b82610b91565b5b9050919050565b6060600080546103b2906124bb565b80601f01602080910402602001604051908101604052809291908181526020018280546103de906124bb565b801561042b5780601f106104005761010080835404028352916020019161042b565b820191906000526020600020905b81548152906001019060200180831161040e57829003601f168201915b5050505050905090565b600061044082610c73565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061048682610612565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ed9061255e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610515610cbe565b73ffffffffffffffffffffffffffffffffffffffff16148061054457506105438161053e610cbe565b610abd565b5b610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a906125f0565b60405180910390fd5b61058d8383610cc6565b505050565b6105a361059d610cbe565b82610d7f565b6105e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d990612682565b60405180910390fd5b6105ed838383610e14565b505050565b61060d838383604051806020016040528060008152506107f7565b505050565b60008061061e8361110d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610686906126ee565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ff90612780565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075e906124bb565b80601f016020809104026020016040519081016040528092919081815260200182805461078a906124bb565b80156107d75780601f106107ac576101008083540402835291602001916107d7565b820191906000526020600020905b8154815290600101906020018083116107ba57829003601f168201915b5050505050905090565b6107f36107ec610cbe565b838361114a565b5050565b610808610802610cbe565b83610d7f565b610847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083e90612682565b60405180910390fd5b610853848484846112b6565b50505050565b606061086482610c73565b6000600660008481526020019081526020016000208054610884906124bb565b80601f01602080910402602001604051908101604052809291908181526020018280546108b0906124bb565b80156108fd5780601f106108d2576101008083540402835291602001916108fd565b820191906000526020600020905b8154815290600101906020018083116108e057829003601f168201915b50505050509050600061090e611312565b90506000815103610923578192505050610966565b6000825111156109585780826040516020016109409291906127dc565b60405160208183030381529060405292505050610966565b61096184611329565b925050505b919050565b606060008351116109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890612872565b60405180910390fd5b6103e88351106109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90612904565b60405180910390fd5b8151835114610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3190612996565b60405180910390fd5b60005b8351811015610ab657610a84848281518110610a5c57610a5b6129b6565b5b6020026020010151848381518110610a7757610a766129b6565b5b6020026020010151610b51565b828281518110610a9757610a966129b6565b5b6020026020010181815250508080610aae90612a14565b915050610a3d565b5092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806007549050610b638482611391565b610b6d81846115ae565b600160076000828254610b809190612a5c565b925050819055508091505092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c5c57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610c6c5750610c6b82611652565b5b9050919050565b610c7c816116bc565b610cbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb2906126ee565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610d3983610612565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610d8b83610612565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610dcd5750610dcc8185610abd565b5b80610e0b57508373ffffffffffffffffffffffffffffffffffffffff16610df384610435565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e3482610612565b73ffffffffffffffffffffffffffffffffffffffff1614610e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8190612b02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ef9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef090612b94565b60405180910390fd5b610f0683838360016116fd565b8273ffffffffffffffffffffffffffffffffffffffff16610f2682610612565b73ffffffffffffffffffffffffffffffffffffffff1614610f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7390612b02565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111088383836001611703565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111af90612c00565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516112a99190611b88565b60405180910390a3505050565b6112c1848484610e14565b6112cd84848484611709565b61130c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130390612c92565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061133482610c73565b600061133e611312565b9050600081511161135e5760405180602001604052806000815250611389565b8061136884611890565b6040516020016113799291906127dc565b6040516020818303038152906040525b915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f790612cfe565b60405180910390fd5b611409816116bc565b15611449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144090612d6a565b60405180910390fd5b6114576000838360016116fd565b611460816116bc565b156114a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149790612d6a565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115aa600083836001611703565b5050565b6115b7826116bc565b6115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed90612dfc565b60405180910390fd5b806006600084815260200190815260200160002090816116169190612fc8565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516116469190611e0f565b60405180910390a15050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166116de8361110d565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b600061172a8473ffffffffffffffffffffffffffffffffffffffff1661195e565b15611883578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611753610cbe565b8786866040518563ffffffff1660e01b815260040161177594939291906130ef565b6020604051808303816000875af19250505080156117b157506040513d601f19601f820116820180604052508101906117ae9190613150565b60015b611833573d80600081146117e1576040519150601f19603f3d011682016040523d82523d6000602084013e6117e6565b606091505b50600081510361182b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182290612c92565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611888565b600190505b949350505050565b60606000600161189f84611981565b01905060008167ffffffffffffffff8111156118be576118bd611ea0565b5b6040519080825280601f01601f1916602001820160405280156118f05781602001600182028036833780820191505090505b509050600082602001820190505b600115611953578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816119475761194661317d565b5b049450600085036118fe575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106119df577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816119d5576119d461317d565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611a1c576d04ee2d6d415b85acef81000000008381611a1257611a1161317d565b5b0492506020810190505b662386f26fc100008310611a4b57662386f26fc100008381611a4157611a4061317d565b5b0492506010810190505b6305f5e1008310611a74576305f5e1008381611a6a57611a6961317d565b5b0492506008810190505b6127108310611a99576127108381611a8f57611a8e61317d565b5b0492506004810190505b60648310611abc5760648381611ab257611ab161317d565b5b0492506002810190505b600a8310611acb576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b1d81611ae8565b8114611b2857600080fd5b50565b600081359050611b3a81611b14565b92915050565b600060208284031215611b5657611b55611ade565b5b6000611b6484828501611b2b565b91505092915050565b60008115159050919050565b611b8281611b6d565b82525050565b6000602082019050611b9d6000830184611b79565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bdd578082015181840152602081019050611bc2565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c0582611ba3565b611c0f8185611bae565b9350611c1f818560208601611bbf565b611c2881611be9565b840191505092915050565b60006020820190508181036000830152611c4d8184611bfa565b905092915050565b6000819050919050565b611c6881611c55565b8114611c7357600080fd5b50565b600081359050611c8581611c5f565b92915050565b600060208284031215611ca157611ca0611ade565b5b6000611caf84828501611c76565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ce382611cb8565b9050919050565b611cf381611cd8565b82525050565b6000602082019050611d0e6000830184611cea565b92915050565b611d1d81611cd8565b8114611d2857600080fd5b50565b600081359050611d3a81611d14565b92915050565b60008060408385031215611d5757611d56611ade565b5b6000611d6585828601611d2b565b9250506020611d7685828601611c76565b9150509250929050565b600080600060608486031215611d9957611d98611ade565b5b6000611da786828701611d2b565b9350506020611db886828701611d2b565b9250506040611dc986828701611c76565b9150509250925092565b600060208284031215611de957611de8611ade565b5b6000611df784828501611d2b565b91505092915050565b611e0981611c55565b82525050565b6000602082019050611e246000830184611e00565b92915050565b611e3381611b6d565b8114611e3e57600080fd5b50565b600081359050611e5081611e2a565b92915050565b60008060408385031215611e6d57611e6c611ade565b5b6000611e7b85828601611d2b565b9250506020611e8c85828601611e41565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ed882611be9565b810181811067ffffffffffffffff82111715611ef757611ef6611ea0565b5b80604052505050565b6000611f0a611ad4565b9050611f168282611ecf565b919050565b600067ffffffffffffffff821115611f3657611f35611ea0565b5b611f3f82611be9565b9050602081019050919050565b82818337600083830152505050565b6000611f6e611f6984611f1b565b611f00565b905082815260208101848484011115611f8a57611f89611e9b565b5b611f95848285611f4c565b509392505050565b600082601f830112611fb257611fb1611e96565b5b8135611fc2848260208601611f5b565b91505092915050565b60008060008060808587031215611fe557611fe4611ade565b5b6000611ff387828801611d2b565b945050602061200487828801611d2b565b935050604061201587828801611c76565b925050606085013567ffffffffffffffff81111561203657612035611ae3565b5b61204287828801611f9d565b91505092959194509250565b600067ffffffffffffffff82111561206957612068611ea0565b5b602082029050602081019050919050565b600080fd5b600061209261208d8461204e565b611f00565b905080838252602082019050602084028301858111156120b5576120b461207a565b5b835b818110156120de57806120ca8882611d2b565b8452602084019350506020810190506120b7565b5050509392505050565b600082601f8301126120fd576120fc611e96565b5b813561210d84826020860161207f565b91505092915050565b600067ffffffffffffffff82111561213157612130611ea0565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561215d5761215c611ea0565b5b61216682611be9565b9050602081019050919050565b600061218661218184612142565b611f00565b9050828152602081018484840111156121a2576121a1611e9b565b5b6121ad848285611f4c565b509392505050565b600082601f8301126121ca576121c9611e96565b5b81356121da848260208601612173565b91505092915050565b60006121f66121f184612116565b611f00565b905080838252602082019050602084028301858111156122195761221861207a565b5b835b8181101561226057803567ffffffffffffffff81111561223e5761223d611e96565b5b80860161224b89826121b5565b8552602085019450505060208101905061221b565b5050509392505050565b600082601f83011261227f5761227e611e96565b5b813561228f8482602086016121e3565b91505092915050565b600080604083850312156122af576122ae611ade565b5b600083013567ffffffffffffffff8111156122cd576122cc611ae3565b5b6122d9858286016120e8565b925050602083013567ffffffffffffffff8111156122fa576122f9611ae3565b5b6123068582860161226a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61234581611c55565b82525050565b6000612357838361233c565b60208301905092915050565b6000602082019050919050565b600061237b82612310565b612385818561231b565b93506123908361232c565b8060005b838110156123c15781516123a8888261234b565b97506123b383612363565b925050600181019050612394565b5085935050505092915050565b600060208201905081810360008301526123e88184612370565b905092915050565b6000806040838503121561240757612406611ade565b5b600061241585828601611d2b565b925050602061242685828601611d2b565b9150509250929050565b6000806040838503121561244757612446611ade565b5b600061245585828601611d2b565b925050602083013567ffffffffffffffff81111561247657612475611ae3565b5b612482858286016121b5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124d357607f821691505b6020821081036124e6576124e561248c565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612548602183611bae565b9150612553826124ec565b604082019050919050565b600060208201905081810360008301526125778161253b565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006125da603d83611bae565b91506125e58261257e565b604082019050919050565b60006020820190508181036000830152612609816125cd565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b600061266c602d83611bae565b915061267782612610565b604082019050919050565b6000602082019050818103600083015261269b8161265f565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006126d8601883611bae565b91506126e3826126a2565b602082019050919050565b60006020820190508181036000830152612707816126cb565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061276a602983611bae565b91506127758261270e565b604082019050919050565b600060208201905081810360008301526127998161275d565b9050919050565b600081905092915050565b60006127b682611ba3565b6127c081856127a0565b93506127d0818560208601611bbf565b80840191505092915050565b60006127e882856127ab565b91506127f482846127ab565b91508190509392505050565b7f706c617965722e6c656e677468206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b600061285c602483611bae565b915061286782612800565b604082019050919050565b6000602082019050818103600083015261288b8161284f565b9050919050565b7f706c617965722e6c656e677468206d757374206265206c657373207468616e2060008201527f3130303000000000000000000000000000000000000000000000000000000000602082015250565b60006128ee602483611bae565b91506128f982612892565b604082019050919050565b6000602082019050818103600083015261291d816128e1565b9050919050565b7f706c617965722e6c656e677468206e6f7420657175616c20746f6b656e55524960008201527f2e6c656e67746800000000000000000000000000000000000000000000000000602082015250565b6000612980602783611bae565b915061298b82612924565b604082019050919050565b600060208201905081810360008301526129af81612973565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a1f82611c55565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a5157612a506129e5565b5b600182019050919050565b6000612a6782611c55565b9150612a7283611c55565b9250828201905080821115612a8a57612a896129e5565b5b92915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612aec602583611bae565b9150612af782612a90565b604082019050919050565b60006020820190508181036000830152612b1b81612adf565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b7e602483611bae565b9150612b8982612b22565b604082019050919050565b60006020820190508181036000830152612bad81612b71565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612bea601983611bae565b9150612bf582612bb4565b602082019050919050565b60006020820190508181036000830152612c1981612bdd565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612c7c603283611bae565b9150612c8782612c20565b604082019050919050565b60006020820190508181036000830152612cab81612c6f565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612ce8602083611bae565b9150612cf382612cb2565b602082019050919050565b60006020820190508181036000830152612d1781612cdb565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612d54601c83611bae565b9150612d5f82612d1e565b602082019050919050565b60006020820190508181036000830152612d8381612d47565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612de6602e83611bae565b9150612df182612d8a565b604082019050919050565b60006020820190508181036000830152612e1581612dd9565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612e7e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e41565b612e888683612e41565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612ec5612ec0612ebb84611c55565b612ea0565b611c55565b9050919050565b6000819050919050565b612edf83612eaa565b612ef3612eeb82612ecc565b848454612e4e565b825550505050565b600090565b612f08612efb565b612f13818484612ed6565b505050565b5b81811015612f3757612f2c600082612f00565b600181019050612f19565b5050565b601f821115612f7c57612f4d81612e1c565b612f5684612e31565b81016020851015612f65578190505b612f79612f7185612e31565b830182612f18565b50505b505050565b600082821c905092915050565b6000612f9f60001984600802612f81565b1980831691505092915050565b6000612fb88383612f8e565b9150826002028217905092915050565b612fd182611ba3565b67ffffffffffffffff811115612fea57612fe9611ea0565b5b612ff482546124bb565b612fff828285612f3b565b600060209050601f8311600181146130325760008415613020578287015190505b61302a8582612fac565b865550613092565b601f19841661304086612e1c565b60005b8281101561306857848901518255600182019150602085019450602081019050613043565b868310156130855784890151613081601f891682612f8e565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b60006130c18261309a565b6130cb81856130a5565b93506130db818560208601611bbf565b6130e481611be9565b840191505092915050565b60006080820190506131046000830187611cea565b6131116020830186611cea565b61311e6040830185611e00565b818103606083015261313081846130b6565b905095945050505050565b60008151905061314a81611b14565b92915050565b60006020828403121561316657613165611ade565b5b60006131748482850161313b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212201f3d7f3e5a16138511b8a66589590fe657dabb4829ded94646f69b8ded443d5164736f6c63430008130033",
}

// TicketGameABI is the input ABI used to generate the binding from.
// Deprecated: Use TicketGameMetaData.ABI instead.
var TicketGameABI = TicketGameMetaData.ABI

// TicketGameBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TicketGameMetaData.Bin instead.
var TicketGameBin = TicketGameMetaData.Bin

// DeployTicketGame deploys a new Ethereum contract, binding an instance of TicketGame to it.
func DeployTicketGame(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TicketGame, error) {
	parsed, err := TicketGameMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TicketGameBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TicketGame{TicketGameCaller: TicketGameCaller{contract: contract}, TicketGameTransactor: TicketGameTransactor{contract: contract}, TicketGameFilterer: TicketGameFilterer{contract: contract}}, nil
}

// TicketGame is an auto generated Go binding around an Ethereum contract.
type TicketGame struct {
	TicketGameCaller     // Read-only binding to the contract
	TicketGameTransactor // Write-only binding to the contract
	TicketGameFilterer   // Log filterer for contract events
}

// TicketGameCaller is an auto generated read-only Go binding around an Ethereum contract.
type TicketGameCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicketGameTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TicketGameTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicketGameFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TicketGameFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicketGameSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TicketGameSession struct {
	Contract     *TicketGame       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TicketGameCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TicketGameCallerSession struct {
	Contract *TicketGameCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// TicketGameTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TicketGameTransactorSession struct {
	Contract     *TicketGameTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// TicketGameRaw is an auto generated low-level Go binding around an Ethereum contract.
type TicketGameRaw struct {
	Contract *TicketGame // Generic contract binding to access the raw methods on
}

// TicketGameCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TicketGameCallerRaw struct {
	Contract *TicketGameCaller // Generic read-only contract binding to access the raw methods on
}

// TicketGameTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TicketGameTransactorRaw struct {
	Contract *TicketGameTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTicketGame creates a new instance of TicketGame, bound to a specific deployed contract.
func NewTicketGame(address common.Address, backend bind.ContractBackend) (*TicketGame, error) {
	contract, err := bindTicketGame(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TicketGame{TicketGameCaller: TicketGameCaller{contract: contract}, TicketGameTransactor: TicketGameTransactor{contract: contract}, TicketGameFilterer: TicketGameFilterer{contract: contract}}, nil
}

// NewTicketGameCaller creates a new read-only instance of TicketGame, bound to a specific deployed contract.
func NewTicketGameCaller(address common.Address, caller bind.ContractCaller) (*TicketGameCaller, error) {
	contract, err := bindTicketGame(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TicketGameCaller{contract: contract}, nil
}

// NewTicketGameTransactor creates a new write-only instance of TicketGame, bound to a specific deployed contract.
func NewTicketGameTransactor(address common.Address, transactor bind.ContractTransactor) (*TicketGameTransactor, error) {
	contract, err := bindTicketGame(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TicketGameTransactor{contract: contract}, nil
}

// NewTicketGameFilterer creates a new log filterer instance of TicketGame, bound to a specific deployed contract.
func NewTicketGameFilterer(address common.Address, filterer bind.ContractFilterer) (*TicketGameFilterer, error) {
	contract, err := bindTicketGame(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TicketGameFilterer{contract: contract}, nil
}

// bindTicketGame binds a generic wrapper to an already deployed contract.
func bindTicketGame(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TicketGameMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TicketGame *TicketGameRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TicketGame.Contract.TicketGameCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TicketGame *TicketGameRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TicketGame.Contract.TicketGameTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TicketGame *TicketGameRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TicketGame.Contract.TicketGameTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TicketGame *TicketGameCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TicketGame.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TicketGame *TicketGameTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TicketGame.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TicketGame *TicketGameTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TicketGame.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TicketGame *TicketGameCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TicketGame *TicketGameSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TicketGame.Contract.BalanceOf(&_TicketGame.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TicketGame *TicketGameCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TicketGame.Contract.BalanceOf(&_TicketGame.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TicketGame.Contract.GetApproved(&_TicketGame.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TicketGame.Contract.GetApproved(&_TicketGame.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TicketGame *TicketGameCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TicketGame *TicketGameSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TicketGame.Contract.IsApprovedForAll(&_TicketGame.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TicketGame *TicketGameCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TicketGame.Contract.IsApprovedForAll(&_TicketGame.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TicketGame *TicketGameCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TicketGame *TicketGameSession) Name() (string, error) {
	return _TicketGame.Contract.Name(&_TicketGame.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TicketGame *TicketGameCallerSession) Name() (string, error) {
	return _TicketGame.Contract.Name(&_TicketGame.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TicketGame.Contract.OwnerOf(&_TicketGame.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TicketGame *TicketGameCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TicketGame.Contract.OwnerOf(&_TicketGame.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TicketGame *TicketGameCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TicketGame *TicketGameSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TicketGame.Contract.SupportsInterface(&_TicketGame.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TicketGame *TicketGameCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TicketGame.Contract.SupportsInterface(&_TicketGame.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TicketGame *TicketGameCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TicketGame *TicketGameSession) Symbol() (string, error) {
	return _TicketGame.Contract.Symbol(&_TicketGame.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TicketGame *TicketGameCallerSession) Symbol() (string, error) {
	return _TicketGame.Contract.Symbol(&_TicketGame.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TicketGame *TicketGameCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TicketGame.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TicketGame *TicketGameSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TicketGame.Contract.TokenURI(&_TicketGame.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TicketGame *TicketGameCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TicketGame.Contract.TokenURI(&_TicketGame.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.Approve(&_TicketGame.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.Approve(&_TicketGame.TransactOpts, to, tokenId)
}

// BatchRedeem is a paid mutator transaction binding the contract method 0xcef9341a.
//
// Solidity: function batchRedeem(address[] player, string[] tokenURI) returns(uint256[] tokenIds)
func (_TicketGame *TicketGameTransactor) BatchRedeem(opts *bind.TransactOpts, player []common.Address, tokenURI []string) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "batchRedeem", player, tokenURI)
}

// BatchRedeem is a paid mutator transaction binding the contract method 0xcef9341a.
//
// Solidity: function batchRedeem(address[] player, string[] tokenURI) returns(uint256[] tokenIds)
func (_TicketGame *TicketGameSession) BatchRedeem(player []common.Address, tokenURI []string) (*types.Transaction, error) {
	return _TicketGame.Contract.BatchRedeem(&_TicketGame.TransactOpts, player, tokenURI)
}

// BatchRedeem is a paid mutator transaction binding the contract method 0xcef9341a.
//
// Solidity: function batchRedeem(address[] player, string[] tokenURI) returns(uint256[] tokenIds)
func (_TicketGame *TicketGameTransactorSession) BatchRedeem(player []common.Address, tokenURI []string) (*types.Transaction, error) {
	return _TicketGame.Contract.BatchRedeem(&_TicketGame.TransactOpts, player, tokenURI)
}

// Redeem is a paid mutator transaction binding the contract method 0xf62e7851.
//
// Solidity: function redeem(address player, string tokenURI) returns(uint256)
func (_TicketGame *TicketGameTransactor) Redeem(opts *bind.TransactOpts, player common.Address, tokenURI string) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "redeem", player, tokenURI)
}

// Redeem is a paid mutator transaction binding the contract method 0xf62e7851.
//
// Solidity: function redeem(address player, string tokenURI) returns(uint256)
func (_TicketGame *TicketGameSession) Redeem(player common.Address, tokenURI string) (*types.Transaction, error) {
	return _TicketGame.Contract.Redeem(&_TicketGame.TransactOpts, player, tokenURI)
}

// Redeem is a paid mutator transaction binding the contract method 0xf62e7851.
//
// Solidity: function redeem(address player, string tokenURI) returns(uint256)
func (_TicketGame *TicketGameTransactorSession) Redeem(player common.Address, tokenURI string) (*types.Transaction, error) {
	return _TicketGame.Contract.Redeem(&_TicketGame.TransactOpts, player, tokenURI)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.SafeTransferFrom(&_TicketGame.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.SafeTransferFrom(&_TicketGame.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TicketGame *TicketGameTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TicketGame *TicketGameSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TicketGame.Contract.SafeTransferFrom0(&_TicketGame.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TicketGame *TicketGameTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TicketGame.Contract.SafeTransferFrom0(&_TicketGame.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TicketGame *TicketGameTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TicketGame *TicketGameSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TicketGame.Contract.SetApprovalForAll(&_TicketGame.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TicketGame *TicketGameTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TicketGame.Contract.SetApprovalForAll(&_TicketGame.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.TransferFrom(&_TicketGame.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TicketGame *TicketGameTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TicketGame.Contract.TransferFrom(&_TicketGame.TransactOpts, from, to, tokenId)
}

// TicketGameApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the TicketGame contract.
type TicketGameApprovalIterator struct {
	Event *TicketGameApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketGameApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketGameApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketGameApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketGameApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketGameApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketGameApproval represents a Approval event raised by the TicketGame contract.
type TicketGameApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TicketGameApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TicketGame.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TicketGameApprovalIterator{contract: _TicketGame.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TicketGameApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TicketGame.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketGameApproval)
				if err := _TicketGame.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) ParseApproval(log types.Log) (*TicketGameApproval, error) {
	event := new(TicketGameApproval)
	if err := _TicketGame.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TicketGameApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the TicketGame contract.
type TicketGameApprovalForAllIterator struct {
	Event *TicketGameApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketGameApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketGameApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketGameApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketGameApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketGameApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketGameApprovalForAll represents a ApprovalForAll event raised by the TicketGame contract.
type TicketGameApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TicketGame *TicketGameFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TicketGameApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TicketGame.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TicketGameApprovalForAllIterator{contract: _TicketGame.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TicketGame *TicketGameFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TicketGameApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TicketGame.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketGameApprovalForAll)
				if err := _TicketGame.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TicketGame *TicketGameFilterer) ParseApprovalForAll(log types.Log) (*TicketGameApprovalForAll, error) {
	event := new(TicketGameApprovalForAll)
	if err := _TicketGame.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TicketGameBatchMetadataUpdateIterator is returned from FilterBatchMetadataUpdate and is used to iterate over the raw logs and unpacked data for BatchMetadataUpdate events raised by the TicketGame contract.
type TicketGameBatchMetadataUpdateIterator struct {
	Event *TicketGameBatchMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketGameBatchMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketGameBatchMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketGameBatchMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketGameBatchMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketGameBatchMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketGameBatchMetadataUpdate represents a BatchMetadataUpdate event raised by the TicketGame contract.
type TicketGameBatchMetadataUpdate struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBatchMetadataUpdate is a free log retrieval operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_TicketGame *TicketGameFilterer) FilterBatchMetadataUpdate(opts *bind.FilterOpts) (*TicketGameBatchMetadataUpdateIterator, error) {

	logs, sub, err := _TicketGame.contract.FilterLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &TicketGameBatchMetadataUpdateIterator{contract: _TicketGame.contract, event: "BatchMetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchBatchMetadataUpdate is a free log subscription operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_TicketGame *TicketGameFilterer) WatchBatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *TicketGameBatchMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _TicketGame.contract.WatchLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketGameBatchMetadataUpdate)
				if err := _TicketGame.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchMetadataUpdate is a log parse operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_TicketGame *TicketGameFilterer) ParseBatchMetadataUpdate(log types.Log) (*TicketGameBatchMetadataUpdate, error) {
	event := new(TicketGameBatchMetadataUpdate)
	if err := _TicketGame.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TicketGameMetadataUpdateIterator is returned from FilterMetadataUpdate and is used to iterate over the raw logs and unpacked data for MetadataUpdate events raised by the TicketGame contract.
type TicketGameMetadataUpdateIterator struct {
	Event *TicketGameMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketGameMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketGameMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketGameMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketGameMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketGameMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketGameMetadataUpdate represents a MetadataUpdate event raised by the TicketGame contract.
type TicketGameMetadataUpdate struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMetadataUpdate is a free log retrieval operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_TicketGame *TicketGameFilterer) FilterMetadataUpdate(opts *bind.FilterOpts) (*TicketGameMetadataUpdateIterator, error) {

	logs, sub, err := _TicketGame.contract.FilterLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &TicketGameMetadataUpdateIterator{contract: _TicketGame.contract, event: "MetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchMetadataUpdate is a free log subscription operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_TicketGame *TicketGameFilterer) WatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *TicketGameMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _TicketGame.contract.WatchLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketGameMetadataUpdate)
				if err := _TicketGame.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetadataUpdate is a log parse operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_TicketGame *TicketGameFilterer) ParseMetadataUpdate(log types.Log) (*TicketGameMetadataUpdate, error) {
	event := new(TicketGameMetadataUpdate)
	if err := _TicketGame.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TicketGameTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the TicketGame contract.
type TicketGameTransferIterator struct {
	Event *TicketGameTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketGameTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketGameTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketGameTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketGameTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketGameTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketGameTransfer represents a Transfer event raised by the TicketGame contract.
type TicketGameTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TicketGameTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TicketGame.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TicketGameTransferIterator{contract: _TicketGame.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TicketGameTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TicketGame.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketGameTransfer)
				if err := _TicketGame.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TicketGame *TicketGameFilterer) ParseTransfer(log types.Log) (*TicketGameTransfer, error) {
	event := new(TicketGameTransfer)
	if err := _TicketGame.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
